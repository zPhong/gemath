{"version":3,"sources":["serviceWorker.js","Model/AppData.js","core/definition/define.js","utils/values.js","core/math/Converter.js","core/math/Generation.js","utils/ErrorHandleService.js","core/math/Math2D.js","utils/checker.js","core/definition/defineObjType.js","core/validation/validation.js","core/definition/index.js","core/definition/defineShapeType.js","core/definition/definePointType.js","core/math/GenerateGeometry.js","core/analysis/ReadPointsMap.js","core/analysis/ReadRelation.js","core/analysis/Analysis.js","Model/RelationInputModel.js","ViewModel/DataViewModel.js","View/components/InputItem/InputItem.js","View/components/Icon/Icon.js","View/components/Icon/Svg.js","View/components/SegmentSetting/SegmentSetting.js","vendor/euclid/model/geom.js","vendor/euclid/model/point.js","vendor/euclid/calc.js","vendor/euclid/model/circle.js","vendor/euclid/model/line.js","vendor/euclid/model/segment.js","vendor/euclid/intersection.js","vendor/euclid/model/intersection.js","vendor/euclid/model/index.js","vendor/euclid/scene.js","vendor/euclid/render.js","View/components/DrawingPanel/DrawingPanel.js","View/MainView.js","index.js","utils/color.scss","View/components/InputItem/InputItem.scss"],"names":["Boolean","window","location","hostname","match","appData","AppData","Object","classCallCheck","this","additionSegment","relationsResult","pointsMap","pointsDirectionMap","executedRelations","executedNode","__pointDetails__","Map","clear","segment","push","newPointsMap","value","defineSentences","define","relation","shape","reversedDependentObjRelation","RankingObjectContain","objectWithPoint","validate","object","point","length","format","ray","line","angle","triangle","quadrilateral","trapezoid","parallelogram","rectangle","rhombus","square","circle","shapeType","shapeRules","right","isosceles","right_isosceles","equilateral","normal","mappingShapeType","vuông","cân","vuông cân","đều","nội tiếp","ngoại tiếp","circleType","TwoStaticPointRequireShape","ShapeAffectBySegmentChange","GConst","Number","freeze","MIN_RANDOM_NUMBER","MAX_RANDOM_NUMBER","MIN_RANDOM_GENERATION","MAX_RANDOM_GENERATION","NOT_FOUND","String","INFINITY","IMPOSSIBLE","TOO_SHORT","NOT_ENOUGH_SET","NOT_BE_IN_LINE","Regex","KEY","OTHER","Others","OPERATIONS","Errors","WRONG_FORMAT","MAXIMUM_POINT_ERROR","InputStatus","SUCCESS","NORMAL","ERROR","convertLinearToEquation","l","a","b","c","d","e","convertEquationToLineType","convertLineTypeToEquation","MIN","MAX","getRandomValue","min","max","Math","floor","random","getRandomPointInEquation","equation","tempX","x","y","centerPoint","radius","sqrt","randomValueX","solvedValueY","calculateQuadraticEquation","secondRoot","firstRoot","generatePointAlignmentInside","firstPoint","secondPoint","getLineFromTwoPoints","generatePointAlignmentOutside","isRight","arguments","undefined","tempXRight","tempXLeft","ErrorCode","300","301","400","401","500","501","502","ErrorService","message","code","errorRelation","index","dataViewModel","inputData","filter","data","executedInputIndex","executingRelation","RelationsInput","status","alert","console","error","_makeRound","num","f","isNaN","myF","pow","round","calculateVector","isVectorInSameLine","firstVector","secondVector","abs","calculateMiddlePoint","calculateSymmetricalPoint","p1","p2","directionVector","normalVector","calculateDistanceTwoPoints","squareX","squareY","calculateDistanceFromPointToLine","numerator","denominator","calculateParallelLineByPointAndLine","lineEquation","parLine","result","calculatePerpendicularLineByPointAndLine","perpendicularLine","perLine","calculateIntersectionByLineAndLine","lineOne","lineTwo","calculateSetOfEquationTypeAndQuadraticEquation","calculateCircleEquationByCenterPoint","calculateInternalBisectLineEquation","pointOne","pointTwo","results","resultOne","resultTwo","coefficient","_calculateBisectLineEquation","firstLine","secondLine","getAngleFromTwoLines","set","firstEquation","secondEquation","_getInternalBisectLineEquation","calculateIntersectionEquationTypeWithCircleEquation","q","A","B","delta","isIn","p","C","D","E","F","G","H","root","r1","r2","calculateIntersectionTwoCircleEquations","q1","q2","d1","d2","tempY","calculateSetOfEquationTypes","Z","_D","_E","_G","roots","calculateLinesByAnotherLineAndAngle","rootPoint","staticPoint","dynamicPoint","equations","cosine","cos","PI","_calculateLinesByAnotherLineAndAngle","map","newRootPoint","i","vectorOne","vectorTwo","staticVector","dynamicVector","acos","calculateIntegratedDirection","calculateVectorLength","parseInt","showError","vector","makeRoundCoordinate","a1","a2","b1","b2","getMiddlePointFromThreePointsInALine","p3","dis_p1_p2","dis_p2_p3","dis_p1_p3","calculateTangentEquation","tangentPoint","tangentEquation","isNumber","isObjectLike","getTag","isQuadraticEquation","toString","call","checkFormatString","str","split","forEach","element","char","toLowerCase","defineObject","slice","includes","validateObject","validateValue","type","_validateName","validateType","validateGeometryType","key","validateAngle","checkObjectRelationship","obj1","obj2","check","toConsumableArray","Set","indexOf","string","item","array","validateInformation","info","outputType","keys","validateShapeFormat","validateShapeType","shapeFormatCheck","shapeTypeCheck","validateShape","j","indexOfRankingLevel","indexOfObjectCurrentLevel","indexOfObjectNextLevel","validateDataRelationship","defineInformation","splitter","shapeName","pop","otherData","replace","trim","join","defineShapeType","definePointType","reverse","sortString","toUpperCase","Error","sort","geometricObj","name","z","updateCoordinate","distance_From_A_To_B","linearEquation","coefficientX","constantTerm","p4","distanceX","p4X","readRelation","equationResults","operation","objectType","valueData","objectsIncludePoint","isStatic","objPoint","isStaticNodeById","getNodeInPointsMapById","coordinate","staticValue","staticObject","angleName","angleValue","modifiedAngleName","shapeList","getData","shapes","shapeData","getShapeAffectList","concat","secondLineVector","renameAngle","changedPoint","calculatedEquation","transitionVector","replaceSetOfEquation","calculateLineEquationByAngleRelation","staticPointOne","staticPointTwo","staticLineEquation","staticDistance","isAlign","coefficientY","ratio","calculatedPoint","betweenPoint","analyzeOperationType","segmentIncludePoint","segmentNotIncludePoint","relationType","getCircleEquation","otherStaticPoint","otherStaticNodeInSegment","points","getAdditionSegment","isValidCoordinate","generatePointMiddleTwoPoints","calculatedLineEquation","isInStaticLine","pushAdditionSegment","analyzeRelationType","calculatedLineEquationOne","calculatedLineEquationTwo","JSON","stringify","analyzeIntersectRelation","otherPointInSegment","tangentPointCoordinate","circleEquation","exceptionPoint","center","calculateTangentIntersectPointsByPointOutsideCircle","filterRoots","isCoordinateDuplicated","filterTangentPoint","analyzeTangentRelation","count","executeRelations","node","dependentNodes","temp","_makeUniqueNodeRelation","relationEquation","calculateInCircleEquation","calculateCircumCircleEquation","circlesData","ErrorMessage","isExecutedRelation","generateFunc","generateGeometry","pointCoordinate","rootCoordinate","getPointDirectionMap","isUp","makeCorrectShape","id","Array","isArray","executePointDetails","getExecutedRelations","rules","executePoint","staticPointCountRequire","staticPoints","arrayRules","RegExp","executePointIndex","nodeSetEquations","rule","staticLine","nonStaticLine","getLinearEquationByParallelRule","lines","nonStaticLines","getLinearEquationByPerpendicularRule","includeLine","nonIncludeLine","staticLines","shapePoints","intersectPoint","staticPointIndex","pointIndex","calculatedCoordinate","otherPointInIncludeLine","nonStaticPointIndex","updateCoordinateBySpecialPerpendicularRule","circleOne","circleTwo","nonStaticNodeId","getLinearEquationsByEqualRule","RelationPointsMap","analyzeResult","validatedResult","objectPointsMap","sortPriority","getPointsMap","shouldStaticPoint","angles","getRelationsResult","relations","shapePointCount","minCountPoint","getFirstStaticPointInShape","createNode","updateMap","createPointsMapByShape","lastObjectPoints","objectName","createDependentNodeOfObject","nodeOne","nodeTwo","index1","findIndexByNodeId","index2","lastNode","nodeIndex","getDependentObject","currentNode","objectSpread","createDependentNodeOfRelation","createPointsMapByRelation","setPointsMap","unique","createPointDetails","table","isPointsMapStatic","executingNode","getNextExecuteNode","getPointDetails","has","get","isNeedRandomCoordinate","nodeDirectionInfo","staticPointCoordinate","coordinateMatch","directionInfo","matchCount","getExecutedNode","updateStaticNode","readPointsMap","segments","getShapeSegments","getArraySegments","el1","el2","exception","_dependentNodes","oldNode","RelationInputModel","initializerDefineProperty","_descriptor","_descriptor2","observable","DataViewModel","_this","DataViewModel_descriptor","DataViewModel_descriptor2","_descriptor3","pointId","nodeId","getIndexOfNodeInPointsMapById","_coordinate","isStaticNode","updatePointsMap","clonePointsMap","sortNodeByPriority","staticNodeOneCount","getDependentStaticNodeCount","nodeOneData","static","nonStatic","dependence","minRelationIndex","getMinIndexOfDependentNodeInRelationsList","getIndexOfNodeInPointsMap","staticNodeTwoCount","nodeTwoData","rankOne","rankTwo","indexArray","getIndexOfRelationInRelationsList","apply","list","_calculateSet","relationsInput","input","newRelationInput","resetInputsStatus","splice","_this2","_updatePointDetails","setOfEquation","exceptedCoordinates","searchEquation","replaceEquation","pointDetail","isReplaceComplete","pointDetails","isFirst","currentRoots","finalRoots","tempLength","_this3","_string","isMatching","preProgress","sentence","getBasicInformation","_defineSentence","others","params","start","end","param","lastParam","getLength","dictionary","centerId","_this4","stringifyCoordinate","_this5","getInformation","setRelationsResult","computed","action","KEYCODE","BACKSPACE","ENTER","InputItem","props","possibleConstructorReturn","getPrototypeOf","inputRef","React","state","shouldRemove","isEmpty","current","focus","currentTarget","onValueChange","setState","_this$props","onBackspace","onSubmit","keyCode","_this$props2","react","className","Icon_Icon","width","height","color","ref","onChange","onKeyUp","aria-describedby","autobind","iconList","inputSuccess","svg","react_default","createElement","fill","viewBox","inputError","inputNormal","icInformation","icRemove","icEdit","icAdd","fillRule","clipRule","Icon","icon","SegmentSetting","visible","isEditMode","isCreateMode","isMouseHoverEdition","isMouseHoverDeletion","_this$state","onDone","onDelete","onVisibleChange","dropdownIndex","filterValue","filterValueIndex","_this$state2","newStartValue","getIndexInData","_this$state3","onSelect","DropdownButton","title","Dropdown","Item","eventKey","_this$state4","renderDropdown","onStartPointSelect","onEndPointSelect","Button","onClick","onChangeContentState","variant","disabled","_this$props$value","dist_default","onstyle","offstyle","handleClassName","off","on","active","onMouseLeave","mouseLeaveEdition","onMouseOver","mouseHoverEdition","onMouseDown","mouseHoverDeletion","mouseLeaveDeletion","renderEditContent","renderShowContent","style","_this$state5","renderContent","Geom","Point","free","esm_get","prototype","distance","distanceSquared","dx","dy","Circle","_fromCenterAndBoundaryPoint","_fromCenterAndRadius","defineProperties","radiussq","boundaryPoint","w","h","Line","_p","_clip","assertThisInitialized","theta","atan2","m","left","top","bottom","P","Segment","lengthsq","bounds","_line$_p","slicedToArray","t","clipped","parent","comparePoints","sq","between","intersect","o1","o2","c1","c2","dsq","dd","cx","cy","nx","ny","uniq","intersectCircleCircle","intersectCircleLine","intersectLineLine","constructor","s1","s2","clip","_s1$_p","_s1$_p$","x1","y1","_s1$_p$2","_s2$_p","_s2$_p$","x3","y3","_s2$_p$2","s","_s$_p","_s$_p$","_s$_p$2","x2","y2","_c$center","x0","y0","Dsq","lensq","disc","Intersection","_len","objects","_key","shift","which","test","_result","verbose","pstr","o","addClass","obj","klass","classes","d3","add","Scene","threshold","_last","_objects","equal","every","log","values","secondObj","id1","id2","tag","_currentTag","existing","prop","find","freeName","update","label","time","Date","klasses","init","renderGeometry","scene","svgElement","circles","selectAll","circleGroup","enter","append","attr","exit","remove","lineGroup","endpoint","coord","DrawingPanel","drawingData","document","getElementById","firstChild","pointElements","baseVal","arrX","arrY","disparityX","disparityY","anchorX","anchorY","_groups","__data__","appendChild","createTextNode","renderPoints","MainView","observer","inputRefs","focusIndex","drawingSegments","scrollView","createRef","trimDrawingData","setTimeout","scrollIntoView","pointData","segmentsData","removeSegments","uniqueSegmentData","segmentData","replaceIndex","addNewInput","removeInput","analyzeInput","model","components_InputItem_InputItem","isAddSegment","onDeleteSegmentSetting","scrollToBottom","prevState","_this6","components_SegmentSetting_SegmentSetting","onDoneSegmentSetting","onChangeSegmentSetting","marginTop","data-toggle","data-target","aria-expanded","aria-controls","OverlayTrigger","container","placement","overlay","Tooltip","aria-labelledby","data-parent","renderRelationInput","onClickDrawing","isInputEmpty","renderSegmentSettings","addNewSegmentSetting","components_DrawingPanel_DrawingPanel","Component","ReactDOM","render","View_MainView","navigator","serviceWorker","ready","then","registration","unregister","module","exports"],"mappings":"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","file":"static/js/main.61c0ac43.chunk.js","sourcesContent":["// This optional code is used to register a service worker.\r\n// register() is not called by default.\r\n\r\n// This lets the app load faster on subsequent visits in production, and gives\r\n// it offline capabilities. However, it also means that developers (and users)\r\n// will only see deployed updates on subsequent visits to a page, after all the\r\n// existing tabs open on the page have been closed, since previously cached\r\n// resources are updated in the background.\r\n\r\n// To learn more about the benefits of this model and instructions on how to\r\n// opt-in, read https://bit.ly/CRA-PWA\r\n\r\nconst isLocalhost = Boolean(\r\n  window.location.hostname === 'localhost' ||\r\n    // [::1] is the IPv6 localhost address.\r\n    window.location.hostname === '[::1]' ||\r\n    // 127.0.0.1/8 is considered localhost for IPv4.\r\n    window.location.hostname.match(\r\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\r\n    )\r\n);\r\n\r\nexport function register(config) {\r\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\r\n    // The URL constructor is available in all browsers that support SW.\r\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\r\n    if (publicUrl.origin !== window.location.origin) {\r\n      // Our service worker won't work if PUBLIC_URL is on a different origin\r\n      // from what our page is served on. This might happen if a CDN is used to\r\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\r\n      return;\r\n    }\r\n\r\n    window.addEventListener('load', () => {\r\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\r\n\r\n      if (isLocalhost) {\r\n        // This is running on localhost. Let's check if a service worker still exists or not.\r\n        checkValidServiceWorker(swUrl, config);\r\n\r\n        // Add some additional logging to localhost, pointing developers to the\r\n        // service worker/PWA documentation.\r\n        navigator.serviceWorker.ready.then(() => {\r\n          console.log(\r\n            'This web app is being served cache-first by a service ' +\r\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\r\n          );\r\n        });\r\n      } else {\r\n        // Is not localhost. Just register service worker\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    });\r\n  }\r\n}\r\n\r\nfunction registerValidSW(swUrl, config) {\r\n  navigator.serviceWorker\r\n    .register(swUrl)\r\n    .then(registration => {\r\n      registration.onupdatefound = () => {\r\n        const installingWorker = registration.installing;\r\n        if (installingWorker == null) {\r\n          return;\r\n        }\r\n        installingWorker.onstatechange = () => {\r\n          if (installingWorker.state === 'installed') {\r\n            if (navigator.serviceWorker.controller) {\r\n              // At this point, the updated precached content has been fetched,\r\n              // but the previous service worker will still serve the older\r\n              // content until all client tabs are closed.\r\n              console.log(\r\n                'New content is available and will be used when all ' +\r\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\r\n              );\r\n\r\n              // Execute callback\r\n              if (config && config.onUpdate) {\r\n                config.onUpdate(registration);\r\n              }\r\n            } else {\r\n              // At this point, everything has been precached.\r\n              // It's the perfect time to display a\r\n              // \"Content is cached for offline use.\" message.\r\n              console.log('Content is cached for offline use.');\r\n\r\n              // Execute callback\r\n              if (config && config.onSuccess) {\r\n                config.onSuccess(registration);\r\n              }\r\n            }\r\n          }\r\n        };\r\n      };\r\n    })\r\n    .catch(error => {\r\n      console.error('Error during service worker registration:', error);\r\n    });\r\n}\r\n\r\nfunction checkValidServiceWorker(swUrl, config) {\r\n  // Check if the service worker can be found. If it can't reload the page.\r\n  fetch(swUrl)\r\n    .then(response => {\r\n      // Ensure service worker exists, and that we really are getting a JS file.\r\n      const contentType = response.headers.get('content-type');\r\n      if (\r\n        response.status === 404 ||\r\n        (contentType != null && contentType.indexOf('javascript') === -1)\r\n      ) {\r\n        // No service worker found. Probably a different app. Reload the page.\r\n        navigator.serviceWorker.ready.then(registration => {\r\n          registration.unregister().then(() => {\r\n            window.location.reload();\r\n          });\r\n        });\r\n      } else {\r\n        // Service worker found. Proceed as normal.\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    })\r\n    .catch(() => {\r\n      console.log(\r\n        'No internet connection found. App is running in offline mode.'\r\n      );\r\n    });\r\n}\r\n\r\nexport function unregister() {\r\n  if ('serviceWorker' in navigator) {\r\n    navigator.serviceWorker.ready.then(registration => {\r\n      registration.unregister();\r\n    });\r\n  }\r\n}\r\n","// @flow\r\n\r\nclass AppData {\r\n  constructor() {\r\n    this.additionSegment = [];\r\n    this.relationsResult = {};\r\n    this.pointsMap = [];\r\n    this.pointsDirectionMap = {};\r\n    this.executedRelations = [];\r\n    this.executedNode = [];\r\n    this.__pointDetails__ = new Map();\r\n  }\r\n\r\n  clear() {\r\n    this.relationsResult = [];\r\n    this.pointsMap = [];\r\n    this.executedRelations = [];\r\n    this.executedNode = [];\r\n    this.__pointDetails__.clear();\r\n  }\r\n\r\n  set setRelationsResult(value) {\r\n    this.relationsResult = value;\r\n  }\r\n\r\n  pushAdditionSegment(segment: string) {\r\n    this.additionSegment.push(segment);\r\n  }\r\n\r\n  get getAdditionSegment() {\r\n    return this.additionSegment;\r\n  }\r\n\r\n  get getRelationsResult() {\r\n    return this.relationsResult;\r\n  }\r\n\r\n  get getPointsMap() {\r\n    return this.pointsMap;\r\n  }\r\n\r\n  setPointsMap(newPointsMap) {\r\n    this.pointsMap = newPointsMap;\r\n  }\r\n\r\n  get getPointDirectionMap() {\r\n    return this.pointsDirectionMap;\r\n  }\r\n\r\n  get getExecutedRelations() {\r\n    return this.executedRelations;\r\n  }\r\n\r\n  get getExecutedNode() {\r\n    return this.executedNode;\r\n  }\r\n\r\n  get getPointDetails() {\r\n    return this.__pointDetails__;\r\n  }\r\n}\r\n\r\nconst appData = new AppData();\r\n\r\nexport default appData;\r\n","const defineSentences = {\r\n  define: [\r\n    '{object} + {object} = {object}',\r\n    '{object} - {object} = {object}',\r\n    '{object} = {value} * {object}',\r\n    '{object} = {object}',\r\n    '{object} > {object}',\r\n    '{object} < {object}'\r\n  ],\r\n  relation: [\r\n    '{object} song song {object}',\r\n    '{object} vuông góc {object}',\r\n    '{object} cắt {object} tại {arrayPoints}',\r\n    '{object} phân giác {angle}',\r\n    '{arrayPoints} thẳng hàng',\r\n    '{point} trung điểm {segment}',\r\n    '{point} không thuộc {object}',\r\n    '{point} thuộc {object}',\r\n    'trung tuyến {segment} của {triangle}',\r\n    'đường cao {segment} của {triangle}',\r\n    '{segment} tiếp tuyến {circle}'\r\n  ],\r\n  shape: [\r\n    'tam giác {type triangle}',\r\n    'tứ giác {quadrilateral}',\r\n    'hình thang {type trapezoid}',\r\n    'hình bình hành {parallelogram}',\r\n    'hình chữ nhật {rectangle}',\r\n    'hình thoi {rhombus}',\r\n    'hình vuông {square}',\r\n    'đường tròn tâm {point type triangle}'\r\n  ]\r\n};\r\n\r\nconst shapeList = ['triangle', 'quadrilateral', 'trapezoid', 'parallelogram', 'rectangle', 'rhombus', 'square'];\r\n\r\nconst reversedDependentObjRelation = ['vuông góc', 'cắt'];\r\n\r\nconst RankingObjectContain = [['point'], ['segment', 'ray'], ['angle']];\r\n\r\nconst objectWithPoint = ['angle', 'segment', 'ray', 'point', 'circle'];\r\n\r\nconst validate = {\r\n  object: {\r\n    define: ['angle', 'segment'],\r\n    relation: ['ray', 'line', 'segment', 'circle']\r\n  },\r\n  point: { length: 1, format: '1' },\r\n  segment: { length: 2, format: '11' },\r\n  ray: { length: 2, format: '10' },\r\n  line: { length: 1, format: '0' },\r\n  angle: { length: 3 },\r\n  shape: {\r\n    triangle: { length: 3, format: '111' },\r\n    quadrilateral: { length: 4, format: '1111' },\r\n    trapezoid: { length: 4, format: '1111' },\r\n    parallelogram: { length: 4, format: '1111' },\r\n    rectangle: { length: 4, format: '1111' },\r\n    rhombus: { length: 4, format: '1111' },\r\n    square: { length: 4, format: '1111' },\r\n    circle: { length: 1, format: '1' }\r\n  },\r\n  shapeType: {\r\n    triangle: ['', 'vuông', 'cân', 'vuông cân', 'đều', 'nội tiếp', 'ngoại tiếp'],\r\n    trapezoid: ['', 'vuông', 'cân']\r\n  }\r\n};\r\n\r\n/*\r\n    | song song,\r\n    ^ vuông góc,\r\n    = cân\r\n */\r\nconst shapeRules = {\r\n  triangle: {\r\n    right: '01^02', // Ex: AB vuong goc AC\r\n    isosceles: '01=02',\r\n    right_isosceles: '01^02&01=02',\r\n    equilateral: '01=02&01=12'\r\n  },\r\n  trapezoid: {\r\n    normal: '01|23',\r\n    right: '01|23&01^03',\r\n    isosceles: '01|23&03=12'\r\n  },\r\n  parallelogram: {\r\n    normal: '01|23&03|12'\r\n  },\r\n  rectangle: {\r\n    normal: '01|23&03|12&01^12&12^23&23^03'\r\n  },\r\n  rhombus: {\r\n    normal: '02^13'\r\n  },\r\n  square: {\r\n    normal: '01|23&03|12&01^12&12^23&23^03&01=03&&01=12&12=23'\r\n  }\r\n};\r\n\r\nconst mappingShapeType = {\r\n  vuông: 'right',\r\n  cân: 'isosceles',\r\n  'vuông cân': 'right_isosceles',\r\n  đều: 'equilateral',\r\n  'nội tiếp': 'nội tiếp',\r\n  'ngoại tiếp': 'ngoại tiếp'\r\n};\r\n\r\nconst circleType = ['nội tiếp', 'ngoại tiếp'];\r\n\r\nconst TwoStaticPointRequireShape = ['triangle', 'trapezoid', 'parallelogram', 'rectangle', 'square'];\r\n\r\nconst ShapeAffectBySegmentChange = ['rhombus', 'trapezoid', 'parallelogram'];\r\n\r\nexport {\r\n  validate,\r\n  TwoStaticPointRequireShape,\r\n  defineSentences,\r\n  RankingObjectContain,\r\n  objectWithPoint,\r\n  shapeList,\r\n  reversedDependentObjRelation,\r\n  shapeRules,\r\n  mappingShapeType,\r\n  circleType,\r\n  ShapeAffectBySegmentChange\r\n};\r\n","const Number = Object.freeze({\r\n  MIN_RANDOM_NUMBER: -10,\r\n  MAX_RANDOM_NUMBER: 10,\r\n  MIN_RANDOM_GENERATION: 5,\r\n  MAX_RANDOM_GENERATION: 15,\r\n  NOT_FOUND: 99\r\n});\r\n\r\nconst String = Object.freeze({\r\n  INFINITY: 'vô cực',\r\n  IMPOSSIBLE: 'vô nghiệm',\r\n  TOO_SHORT: 'quá ngắn',\r\n  NOT_ENOUGH_SET: 'không đủ phương trình tạo thành hệ',\r\n  NOT_BE_IN_LINE: 'điểm không thuộc đường'\r\n});\r\n\r\nconst Regex = Object.freeze({\r\n  KEY: '[^{\\\\}]+(?=})',\r\n  OTHER: '(^([^{]+(?={)))|((?<=})([^{]+)(?={))|(((?<=})[^}]+)$)'\r\n});\r\n\r\nconst Others = Object.freeze({\r\n  OPERATIONS: ['+', '-', '*', '<', '>', '=']\r\n});\r\n\r\nconst Errors = Object.freeze({\r\n  WRONG_FORMAT: 'Sai định dạng',\r\n  MAXIMUM_POINT_ERROR: 'Tối đa 3 điểm thẳng háng'\r\n});\r\n\r\nconst InputStatus = Object.freeze({\r\n  SUCCESS: 'Success',\r\n  NORMAL: `Normal`,\r\n  ERROR: 'Error'\r\n});\r\n\r\nconst GConst = {\r\n  Number,\r\n  String,\r\n  Regex,\r\n  Others,\r\n  Errors,\r\n  InputStatus\r\n};\r\n\r\nexport default GConst;\r\n","import type { EquationType, LineType } from '../../utils/types';\r\n\r\nexport function convertLinearToEquation(l: EquationType): EquationType {\r\n  return {\r\n    a: 0,\r\n    b: 0,\r\n    c: l.c,\r\n    d: l.d,\r\n    e: l.e\r\n  };\r\n}\r\n\r\nexport function convertEquationToLineType(line: EquationType): LineType {\r\n  return {\r\n    a: -line.c / (line.d === 0 ? 1 : line.d),\r\n    b: -line.e / (line.d === 0 ? 1 : line.d)\r\n  };\r\n}\r\n\r\nexport function convertLineTypeToEquation(line: LineType): EquationType {\r\n  return {\r\n    a: 0,\r\n    b: 0,\r\n    c: -line.a,\r\n    d: 1,\r\n    e: -line.b\r\n  };\r\n}\r\n\r\n","// @flow\r\n\r\nimport GConst from '../../utils/values';\r\nimport type { CoordinateType, EquationType } from '../../utils/types';\r\nimport { calculateQuadraticEquation, getLineFromTwoPoints, calculatePerpendicularLineByPointAndLine } from './Math2D';\r\n\r\nconst MIN = GConst.Number.MIN_RANDOM_NUMBER;\r\nconst MAX = GConst.Number.MAX_RANDOM_NUMBER;\r\n\r\nexport function getStartPoint(): CoordinateType {\r\n  return { x: 0, y: 0, z: 0 };\r\n}\r\n\r\nexport function getRandomValue(min: number, max: number): number {\r\n  if (max < min) {\r\n    return min;\r\n  }\r\n  return Math.floor(Math.random() * (max - min + 1)) + min;\r\n}\r\n\r\nexport function getRandomPointInEquation(equation: EquationType): CoordinateType {\r\n  if (!equation.a) {\r\n    equation.a = 0;\r\n  }\r\n  if (!equation.b) {\r\n    equation.b = 0;\r\n  }\r\n  if (equation.a === 0 && equation.b === 0) {\r\n    if (equation.d !== 0) {\r\n      const tempX = getRandomValue(MIN, MAX);\r\n      return {\r\n        x: tempX,\r\n        y: (-equation.e - equation.c * tempX) / equation.d\r\n      };\r\n    } else {\r\n      return {\r\n        x: -equation.e / equation.c,\r\n        y: getRandomValue(MIN, MAX)\r\n      };\r\n    }\r\n  } else if (equation.a === 1 && equation.b === 1) {\r\n    const centerPoint = {\r\n      a: equation.c / -2,\r\n      b: equation.d / -2\r\n    };\r\n\r\n    const radius = Math.sqrt(centerPoint.a * centerPoint.a + centerPoint.b * centerPoint.b - equation.e);\r\n\r\n    const randomValueX = getRandomValue(-radius, radius);\r\n\r\n    const solvedValueY = calculateQuadraticEquation(\r\n      equation.b,\r\n      equation.d,\r\n      randomValueX * randomValueX * equation.d * randomValueX + equation.e\r\n    );\r\n\r\n    if (typeof solvedValueY === 'number') {\r\n      return { x: randomValueX, y: solvedValueY };\r\n    } else if (typeof solvedValueY === 'object') {\r\n      return { x: randomValueX, y: solvedValueY.secondRoot || solvedValueY.firstRoot };\r\n    }\r\n  }\r\n}\r\n\r\nexport function generatePointAlignmentInside(firstPoint: CoordinateType, secondPoint: CoordinateType): CoordinateType {\r\n  const line = getLineFromTwoPoints(firstPoint, secondPoint);\r\n  const tempX = (firstPoint.x + secondPoint.x) / getRandomValue(2, 5);\r\n  return {\r\n    x: tempX,\r\n    y: (line.c * tempX + line.e) / -line.d\r\n  };\r\n}\r\n\r\nexport function generatePointAlignmentOutside(\r\n  firstPoint: CoordinateType,\r\n  secondPoint: CoordinateType,\r\n  isRight: boolean = true\r\n): CoordinateType {\r\n  const line = getLineFromTwoPoints(firstPoint, secondPoint);\r\n  const tempXRight = getRandomValue(secondPoint.x, MAX);\r\n  const tempXLeft = getRandomValue(MIN, firstPoint.x);\r\n  return isRight\r\n    ? {\r\n        x: tempXRight,\r\n        y: (line.c * tempXRight + line.e) / -line.d\r\n      }\r\n    : {\r\n        x: tempXLeft,\r\n        y: (line.c * tempXLeft + line.e) / -line.d\r\n      };\r\n}\r\n\r\nexport function generatePointNotAlignment(firstPoint: CoordinateType, secondPoint: CoordinateType): CoordinateType {\r\n  let resultPoint: CoordinateType = {};\r\n  resultPoint.x = getRandomValue(MIN, MAX);\r\n  const line = getLineFromTwoPoints(firstPoint, secondPoint);\r\n  do {\r\n    resultPoint.y = getRandomValue(MIN, MAX);\r\n  } while (resultPoint.y === line.c * resultPoint.x + line.e);\r\n  return resultPoint;\r\n}\r\n\r\nexport function generatePointMiddleTwoPoints(p1: CoordinateType, p2: CoordinateType) {\r\n  const line = getLineFromTwoPoints(p1, p2);\r\n  const randomPoint = generatePointAlignmentInside(p1, p2);\r\n\r\n  const randomLine = calculatePerpendicularLineByPointAndLine(randomPoint, line);\r\n  return getRandomPointInEquation(randomLine);\r\n}\r\n","// @flow\r\n\r\nimport GConst from './values';\r\nimport dataViewModel from '../ViewModel/DataViewModel';\r\n\r\nconst ErrorCode = {\r\n  300: GConst.Errors.WRONG_FORMAT,\r\n  301: GConst.Errors.MAXIMUM_POINT_ERROR,\r\n  400: GConst.String.IMPOSSIBLE,\r\n  401: GConst.String.INFINITY,\r\n  500: GConst.String.NOT_BE_IN_LINE,\r\n  501: GConst.String.NOT_ENOUGH_SET,\r\n  502: GConst.String.TOO_SHORT\r\n};\r\n\r\nclass ErrorHandleService {\r\n  message: string = '';\r\n\r\n  get ErrorMessage() {\r\n    return this.message;\r\n  }\r\n\r\n  showError(code: string, errorRelation?: mixed) {\r\n    let index;\r\n    if (errorRelation) {\r\n      index = dataViewModel.inputData.filter((data: mixed): boolean => data === errorRelation)[0];\r\n    } else {\r\n      switch (code) {\r\n        case 300:\r\n        case 301:\r\n          index = dataViewModel.executedInputIndex;\r\n          break;\r\n        default:\r\n          index = dataViewModel.inputData.filter((data: mixed): boolean => data === dataViewModel.executingRelation)[0];\r\n      }\r\n    }\r\n    if (index >= 0) {\r\n      dataViewModel.RelationsInput[index].status = GConst.InputStatus.ERROR;\r\n    }\r\n\r\n    alert(ErrorCode[code]);\r\n    throw console.error('error', ErrorCode[code]);\r\n  }\r\n}\r\n\r\nconst ErrorService = new ErrorHandleService();\r\n\r\nexport default ErrorService;\r\n","import GConst from '../../utils/values';\r\nimport type { CircleType, CoordinateType, EquationType, LineType } from '../../utils/types';\r\nimport { convertEquationToLineType, convertLinearToEquation, convertLineTypeToEquation } from './Converter';\r\nimport { getRandomPointInEquation, getRandomValue } from './Generation';\r\nimport ErrorService from '../../utils/ErrorHandleService';\r\n\r\nconst MIN = GConst.Number.MIN_RANDOM_NUMBER;\r\nconst MAX = GConst.Number.MAX_RANDOM_NUMBER;\r\nconst INFINITY = GConst.String.INFINITY;\r\nconst IMPOSSIBLE = GConst.String.IMPOSSIBLE;\r\nconst NOT_BE_IN_LINE = GConst.String.NOT_BE_IN_LINE;\r\n\r\nfunction _makeRound(num: number, f: number = 3): number {\r\n  if (isNaN(num)) {\r\n    throw console.error('error', num);\r\n  }\r\n  const myF = Math.pow(10, f);\r\n  return Math.round(num * myF) / myF;\r\n}\r\n\r\nexport function calculateVector(\r\n  firstPoint: CoordinateType,\r\n  secondPoint: CoordinateType,\r\n  isMakeRound? = true\r\n): CoordinateType {\r\n  if (isMakeRound) {\r\n    return {\r\n      x: _makeRound(secondPoint.x - firstPoint.x),\r\n      y: _makeRound(secondPoint.y - firstPoint.y)\r\n    };\r\n  }\r\n  return {\r\n    x: secondPoint.x - firstPoint.x,\r\n    y: secondPoint.y - firstPoint.y\r\n  };\r\n}\r\n\r\nexport function isVectorSameDirection(firstVector: CoordinateType, secondVector: CoordinateType): boolean {\r\n  return _makeRound(firstVector.x * secondVector.y) === _makeRound(firstVector.y * secondVector.x);\r\n}\r\n\r\nexport function isVectorInSameLine(firstVector: CoordinateType, secondVector: CoordinateType): boolean {\r\n  return Math.abs(_makeRound(firstVector.x * secondVector.y)) === Math.abs(_makeRound(firstVector.y * secondVector.x));\r\n}\r\n\r\nexport function calculateMiddlePoint(firstPoint: CoordinateType, secondPoint: CoordinateType): CoordinateType {\r\n  return {\r\n    x: (firstPoint.x + secondPoint.x) / 2,\r\n    y: (firstPoint.y + secondPoint.y) / 2\r\n  };\r\n}\r\n\r\nexport function calculateSymmetricalPoint(\r\n  firstPoint: CoordinateType,\r\n  secondPoint: CoordinateType,\r\n  isRight: boolean = true\r\n): CoordinateType {\r\n  return isRight\r\n    ? {\r\n        x: 2 * secondPoint.x - firstPoint.x,\r\n        y: 2 * secondPoint.y - firstPoint.y\r\n      }\r\n    : {\r\n        x: 2 * firstPoint.x - secondPoint.x,\r\n        y: 2 * firstPoint.y - secondPoint.y\r\n      };\r\n}\r\n\r\nexport function getLineFromTwoPoints(p1: CoordinateType, p2: CoordinateType): EquationType {\r\n  const directionVector = {\r\n    a: p2.x - p1.x,\r\n    b: p2.y - p1.y\r\n  };\r\n  const normalVector = {\r\n    a: -directionVector.b,\r\n    b: directionVector.a\r\n  };\r\n\r\n  return {\r\n    a: 0,\r\n    b: 0,\r\n    c: normalVector.a,\r\n    d: normalVector.b,\r\n    e: -normalVector.a * p1.x - normalVector.b * p1.y\r\n  };\r\n}\r\n\r\nexport function calculateParallelEquation(equation: EquationType): EquationType {\r\n  // Random a constance term from MIN_RANDOM_NUMBER -> MAX_RANDOM_NUMBER\r\n  const e = Math.floor(Math.random() * 100) - MAX;\r\n\r\n  let parallelEquation: EquationType = { coefficientZ: 0 };\r\n  parallelEquation.c = equation.c;\r\n  parallelEquation.d = equation.d;\r\n  parallelEquation.e = e;\r\n\r\n  return parallelEquation;\r\n}\r\n\r\nexport function calculatePerpendicularEquation(equation: EquationType): EquationType {\r\n  // Random a constance term from MIN_RANDOM_NUMBER -> MAX_RANDOM_NUMBER\r\n  const e = Math.floor(Math.random() * 100) - MIN;\r\n\r\n  let perpendicularEquation: EquationType = { coefficientZ: 0 };\r\n  perpendicularEquation.c = -equation.c;\r\n  perpendicularEquation.d = equation.d;\r\n  perpendicularEquation.e = e;\r\n\r\n  return perpendicularEquation;\r\n}\r\n\r\nexport function calculateDistanceTwoPoints(firstPoint: CoordinateType, secondPoint: CoordinateType): number {\r\n  const squareX = (secondPoint.x - firstPoint.x) * (secondPoint.x - firstPoint.x);\r\n  const squareY = (secondPoint.y - firstPoint.y) * (secondPoint.y - firstPoint.y);\r\n\r\n  return Math.sqrt(squareX + squareY);\r\n}\r\n\r\nexport function calculateDistanceFromPointToLine(point: CoordinateType, line: EquationType): number {\r\n  let numerator = Math.abs(line.c * point.x + line.d * point.y + line.e);\r\n  let denominator = Math.sqrt(line.c * line.c + line.d * line.d);\r\n\r\n  if (denominator === 0) return INFINITY;\r\n  return numerator / denominator;\r\n}\r\n\r\nexport function calculateParallelLineByPointAndLine(point: CoordinateType, line: EquationType): EquationType {\r\n  // parallel line has `a` coefficient equals the other line.\r\n  // parallel line's e = -ax - y with (x,y) is coordinate of the point\r\n  const lineEquation = convertEquationToLineType(line);\r\n  const parLine: LineType = {};\r\n  parLine.a = lineEquation.a;\r\n  parLine.b = point.y - lineEquation.a * point.x;\r\n\r\n  let result = convertLineTypeToEquation(parLine);\r\n  if (line.d === 0) {\r\n    result.d = line.d;\r\n  }\r\n  return result;\r\n}\r\n\r\nexport function calculatePerpendicularLineByPointAndLine(point: CoordinateType, line: EquationType): EquationType {\r\n  let perpendicularLine: EquationType = {};\r\n\r\n  // perpendicular line has the direction vector is opposite pairs with the other line.\r\n  // perpendicular line's e = -ax - y with (x,y) is coordinate of the point\r\n  if (line.c === 0) {\r\n    perpendicularLine.c = -1 / line.d;\r\n    perpendicularLine.d = 0;\r\n    perpendicularLine.e = -perpendicularLine.c * point.x;\r\n  } else if (line.d === 0) {\r\n    perpendicularLine.c = 0;\r\n    perpendicularLine.d = -1 / line.c;\r\n    perpendicularLine.e = -perpendicularLine.d * point.y;\r\n  } else {\r\n    const lineEquation = convertEquationToLineType(line);\r\n    const perLine: LineType = {};\r\n    perLine.a = -1 / lineEquation.a;\r\n    perLine.b = point.y + point.x / lineEquation.a;\r\n\r\n    perpendicularLine = convertLineTypeToEquation(perLine);\r\n  }\r\n\r\n  return perpendicularLine;\r\n}\r\n\r\nexport function calculateIntersectionByLineAndLine(lineOne: EquationType, lineTwo: EquationType): CoordinateType {\r\n  return calculateSetOfEquationTypeAndQuadraticEquation(\r\n    {\r\n      c: lineOne.c,\r\n      d: lineOne.d,\r\n      e: lineOne.e\r\n    },\r\n    {\r\n      a: 0,\r\n      b: 0,\r\n      c: lineTwo.c,\r\n      d: lineTwo.d,\r\n      e: lineTwo.e\r\n    }\r\n  )[0];\r\n}\r\n\r\nexport function calculateCircleEquationByCenterPoint(\r\n  centerPoint: CoordinateType,\r\n  radius: number\r\n): TwoVariableQuadraticEquation {\r\n  return {\r\n    a: 1,\r\n    b: 1,\r\n    c: -2 * centerPoint.x,\r\n    d: -2 * centerPoint.y,\r\n    e: centerPoint.x * centerPoint.x + centerPoint.y * centerPoint.y - radius * radius\r\n  };\r\n}\r\n\r\nexport function calculateInternalBisectLineEquation(\r\n  lineOne: EquationType,\r\n  lineTwo: EquationType,\r\n  pointOne: CoordinateType,\r\n  pointTwo: CoordinateType\r\n): EquationType {\r\n  const results = _calculateBisectLineEquation(lineOne, lineTwo);\r\n  const firstLine: EquationType = results[0];\r\n  const secondLine: EquationType = results[1];\r\n\r\n  // const pointInFirstLine: CoordinateType = getRandomPointInLine(lineOne);\r\n  // let pointInSecondLine: CoordinateType = { x: pointInFirstLine.x, y: undefined };\r\n  // if (lineTwo.d !== 0) {\r\n  //   pointInSecondLine.y = (-lineTwo.e - lineTwo.c * pointInSecondLine.x) / lineTwo.d;\r\n  // } else {\r\n  //   pointInSecondLine.y = getRandomValue(MIN_RANDOM_NUMBER, MAX_RANDOM_NUMBER);\r\n  // }\r\n\r\n  if (getAngleFromTwoLines(lineOne, lineTwo) === 0) {\r\n    throw new Map().set('error', 'không hỗ trợ trường hợp này');\r\n  }\r\n\r\n  return _getInternalBisectLineEquation(firstLine, secondLine, pointOne, pointTwo);\r\n}\r\n\r\nfunction _calculateBisectLineEquation(lineOne: EquationType, lineTwo: EquationType): [EquationType, EquationType] {\r\n  let resultOne: EquationType = {};\r\n  let resultTwo: EquationType = {};\r\n\r\n  // ax + by + c = +/- [sqrt(a*a + b*b) / sqrt(a'*a' + b'*b')] * (a'x + b'y + c)\r\n\r\n  // check if denominator equals 0\r\n  if (lineTwo.c * lineTwo.c + lineTwo.d * lineTwo.d === 0) return;\r\n\r\n  // Represent for [sqrt(a*a + b*b) / sqrt(a'*a' + b'*b')]\r\n  let coefficient =\r\n    Math.sqrt(lineOne.c * lineOne.c + lineOne.d * lineOne.d) / Math.sqrt(lineTwo.c * lineTwo.c + lineTwo.d * lineTwo.d);\r\n\r\n  /*\r\n   * Two results:\r\n   *    (a - coefficient*a')x + (b - coefficient*b')y + c - coefficient*c' = 0\r\n   *    (a + coefficient*a')x + (b + coefficient*b')y + c + coefficient*c' = 0\r\n   */\r\n  resultOne.c = lineOne.c - coefficient * lineTwo.c;\r\n  resultOne.d = lineOne.d - coefficient * lineTwo.d;\r\n  resultOne.e = lineOne.e - coefficient * lineTwo.e;\r\n\r\n  resultTwo.c = lineOne.c + coefficient * lineTwo.c;\r\n  resultTwo.d = lineOne.d + coefficient * lineTwo.d;\r\n  resultTwo.e = lineOne.e + coefficient * lineTwo.e;\r\n\r\n  return [resultOne, resultTwo];\r\n}\r\n\r\n/*\r\n *   Line one and line two is 2 lines are the result of _calculateBisectLineEquation function\r\n *   Point one and point two are 2 points that each point located in each line\r\n *             which is equivalent each argument in _calculateBisectLineEquation function\r\n */\r\nfunction _getInternalBisectLineEquation(\r\n  lineOne: EquationType,\r\n  lineTwo: EquationType,\r\n  pointOne: CoordinateType,\r\n  pointTwo: CoordinateType\r\n): EquationType {\r\n  let firstEquation = pointOne.x * lineOne.c + pointOne.y * lineOne.d + lineOne.e;\r\n  let secondEquation = pointTwo.x * lineOne.c + pointTwo.y * lineOne.d + lineOne.e;\r\n  return firstEquation * secondEquation <= 0 ? lineOne : lineTwo;\r\n}\r\n\r\n// TODO: Uncheck\r\nexport function calculateSetOfEquationTypes(d1: EquationType, d2: EquationType) {\r\n  if (\r\n    (d1.c === 0 && d2.c === 0) ||\r\n    (d1.d === 0 && d2.d === 0) ||\r\n    (d1.c === 0 && d1.d === 0) ||\r\n    (d2.c === 0 && d2.d === 0)\r\n  ) {\r\n    return IMPOSSIBLE;\r\n  }\r\n  if (d1.c === 0 && d2.d === 0) {\r\n    return { x: -d2.e / d2.c, y: -d1.e / d1.d };\r\n  }\r\n  if (d2.c === 0 && d1.d === 0) {\r\n    return { x: -d1.e / d1.c, y: -d2.e / d2.d };\r\n  }\r\n  if (d1.e === 0 && d2.e === 0) {\r\n    return { x: 0, y: 0 };\r\n  }\r\n\r\n  if (d1.c === 0) {\r\n    const tempY = -d1.e / d1.d;\r\n    return { x: (-d2.e - tempY * d2.d) / d2.c, y: tempY };\r\n  }\r\n\r\n  if (d1.d === 0) {\r\n    const tempX = -d1.e / d1.c;\r\n    return { x: tempX, y: (-d2.e - tempX * d2.c) / d2.d };\r\n  }\r\n\r\n  if (d2.c === 0) {\r\n    const tempY = -d2.e / d2.d;\r\n    return { x: (-d1.e - tempY * d1.d) / d1.c, y: tempY };\r\n  }\r\n\r\n  if (d2.d === 0) {\r\n    const tempX = -d2.e / d2.c;\r\n    return { x: tempX, y: (-d1.e - tempX * d1.c) / d1.d };\r\n  }\r\n  const tempY = (d1.e * d2.c - d1.c * d2.e) / (d1.d * d2.c - d1.c * d2.d);\r\n  return { x: (-d1.e - d1.d * tempY) / d1.c, y: tempY };\r\n}\r\n\r\n/*\r\n *  Find point(s) of intersection between a linear equation and a circle equation.\r\n *  @params:\r\n *        + d (EquationType): a line.\r\n *        + c (CircleEquation): a circle.\r\n *  @return:\r\n *        + IMPOSSIBLE: if distance from center point of the circle to the line is greater than the radius.\r\n *        + (Array<Object>): if the line intersects the circle.\r\n *          + length = 1;\r\n *          + length = 2;\r\n */\r\nexport function calculateIntersectionEquationTypeWithCircleEquation(d: EquationType, q: EquationType): Array<Object> {\r\n  const A = -q.c / 2;\r\n  const B = -q.d / 2;\r\n  const centerPoint: CoordinateType = { x: A, y: B };\r\n  const distanceFromCenterPointToLine = calculateDistanceFromPointToLine(centerPoint, d);\r\n\r\n  if (distanceFromCenterPointToLine > Math.sqrt(A * A + B * B - q.e)) {\r\n    return IMPOSSIBLE;\r\n  } else {\r\n    return calculateSetOfEquationTypeAndQuadraticEquation(d, q);\r\n  }\r\n}\r\n\r\n/*\r\n * Solves a quadratic equation. This equation is defined: Ax2 + Bx + C = 0.\r\n *\r\n *  @params:\r\n *        + a (number): represents x's coefficient.\r\n *        + b (number): represents y's coefficient.\r\n *        + c (number): represents constant term.\r\n * @return:\r\n *        + IMPOSSIBLE (string): if the equation is no root.\r\n *        + (number): if the equation has only ONE root.\r\n *        + x1, x2 (Object): if the equation has TWO root.\r\n */\r\nexport function calculateQuadraticEquation(a: number, b: number, c: number) {\r\n  const delta = b * b - 4 * a * c;\r\n\r\n  let firstRoot,\r\n    secondRoot: number = undefined;\r\n\r\n  if (a === 0) {\r\n    if (b === 0) return INFINITY;\r\n    return -c / b;\r\n  } else if (delta < 0) {\r\n    return IMPOSSIBLE;\r\n  } else if (delta === 0) {\r\n    return -b / (2 * a);\r\n  } else {\r\n    firstRoot = (-b + Math.sqrt(delta)) / (2 * a);\r\n    secondRoot = (-b - Math.sqrt(delta)) / (2 * a);\r\n    return { firstRoot, secondRoot };\r\n  }\r\n}\r\n\r\n// Ax2 + By2 + Cx + Dy + E = 0\r\nexport function isIn(p: CoordinateType, e: EquationType): boolean {\r\n  if (p.x === undefined || p.y === undefined) return false;\r\n  if (e.a === undefined) {\r\n    e = convertLinearToEquation(e);\r\n  }\r\n  const temp = e.a * p.x * p.x + e.b * p.y * p.y + e.c * p.x + e.d * p.y + e.e;\r\n  return _makeRound(temp) === 0;\r\n}\r\n\r\n/*\r\n *  Solves a set of a linear equation and quadratic equation.\r\n *  Linear equation is defined:     Ax + By + C = 0.\r\n *  Quadratic equation is defined:  Ax2 + By2 + Cx + Dy + E = 0.\r\n *\r\n *  @params:\r\n *        + l (EquationType): represents a linear equation.\r\n *        + q (QuadraticEquation): represents a quadratic equation.\r\n *  @return:\r\n *        + IMPOSSIBLE (string): if the set is no root.\r\n *        + (number): if the set has only ONE root.\r\n *        + x1, x2 (Object): if the set has TWO root.\r\n */\r\nexport function calculateSetOfEquationTypeAndQuadraticEquation(l: EquationType, q: EquationType): Array<Object> {\r\n  let results: Array<Object> = [];\r\n  let u, v, w;\r\n\r\n  const A = l.c;\r\n  const B = l.d;\r\n  const C = l.e;\r\n  const D = q.a;\r\n  const E = q.b;\r\n  const F = q.c;\r\n  const G = q.d;\r\n  const H = q.e;\r\n  if (A !== 0) {\r\n    u = A * A * E + D * B * B;\r\n    v = 2 * B * C * D - A * B * F + A * A * G;\r\n    w = D * C * C - A * C * F + A * A * H;\r\n\r\n    // solves x. Unneeded check IMPOSSIBLE.\r\n    const root = calculateQuadraticEquation(u, v, w);\r\n    if (typeof root === 'number') {\r\n      results.push({ x: (-C - B * root) / A, y: root });\r\n    } else if (root === IMPOSSIBLE) {\r\n      return root;\r\n    } else {\r\n      const r1 = root.firstRoot;\r\n      const r2 = root.secondRoot;\r\n      results.push({ x: (-C - B * root.firstRoot) / A, y: r1 }, { x: (-C - B * root.secondRoot) / A, y: r2 });\r\n    }\r\n  } else {\r\n    u = q.a * l.d * l.d;\r\n    v = q.c * l.d * l.d;\r\n    w = q.b * l.e * l.e - q.d * l.d * l.e + q.e * l.d * l.d;\r\n\r\n    // solves x. Unneeded check IMPOSSIBLE.\r\n    const root = calculateQuadraticEquation(u, v, w);\r\n\r\n    if (typeof root === 'number') {\r\n      results.push({ x: root, y: -l.e / l.d });\r\n    } else if (root === IMPOSSIBLE) {\r\n      return root;\r\n    } else {\r\n      results.push({ x: root.firstRoot, y: -l.e / l.d }, { x: root.secondRoot, y: -l.e / l.d });\r\n    }\r\n  }\r\n\r\n  return results;\r\n}\r\n\r\nexport function calculateIntersectionTwoCircleEquations(firstEquation: EquationType, secondEquation: EquationType) {\r\n  let results: Array<Object> = [];\r\n  if (!firstEquation || !secondEquation) {\r\n    return IMPOSSIBLE;\r\n  }\r\n  let q1, q2;\r\n  firstEquation.a === undefined ? (q1 = convertLinearToEquation(firstEquation)) : (q1 = firstEquation);\r\n  secondEquation.a === undefined ? (q2 = convertLinearToEquation(secondEquation)) : (q2 = secondEquation);\r\n\r\n  if (q1.a !== q2.a && q1.b !== q2.b) {\r\n    if (q1.a === 0 && q1.b === 0) {\r\n      // q2 is a quadratic equation\r\n      return calculateIntersectionEquationTypeWithCircleEquation(q1, q2);\r\n    } else {\r\n      // q1 is a quadratic equation\r\n      return calculateIntersectionEquationTypeWithCircleEquation(q2, q1);\r\n    }\r\n  } else if (q1.a === 0 && q1.b === 0 && q2.a === 0 && q2.b === 0) {\r\n    results.push(calculateSetOfEquationTypes(q1, q2));\r\n  } else {\r\n    // a x2 + b y2 + Ax + By + C = 0\r\n    // a'x2 + b'y2 + Dx + Ey + G = 0\r\n    const D = q2.c;\r\n    const E = q2.d;\r\n    const G = q2.e;\r\n\r\n    // Z = a - a'\r\n    const Z = q1.a - q2.a > 0 ? q1.a : q2.a;\r\n    const _D = Z === q1.a ? q1.c : D;\r\n    const _E = Z === q1.a ? q1.d : E;\r\n    const _G = Z === q1.a ? q1.e : G;\r\n\r\n    const a = Z === q1.a ? q1.c - D : D - q1.c;\r\n    const b = Z === q1.a ? q1.d - E : E - q1.d;\r\n    const c = Z === q1.a ? q1.e - G : G - q1.e;\r\n\r\n    if (a === 0 || b === 0) {\r\n      return IMPOSSIBLE;\r\n    } else {\r\n      const u = Z * (b * b + a * a);\r\n      const v = 2 * b * c * Z - _D * a * b + _E * a * a;\r\n      const w = Z * c * c - _D * a * c + _G * a * a;\r\n\r\n      const roots = calculateQuadraticEquation(u, v, w);\r\n      if (roots === IMPOSSIBLE) {\r\n        return roots;\r\n      } else if (typeof roots === 'number') {\r\n        results.push({\r\n          x: (-c - b * roots) / a,\r\n          y: roots\r\n        });\r\n      } else {\r\n        const r1 = roots.firstRoot;\r\n        const r2 = roots.secondRoot;\r\n        results.push({ x: (-c - b * roots.firstRoot) / a, y: r1 }, { x: (-c - b * roots.secondRoot) / a, y: r2 });\r\n      }\r\n    }\r\n  }\r\n\r\n  return results;\r\n}\r\n\r\nexport function calculateLinesByAnotherLineAndAngle(\r\n  rootPoint: CoordinateType,\r\n  staticPoint: CoordinateType,\r\n  dynamicPoint: CoordinateType,\r\n  angle: number\r\n): EquationType {\r\n  const equations = _calculateLinesByAnotherLineAndAngle(\r\n    getLineFromTwoPoints(rootPoint, staticPoint),\r\n    dynamicPoint,\r\n    angle\r\n  );\r\n  let index = 0;\r\n  const newRootPoints = equations\r\n    .map((equation: EquationType): CoordinateType => {\r\n      return calculateIntersectionByLineAndLine(getLineFromTwoPoints(rootPoint, staticPoint), equation);\r\n    })\r\n    .filter((newRootPoint: CoordinateType, i): boolean => {\r\n      const staticVector = calculateVector(rootPoint, staticPoint, false);\r\n      const dynamicVector = calculateVector(newRootPoint, dynamicPoint, false);\r\n      const result = calculateAngleTwoVector(staticVector, dynamicVector) === parseInt(angle);\r\n      if (result) {\r\n        index = i;\r\n      }\r\n      return result;\r\n    });\r\n  if (newRootPoints[0]) {\r\n    return equations[index];\r\n  }\r\n\r\n  ErrorService.showError('500');\r\n  return null;\r\n}\r\n\r\nfunction calculateIntegratedDirection(vectorOne: CoordinateType, vectorTwo: CoordinateType): number {\r\n  return vectorOne.x * vectorTwo.x + vectorOne.y * vectorTwo.y;\r\n}\r\n\r\nfunction calculateVectorLength(vector: CoordinateType): number {\r\n  return Math.sqrt(vector.x * vector.x + vector.y * vector.y);\r\n}\r\n\r\nfunction calculateAngleTwoVector(vectorOne: CoordinateType, vectorTwo: CoordinateType): number {\r\n  return _makeRound(\r\n    (Math.acos(\r\n      calculateIntegratedDirection(vectorOne, vectorTwo) /\r\n        (calculateVectorLength(vectorOne) * calculateVectorLength(vectorTwo))\r\n    ) *\r\n      180) /\r\n      Math.PI,\r\n    1\r\n  );\r\n}\r\n\r\nexport function _calculateLinesByAnotherLineAndAngle(d: EquationType, p: CoordinateType, angle: number) {\r\n  let results: Array<EquationType> = [];\r\n\r\n  const cosine = Math.cos((angle * Math.PI) / 180);\r\n  const A = d.c * d.c - cosine * cosine * d.c * d.c - cosine * cosine * d.d * d.d;\r\n  const B = 2 * d.c * d.d;\r\n  const C = d.d * d.d - cosine * cosine * d.c * d.c - cosine * cosine * d.d * d.d;\r\n  const root = calculateQuadraticEquation(A, B, C);\r\n\r\n  if (typeof root === 'number') {\r\n    results.push({\r\n      c: root,\r\n      d: 1,\r\n      e: -root * p.x - p.y\r\n    });\r\n  } else if (root === IMPOSSIBLE) {\r\n    return root;\r\n  } else {\r\n    results.push(\r\n      {\r\n        c: root.firstRoot,\r\n        d: 1,\r\n        e: -root.firstRoot * p.x - p.y\r\n      },\r\n      {\r\n        c: root.secondRoot,\r\n        d: 1,\r\n        e: -root.secondRoot * p.x - p.y\r\n      }\r\n    );\r\n  }\r\n\r\n  return results;\r\n}\r\n\r\nexport function makeRoundCoordinate(point: CoordinateType, f: number = 3) {\r\n  if (typeof point === 'string') {\r\n    return point;\r\n  }\r\n  return {\r\n    x: _makeRound(point.x,f),\r\n    y: _makeRound(point.y,f)\r\n  };\r\n}\r\n\r\nexport function getAngleFromTwoLines(d1: EquationType, d2: EquationType): number {\r\n  if (d1.a || d1.b || d2.a || d2.b) {\r\n    return -9999;\r\n  }\r\n\r\n  const a1 = d1.c;\r\n  const a2 = d2.c;\r\n  const b1 = d1.d;\r\n  const b2 = d2.d;\r\n\r\n  const result =\r\n    (Math.acos(Math.abs(a1 * a2 + b1 * b2) / Math.sqrt((a1 * a1 + b1 * b1) * (a2 * a2 + b2 * b2))) * 180) / Math.PI;\r\n\r\n  // round result\r\n  return _makeRound(result, 1);\r\n}\r\n\r\nexport function getMiddlePointFromThreePointsInALine(\r\n  p1: CoordinateType,\r\n  p2: CoordinateType,\r\n  p3: CoordinateType\r\n): CoordinateType {\r\n  const line = getLineFromTwoPoints(p1, p2);\r\n  if (!isIn(p3, { a: 0, b: 0, c: line.c, d: line.d, e: line.e })) return NOT_BE_IN_LINE;\r\n\r\n  // another way: check vector =)))~\r\n  const dis_p1_p2 = calculateDistanceTwoPoints(p1, p2);\r\n  const dis_p2_p3 = calculateDistanceTwoPoints(p2, p3);\r\n  const dis_p1_p3 = calculateDistanceTwoPoints(p1, p3);\r\n\r\n  const max = Math.max(dis_p1_p2, dis_p2_p3, dis_p1_p3);\r\n  if (dis_p1_p2 === max) return p3;\r\n  else if (dis_p1_p3 === max) return p2;\r\n  else return p1;\r\n}\r\n\r\nexport function calculateCircumCircleEquation(p1: CoordinateType, p2: CoordinateType, p3: CoordinateType): CircleType {\r\n  const midperpendicularsLineOne = calculatePerpendicularLineByPointAndLine(\r\n    calculateMiddlePoint(p1, p2),\r\n    getLineFromTwoPoints(p1, p2)\r\n  );\r\n\r\n  const midperpendicularsLineTwo = calculatePerpendicularLineByPointAndLine(\r\n    calculateMiddlePoint(p1, p3),\r\n    getLineFromTwoPoints(p1, p3)\r\n  );\r\n\r\n  const center = calculateIntersectionByLineAndLine(midperpendicularsLineOne, midperpendicularsLineTwo);\r\n  const radius = calculateDistanceTwoPoints(center, p1);\r\n\r\n  const equation = calculateCircleEquationByCenterPoint(center, radius);\r\n\r\n  return { center, radius, equation };\r\n}\r\n\r\nexport function calculateInCircleEquation(p1: CoordinateType, p2: CoordinateType, p3: CoordinateType): CircleType {\r\n  const bisectorLineOne = calculateInternalBisectLineEquation(\r\n    getLineFromTwoPoints(p1, p3),\r\n    getLineFromTwoPoints(p1, p2),\r\n    p2,\r\n    p3\r\n  );\r\n\r\n  const bisectorLineTwo = calculateInternalBisectLineEquation(\r\n    getLineFromTwoPoints(p2, p3),\r\n    getLineFromTwoPoints(p1, p2),\r\n    p1,\r\n    p3\r\n  );\r\n\r\n  const center = calculateIntersectionByLineAndLine(bisectorLineOne, bisectorLineTwo);\r\n  const radius = calculateDistanceFromPointToLine(center, getLineFromTwoPoints(p1, p3));\r\n\r\n  const equation = calculateCircleEquationByCenterPoint(center, radius);\r\n  return { center, radius, equation };\r\n}\r\n\r\nexport function calculateTangentEquation(circle: EquationType, point?: CoordinateType = null): EquationType {\r\n  const tangentPoint: CoordinateType = point || getRandomPointInEquation(circle);\r\n\r\n  const tangentEquation: EquationType = {};\r\n\r\n  tangentEquation.a = 0;\r\n  tangentEquation.b = 0;\r\n  tangentEquation.c = tangentPoint.x + circle.c / 2;\r\n  tangentEquation.d = tangentPoint.y + circle.d / 2;\r\n  tangentEquation.e = circle.e + (circle.c * tangentPoint.x) / 2 + (circle.d * tangentPoint.y) / 2;\r\n\r\n  return tangentEquation;\r\n}\r\n\r\nexport function calculateTangentIntersectPointsByPointOutsideCircle(\r\n  circle: EquationType,\r\n  point?: CoordinateType = null,\r\n  exceptionPoint?: CoordinateType = null\r\n): EquationType {\r\n  const center: CoordinateType = { x: -circle.c / 2, y: -circle.d / 2 };\r\n\r\n  const tempCircleCenter = calculateMiddlePoint(center, point);\r\n  const tempCircleRadius = calculateDistanceTwoPoints(center, point) / 2;\r\n\r\n  const tempCircleEquation = calculateCircleEquationByCenterPoint(tempCircleCenter, tempCircleRadius);\r\n\r\n  let roots = calculateIntersectionTwoCircleEquations(circle, tempCircleEquation);\r\n\r\n  if (exceptionPoint) {\r\n    roots = roots.filter((root: CoordinateType): boolean => JSON.stringify(root) !== JSON.stringify(exceptionPoint));\r\n  }\r\n\r\n  return roots;\r\n}\r\n\r\nexport function isTwoEquationEqual(equationOne: EquationType, equationTwo: EquationType): boolean {\r\n  return getAngleFromTwoLines(equationOne, equationTwo, 1) === 0;\r\n}\r\n","export function isLowerCaseChar(char) {\r\n  if (char === char.toLowerCase()) return '0';\r\n  return '1';\r\n}\r\n\r\nexport function isNumber(value) {\r\n  return !isNaN(value) || typeof value === 'number' || (isObjectLike(value) && getTag(value) === '[object Number]');\r\n}\r\n\r\nexport function isObject(value) {\r\n  const type = typeof value;\r\n  return value !== null && (type === 'object' || type === 'function');\r\n}\r\n\r\nexport function isQuadraticEquation(equation): boolean {\r\n  if (!equation) return false;\r\n  return equation.a === 1 && equation.b === 1;\r\n}\r\n\r\nexport function isFunction(value) {\r\n  if (!isObject(value)) {\r\n    return false;\r\n  }\r\n  // The use of `Object#toString` avoids issues with the `typeof` operator\r\n  // in Safari 9 which returns 'object' for typed arrays and other constructors.\r\n  const tag = getTag(value);\r\n  return (\r\n    tag === '[object Function]' ||\r\n    tag === '[object AsyncFunction]' ||\r\n    tag === '[object GeneratorFunction]' ||\r\n    tag === '[object Proxy]'\r\n  );\r\n}\r\n\r\n/* ====================================================================\r\n                          INTERNAL METHODS\r\n   ==================================================================*/\r\nfunction isObjectLike(value) {\r\n  return typeof value === 'object' && value !== null;\r\n}\r\n\r\nfunction getTag(value) {\r\n  if (value == null) {\r\n    return value === undefined ? '[object Undefined]' : '[object Null]';\r\n  }\r\n  return toString.call(value);\r\n}\r\n","import { isLowerCaseChar, isNumber } from '../../utils/checker';\r\n\r\nexport function checkFormatString(str) {\r\n  let result = '';\r\n  str.split('').forEach((element) => {\r\n    result += isLowerCaseChar(element);\r\n  });\r\n  return result;\r\n}\r\n\r\nfunction validateObject(str) {\r\n  for (let i = 0; i < str.length; i++) {\r\n    if (isNumber(str[i])) return false;\r\n    if (i > 0) if (str.slice(0, i - 1).includes(str[i])) return false;\r\n  }\r\n  return true;\r\n}\r\n\r\nexport function defineObject(value) {\r\n  if (isNumber(value)) {\r\n    return 'value';\r\n  }\r\n\r\n  if (!validateObject(value)) {\r\n    return undefined;\r\n  }\r\n\r\n  if (value.length === 3) {\r\n    if (value.includes('(') && value.includes(')')) {\r\n      return 'circle';\r\n    }\r\n    return 'angle';\r\n  }\r\n\r\n  const formatObj = checkFormatString(value);\r\n  switch (formatObj) {\r\n    case '0':\r\n      return 'line';\r\n    case '1':\r\n      return 'point';\r\n    case '10':\r\n      return 'ray';\r\n    case '11':\r\n      return 'segment';\r\n    default:\r\n      return undefined;\r\n  }\r\n}\r\n","import { RankingObjectContain, validate } from '../definition/define.js';\r\nimport { checkFormatString } from '../definition/defineObjType';\r\nimport ErrorService from '../../utils/ErrorHandleService.js';\r\n\r\nexport function validateValue(value, type) {\r\n  if (!_validateName(value.value)) return false;\r\n\r\n  const validateGeometryType = validate.object[type];\r\n  let validateType;\r\n\r\n  if (value.key === 'value' || value.key === 'relation' || value.key === 'undefined' || value.key === 'circle')\r\n    return true;\r\n  if (value.key === 'angle') if (!validateAngle(value.value)) return false;\r\n\r\n  if (validateGeometryType.includes(value.key) || value.key !== 'object') {\r\n    const format = checkFormatString(value.value);\r\n    validateType = validate[value.key];\r\n    if (validateType && format)\r\n      if (validateType.format) {\r\n        if (format === validateType.format && value.value.length === validateType.length) return true;\r\n      } else if (value.value.length === validateType.length) {\r\n        return true;\r\n      }\r\n  }\r\n  return false;\r\n}\r\n\r\nfunction validateAngle(value) {\r\n  const format = checkFormatString(value);\r\n  return format[1] === '1';\r\n}\r\n\r\nfunction validateShape(shape) {\r\n  const keys = Object.keys(shape);\r\n  const validateShapeFormat = validate.shape[keys[0]];\r\n  const validateShapeType = validate.shapeType[keys[0]] || [''];\r\n  //check format of shape value\r\n  const value = shape[keys[0]];\r\n  const format = checkFormatString(shape[keys[0]]);\r\n  const shapeFormatCheck = format === validateShapeFormat.format && value.length === validateShapeFormat.length;\r\n\r\n  //check type of shape\r\n  const type = shape.type || '';\r\n  const shapeTypeCheck = validateShapeType.includes(type);\r\n\r\n  return shapeFormatCheck && shapeTypeCheck && _validateName(shape[keys[0]]);\r\n}\r\n\r\nfunction validateDataRelationship(data) {\r\n  const keys = Object.keys(data);\r\n\r\n  for (let indexOfRankingLevel = 0; indexOfRankingLevel < RankingObjectContain.length - 1; indexOfRankingLevel++) {\r\n    for (\r\n      let indexOfObjectCurrentLevel = 0;\r\n      indexOfObjectCurrentLevel < RankingObjectContain[indexOfRankingLevel].length;\r\n      indexOfObjectCurrentLevel++\r\n    ) {\r\n      for (\r\n        let indexOfObjectNextLevel = 0;\r\n        indexOfObjectNextLevel < RankingObjectContain[indexOfRankingLevel + 1].length;\r\n        indexOfObjectNextLevel++\r\n      )\r\n        if (keys.includes(RankingObjectContain[indexOfRankingLevel][indexOfObjectCurrentLevel])) {\r\n          if (data[RankingObjectContain[indexOfRankingLevel + 1][indexOfObjectNextLevel]])\r\n            return checkObjectRelationship(\r\n              data[RankingObjectContain[indexOfRankingLevel][indexOfObjectCurrentLevel]][0],\r\n              data[RankingObjectContain[indexOfRankingLevel + 1][indexOfObjectNextLevel]][0]\r\n            );\r\n        }\r\n    }\r\n  }\r\n\r\n  return true;\r\n}\r\n\r\nfunction checkObjectRelationship(obj1, obj2) {\r\n  let check = obj2.split('').map((char) => {\r\n    return obj1.includes(char);\r\n  });\r\n  const result = [...new Set(check)];\r\n\r\n  if (result.length === 1) {\r\n    return !result[0];\r\n  }\r\n  if (obj2.length === 2) return check.indexOf(true) === -1;\r\n  if (obj2.length === 3) {\r\n    return !(check.indexOf(true) === 0 || check.indexOf(true) === 2);\r\n  }\r\n}\r\n\r\n// check validate name not duplicate Ex: ABB\r\nfunction _validateName(string) {\r\n  return (\r\n    string.split('').length === string.split('').filter((item, index, array) => array.indexOf(item) === index).length\r\n  );\r\n}\r\n\r\nexport function validateInformation(info) {\r\n  const type = info.outputType;\r\n\r\n  if (type === 'shape') {\r\n    return validateShape(info);\r\n  } else {\r\n    delete info.outputType;\r\n    let keys = Object.keys(info);\r\n    if (keys.includes('undefined')) {\r\n      return false;\r\n    }\r\n    for (let i = 0; i < keys.length; i++) {\r\n      let array = info[keys[i]];\r\n      let key = keys[i];\r\n      for (let j = 0; j < array.length; j++) {\r\n        let value = array[j];\r\n        const check = validateValue({ key, value }, type);\r\n\r\n        if (!check) return check;\r\n      }\r\n    }\r\n  }\r\n  const keys = Object.keys(info);\r\n  info.outputType = type;\r\n\r\n  if (type === 'define') {\r\n    if (keys.includes('value')) {\r\n      return keys.length === 2;\r\n    } else {\r\n      return keys.length === 1;\r\n    }\r\n  }\r\n\r\n  if (type === 'relation') {\r\n    return validateDataRelationship(info);\r\n  }\r\n\r\n  return true;\r\n}\r\n","import { defineObject } from './defineObjType';\r\nimport { validateInformation } from '../validation/validation';\r\nimport { definePointType } from './definePointType';\r\nimport { defineShapeType } from './defineShapeType';\r\nimport { reversedDependentObjRelation } from './define';\r\n\r\nfunction defineInformation(data) {\r\n  let result;\r\n  switch (data.outputType) {\r\n    case 'shape': {\r\n      result = defineShapeType(data);\r\n      break;\r\n    }\r\n\r\n    case 'relation': {\r\n      result = definePointType(data);\r\n      break;\r\n    }\r\n\r\n    default: {\r\n      result = data;\r\n    }\r\n  }\r\n\r\n  if (reversedDependentObjRelation.includes(result.relation)) {\r\n    result.object = result.object.reverse();\r\n  }\r\n\r\n  Object.keys(result).forEach((key) => {\r\n    if (key === 'object') {\r\n      result[key].forEach((value) => {\r\n        const type = defineObject(value);\r\n        if (!result[type]) result[type] = [];\r\n        if (type === 'segment') {\r\n          value = sortString(value);\r\n        }\r\n        if (type === 'circle') {\r\n          value = value[1].toUpperCase();\r\n        }\r\n        result[type].push(value);\r\n      });\r\n    }\r\n    if (key === 'circle') {\r\n      result[key].forEach((value: string, index: number) => {\r\n        result[key][index] = result[key][index][1];\r\n      });\r\n    }\r\n  });\r\n\r\n  if (data.outputType === 'shape') {\r\n    const shapeName = Object.keys(result).filter((key) => key !== 'type')[0];\r\n    if (shapeName !== 'triangle') {\r\n      result[shapeName] = sortString(result[shapeName]);\r\n    }\r\n  }\r\n\r\n  delete result.object;\r\n  const validate = validateInformation(result);\r\n\r\n  if (validate) {\r\n    return result;\r\n  } else {\r\n    return { Error: result };\r\n  }\r\n}\r\n\r\nfunction sortString(str) {\r\n  const arr = str.split('');\r\n  const sorted = arr.sort();\r\n  return sorted.join('');\r\n}\r\n\r\nexport { defineInformation };\r\n","export function defineShapeType(data) {\r\n  let result = {};\r\n\r\n  Object.keys(data).forEach((key) => {\r\n    if (key.includes('type')) {\r\n      const splitter = data[key].toString().split(' ');\r\n      const shape = splitter[splitter.length - 1];\r\n      const splitKey = key.split(' ');\r\n      const shapeName = splitKey.pop();\r\n      const otherData = data[key]\r\n        .toString()\r\n        .replace(shape, '')\r\n        .trim()\r\n        .split(' ');\r\n      result[shapeName] = shape;\r\n      let point = '';\r\n      if (otherData[0].length === 1) {\r\n        result['point'] = otherData[0];\r\n        point = otherData[0];\r\n      }\r\n      result['type'] = otherData\r\n        .join(' ')\r\n        .replace(point, '')\r\n        .trim();\r\n    } else {\r\n      result[key] = data[key].toString();\r\n    }\r\n  });\r\n\r\n  return result;\r\n}\r\n","export function definePointType(data) {\r\n  let result = {};\r\n\r\n  Object.keys(data).forEach((key) => {\r\n    if (key === 'arrayPoints') {\r\n      result['point'] = data[key].toString().split(',');\r\n    } else {\r\n      result[key] = data[key];\r\n    }\r\n  });\r\n\r\n  return result;\r\n}\r\n","import dataViewModel from '../../ViewModel/DataViewModel';\r\nimport type { CoordinateType } from '../../utils/types';\r\nimport { calculateDistanceTwoPoints, getLineFromTwoPoints } from './Math2D';\r\nimport { getRandomValue } from './Generation.js';\r\nimport GConst from '../../utils/values';\r\n\r\nconst MIN = GConst.Number.MIN_RANDOM_GENERATION;\r\nconst MAX = GConst.Number.MAX_RANDOM_GENERATION;\r\n\r\nconst geometricObj = {\r\n  triangle: generateTriangle,\r\n  quadrilateral: generateQuadrilateral,\r\n  trapezoid: generateTrapezoid,\r\n  parallelogram: generateParallelogram,\r\n  rectangle: generateRectangle,\r\n  rhombus: generateRhombus,\r\n  square: generateSquare,\r\n  circle: generateCircle\r\n};\r\n\r\nexport function generateGeometry(name: string, shape: string, type?: string) {\r\n  const generateFunc = geometricObj[shape];\r\n  if (generateFunc) {\r\n    generateFunc(name, type);\r\n  }\r\n}\r\n\r\nfunction generateTriangle(name: string, type: string) {\r\n  if (name.length === 3) {\r\n    let p1: CoordinateType = { x: 0, y: 0, z: 0 };\r\n    let p2: CoordinateType = {};\r\n    let p3: CoordinateType = {};\r\n\r\n    dataViewModel.updateCoordinate(name[0], p1);\r\n    switch (type) {\r\n      case '': {\r\n        p3.y = getRandomValue(p1.y + 5, p1.y + 10);\r\n        p3.x = getRandomValue(p1.x - 3, p1.x - 10);\r\n        dataViewModel.updateCoordinate(name[1], p3);\r\n        p2.y = p3.y;\r\n        p2.x = getRandomValue(p1.x + 3, p3.x + 10);\r\n        dataViewModel.updateCoordinate(name[2], p2);\r\n        break;\r\n      }\r\n\r\n      case 'vuông': {\r\n        p2.y = getRandomValue(p1.y + MIN, p1.y + MAX);\r\n        p2.x = p1.x;\r\n        dataViewModel.updateCoordinate(name[2], p2);\r\n        p3.x = getRandomValue(p1.x + 1, p1.x + 50);\r\n        p3.y = p1.y;\r\n        dataViewModel.updateCoordinate(name[1], p3);\r\n        break;\r\n      }\r\n\r\n      case 'cân': {\r\n        /*\r\n         *            [A]\r\n         *          *    *\r\n         *        *        *\r\n         *      *            *\r\n         *    *                *\r\n         *  B  * * * * * * * *  C\r\n         */\r\n        const distance_From_A_To_B = getRandomValue(3, 6);\r\n\r\n        p3.y = getRandomValue(p1.y + 5, p1.y + 10);\r\n        p3.x = p1.x - distance_From_A_To_B;\r\n        dataViewModel.updateCoordinate(name[1], p3);\r\n        p2.y = p3.y;\r\n        p2.x = p1.x + distance_From_A_To_B;\r\n        dataViewModel.updateCoordinate(name[2], p2);\r\n        break;\r\n      }\r\n\r\n      case 'vuông cân': {\r\n        const distance_From_A_To_B = getRandomValue(5, 10);\r\n        p3.y = p1.y + distance_From_A_To_B;\r\n        p3.x = p1.x - distance_From_A_To_B;\r\n        dataViewModel.updateCoordinate(name[1], p3);\r\n        p2.y = p3.y;\r\n        p2.x = p1.x + distance_From_A_To_B;\r\n        dataViewModel.updateCoordinate(name[2], p2);\r\n        break;\r\n      }\r\n\r\n      case 'đều': {\r\n        /*\r\n         *       [A]\r\n         *      *   *\r\n         *    *       *\r\n         * [B] * * * * [C]\r\n         */\r\n        p2.x = getRandomValue(p1.x + MIN, p1.x + MAX);\r\n        p2.y = Math.sqrt(3) * p2.x;\r\n        dataViewModel.updateCoordinate(name[2], p2);\r\n        const distance_From_A_To_B = calculateDistanceTwoPoints(p1, p2);\r\n        p3.y = p2.y;\r\n        p3.x = -distance_From_A_To_B + p2.x;\r\n        dataViewModel.updateCoordinate(name[1], p3);\r\n        break;\r\n      }\r\n\r\n      default: {\r\n        break;\r\n      }\r\n    }\r\n  }\r\n}\r\n\r\n// Tu giac\r\nfunction generateQuadrilateral(name: string) {\r\n  if (name.length === 4) {\r\n    // p1 represents point A\r\n    const p1: CoordinateType = { x: 0, y: 0, z: 0 };\r\n    dataViewModel.updateCoordinate(name[0], p1);\r\n\r\n    // p2 represents point B\r\n    const p2: CoordinateType = {\r\n      x: getRandomValue(p1.x + MIN, p1.x + MAX),\r\n      y: getRandomValue(p1.y - MAX, p1.y + MAX)\r\n    };\r\n    dataViewModel.updateCoordinate(name[1], p2);\r\n\r\n    // p3 represents point C\r\n    let p3: CoordinateType = {};\r\n    // prevent point C is on AB line\r\n    const linearEquation = getLineFromTwoPoints(p1, p2);\r\n    do {\r\n      p3.x = getRandomValue(p1.x + MIN, p1.x + MAX);\r\n      p3.y = getRandomValue(p1.y + MIN, p1.y + MAX);\r\n    } while (p3.y === linearEquation.coefficientX * p3.x + linearEquation.constantTerm);\r\n    dataViewModel.updateCoordinate(name[2], p3);\r\n\r\n    // p4 represents point D\r\n    const p4: CoordinateType = {\r\n      x: getRandomValue(p1.x - MAX, p3.x),\r\n      y: undefined\r\n    };\r\n\r\n    // prevents p1, p2, p4 are straight\r\n    const line = getLineFromTwoPoints(p1, p2);\r\n    do {\r\n      p4.y = getRandomValue(p1.x, p1.x + MAX);\r\n    } while (p4.y === line.coefficientX * p4.x + line.constantTerm);\r\n\r\n    dataViewModel.updateCoordinate(name[3], p4);\r\n  }\r\n}\r\n\r\n// Hinh thang\r\nfunction generateTrapezoid(name: string, type: string) {\r\n  if (name.length === 4) {\r\n    // p1 represents point A\r\n    const p1: CoordinateType = { x: 0, y: 0, z: 0 };\r\n    dataViewModel.updateCoordinate(name[0], p1);\r\n\r\n    switch (type) {\r\n      case '': {\r\n        // p2 represents point B\r\n        const p2: CoordinateType = {\r\n          x: getRandomValue(p1.x + MIN, p1.x + MAX),\r\n          y: p1.y\r\n        };\r\n        dataViewModel.updateCoordinate(name[1], p2);\r\n\r\n        // p3 represents point C\r\n        const p3: CoordinateType = {\r\n          x: getRandomValue(p2.x + MIN, p2.x + MAX),\r\n          y: getRandomValue(p1.y + MIN, p1.y + MAX)\r\n        };\r\n        dataViewModel.updateCoordinate(name[2], p3);\r\n\r\n        // p4 represents point D\r\n        const p4: CoordinateType = {\r\n          x: getRandomValue(p1.x - MAX, p3.x - MIN),\r\n          y: p3.y\r\n        };\r\n        dataViewModel.updateCoordinate(name[3], p4);\r\n        break;\r\n      }\r\n\r\n      case 'cân': {\r\n        // p2 represents point B\r\n        const p2: CoordinateType = {\r\n          x: getRandomValue(p1.x + MIN, p1.x + MAX),\r\n          y: p1.y\r\n        };\r\n        dataViewModel.updateCoordinate(name[1], p2);\r\n\r\n        // p3 represents point C\r\n        const p3: CoordinateType = {\r\n          x: getRandomValue(p2.x + MIN, p2.x + MAX),\r\n          y: getRandomValue(p1.y + MIN, p1.y + MAX)\r\n        };\r\n        dataViewModel.updateCoordinate(name[2], p3);\r\n\r\n        const distanceX = Math.abs(p3.x - p2.x);\r\n        const p4X = getRandomValue(0, 2) === 1 ? p1.x + distanceX : p1.x - distanceX;\r\n        // p4 represents point D\r\n        const p4: CoordinateType = {\r\n          x: p4X,\r\n          y: p3.y\r\n        };\r\n        dataViewModel.updateCoordinate(name[3], p4);\r\n        break;\r\n      }\r\n\r\n      case 'vuông': {\r\n        // TODO: vuong tai dau?\r\n        break;\r\n      }\r\n\r\n      default: {\r\n        break;\r\n      }\r\n    }\r\n  }\r\n}\r\n\r\n// hinh binh hanh\r\nfunction generateParallelogram(name: string) {\r\n  if (name.length === 4) {\r\n    // p1 represents point A\r\n    const p1: CoordinateType = { x: 0, y: 0, z: 0 };\r\n    dataViewModel.updateCoordinate(name[0], p1);\r\n\r\n    // p2 represents point B\r\n    let p2: CoordinateType = {\r\n      x: getRandomValue(p1.x + MIN, p1.x + MAX),\r\n      y: p1.y\r\n    };\r\n    dataViewModel.updateCoordinate(name[1], p2);\r\n\r\n    // p3 represents point C\r\n    let p3: CoordinateType = {\r\n      x: getRandomValue(p1.x + MIN, p1.x + MAX),\r\n      y: getRandomValue(p1.x + MIN, p1.x + MAX)\r\n    };\r\n    dataViewModel.updateCoordinate(name[2], p3);\r\n\r\n    // p4 represents point D\r\n    let p4: CoordinateType = {\r\n      x: p3.x - p2.x - p1.x,\r\n      y: p3.y\r\n    };\r\n    dataViewModel.updateCoordinate(name[3], p4);\r\n  }\r\n}\r\n\r\nfunction generateRectangle(name: string) {\r\n  if (name.length === 4) {\r\n    // p1 represents point A\r\n    const p1: CoordinateType = { x: 0, y: 0, z: 0 };\r\n    dataViewModel.updateCoordinate(name[0], p1);\r\n\r\n    // p2 represents point B\r\n    const p2: CoordinateType = {\r\n      x: getRandomValue(p1.x + MIN, p1.x + MAX),\r\n      y: p1.y\r\n    };\r\n    dataViewModel.updateCoordinate(name[1], p2);\r\n\r\n    // p3 represents point C\r\n    const p3: CoordinateType = {\r\n      x: p2.x,\r\n      y: getRandomValue(p2.y + MIN, p2.y + MAX)\r\n    };\r\n    dataViewModel.updateCoordinate(name[2], p3);\r\n\r\n    // p4 represents point D\r\n    const p4: CoordinateType = {\r\n      x: p1.x,\r\n      y: p3.y\r\n    };\r\n    dataViewModel.updateCoordinate(name[3], p4);\r\n  }\r\n}\r\n\r\n// Hinh thoi\r\nfunction generateRhombus(name: string) {\r\n  if (name.length === 4) {\r\n    // p1 represents point A\r\n    const p1: CoordinateType = { x: 0, y: 0, z: 0 };\r\n    dataViewModel.updateCoordinate(name[0], p1);\r\n\r\n    // p2 represents point B\r\n    const p2: CoordinateType = {\r\n      x: getRandomValue(p1.x + MIN, p1.x + MAX),\r\n      y: -getRandomValue(p1.y + MIN, p1.y + MAX)\r\n    };\r\n    dataViewModel.updateCoordinate(name[1], p2);\r\n\r\n    // p3 represents point C\r\n    const p3: CoordinateType = {\r\n      x: 2 * Math.abs(p2.x - p1.x),\r\n      y: p1.y\r\n    };\r\n    dataViewModel.updateCoordinate(name[2], p3);\r\n\r\n    // p4 represents point D\r\n    const p4: CoordinateType = {\r\n      x: p2.x,\r\n      y: Math.abs(-p2.y - p1.y)\r\n    };\r\n    dataViewModel.updateCoordinate(name[3], p4);\r\n  }\r\n}\r\n\r\nfunction generateSquare(name: string) {\r\n  if (name.length === 4) {\r\n    // p1 represents point A\r\n    const p1: CoordinateType = { x: 0, y: 0, z: 0 };\r\n    dataViewModel.updateCoordinate(name[0], p1);\r\n\r\n    // p2 represents point B\r\n    const p2: CoordinateType = {\r\n      x: getRandomValue(p1.x + MIN, p1.x + MAX),\r\n      y: p1.y\r\n    };\r\n    dataViewModel.updateCoordinate(name[1], p2);\r\n\r\n    // p3 represents point C\r\n    const p3: CoordinateType = {\r\n      x: p2.x,\r\n      y: p2.y + calculateDistanceTwoPoints(p1, p2)\r\n    };\r\n    dataViewModel.updateCoordinate(name[2], p3);\r\n\r\n    // p4 represents point D\r\n    const p4: CoordinateType = {\r\n      x: p1.x,\r\n      y: p3.y\r\n    };\r\n    dataViewModel.updateCoordinate(name[3], p4);\r\n  }\r\n}\r\n\r\nfunction generateCircle(name: string) {}\r\n","import type { CoordinateType, EquationType, NodeRelationType, NodeType } from '../../utils/types';\r\nimport dataViewModel from '../../ViewModel/DataViewModel.js';\r\nimport {\r\n  calculateCircleEquationByCenterPoint,\r\n  calculateDistanceTwoPoints,\r\n  calculateIntersectionByLineAndLine,\r\n  calculateIntersectionTwoCircleEquations,\r\n  calculateParallelLineByPointAndLine,\r\n  calculatePerpendicularLineByPointAndLine,\r\n  getLineFromTwoPoints,\r\n  calculateInCircleEquation,\r\n  calculateCircumCircleEquation,\r\n  getAngleFromTwoLines,\r\n  calculateMiddlePoint,\r\n  calculateSymmetricalPoint\r\n} from '../math/Math2D';\r\nimport { getRandomValue } from '../math/Generation';\r\nimport { mappingShapeType, shapeRules, TwoStaticPointRequireShape, circleType } from '../definition/define';\r\nimport { generateGeometry } from '../math/GenerateGeometry';\r\nimport { readRelation } from './ReadRelation';\r\nimport ErrorService from '../../utils/ErrorHandleService.js';\r\nimport appData from '../../Model/AppData.js';\r\n\r\nlet shape, shapeName, shapeType;\r\n\r\nexport function readPointsMap(): Array | {} {\r\n  dataViewModel.createPointDetails();\r\n  console.table(dataViewModel.getData.getPointsMap);\r\n\r\n  while (!dataViewModel.isPointsMapStatic()) {\r\n    //get node to calculate\r\n    const executingNode = dataViewModel.getNextExecuteNode();\r\n\r\n    if (!executingNode) break;\r\n\r\n    executeRelations(executingNode);\r\n\r\n    //Update calculated value to pointsMap\r\n    if (dataViewModel.getData.getPointDetails.has(executingNode.id)) {\r\n      const roots = dataViewModel.getData.getPointDetails.get(executingNode.id).roots;\r\n\r\n      if (typeof roots === 'string') {\r\n        ErrorService.showError('400');\r\n        return;\r\n      }\r\n      if (roots.length > 0) {\r\n        let coordinate;\r\n        if (dataViewModel.isNeedRandomCoordinate(executingNode.id)) {\r\n          coordinate = roots[getRandomValue(0, roots.length)];\r\n        } else {\r\n          const nodeDirectionInfo = dataViewModel.getData.getPointDirectionMap[executingNode.id];\r\n          const staticPointCoordinate = dataViewModel.getNodeInPointsMapById(nodeDirectionInfo.root).coordinate;\r\n          if (roots.length > 1) {\r\n            const rootsDirection = roots.map((root) => ({\r\n              coordinate: root,\r\n              isRight: root.x > staticPointCoordinate.x,\r\n              isUp: root.y < staticPointCoordinate.y\r\n            }));\r\n\r\n            const coordinateMatch = rootsDirection\r\n              .map((directionInfo) => {\r\n                let matchCount = 0;\r\n                if (directionInfo.isRight === nodeDirectionInfo.isRight) {\r\n                  matchCount++;\r\n                }\r\n                if (directionInfo.isUp === nodeDirectionInfo.isUp) {\r\n                  matchCount++;\r\n                }\r\n                return {\r\n                  coordinate: directionInfo.coordinate,\r\n                  matchCount\r\n                };\r\n              })\r\n              .sort((a, b) => b.matchCount - a.matchCount)[0];\r\n\r\n            coordinate = coordinateMatch.coordinate;\r\n          } else {\r\n            coordinate = roots[0];\r\n          }\r\n        }\r\n\r\n        dataViewModel.updateCoordinate(executingNode.id, coordinate);\r\n      }\r\n    }\r\n\r\n    //appModel.updatePointsMap(executingNode);\r\n    dataViewModel.getData.getExecutedNode.push(executingNode.id);\r\n\r\n    //update static Node\r\n    dataViewModel.updateStaticNode();\r\n\r\n    if (shapeRules[shapeName] && shapeRules[shapeName][shapeType]) {\r\n      makeCorrectShape(shape, shapeName, shapeRules[shapeName][shapeType], executingNode.id);\r\n    }\r\n  }\r\n\r\n  dataViewModel.getData.getPointsMap.forEach((node: NodeType) => {\r\n    //Update calculated value to pointsMap\r\n    if (dataViewModel.getData.getPointDetails.has(node.id)) {\r\n      const roots = dataViewModel.getData.getPointDetails.get(node.id).roots;\r\n      if (typeof roots === 'string') {\r\n        ErrorService.showError('400');\r\n        return;\r\n      }\r\n      if (roots.length > 0) {\r\n        let coordinate;\r\n        if (dataViewModel.isNeedRandomCoordinate(node.id)) {\r\n          coordinate = roots[getRandomValue(0, roots.length)];\r\n        } else {\r\n          const nodeDirectionInfo = dataViewModel.getData.getPointDirectionMap[node.id];\r\n          const staticPointCoordinate = dataViewModel.getNodeInPointsMapById(nodeDirectionInfo.root).coordinate;\r\n          if (roots.length > 1) {\r\n            const rootsDirection = roots.map((root) => ({\r\n              coordinate: root,\r\n              isRight: root.x > staticPointCoordinate.x,\r\n              isUp: root.y < staticPointCoordinate.y\r\n            }));\r\n\r\n            const coordinateMatch = rootsDirection\r\n              .map((directionInfo) => {\r\n                let matchCount = 0;\r\n                if (directionInfo.isRight === nodeDirectionInfo.isRight) {\r\n                  matchCount++;\r\n                }\r\n                if (directionInfo.isUp === nodeDirectionInfo.isUp) {\r\n                  matchCount++;\r\n                }\r\n                return {\r\n                  coordinate: directionInfo.coordinate,\r\n                  matchCount\r\n                };\r\n              })\r\n              .sort((a, b) => b.matchCount - a.matchCount)[0];\r\n\r\n            coordinate = coordinateMatch.coordinate;\r\n          } else {\r\n            coordinate = roots[0];\r\n          }\r\n        }\r\n\r\n        dataViewModel.updateCoordinate(node.id, coordinate);\r\n      }\r\n    }\r\n    // temp\r\n    if (shapeRules[shapeName] && shapeRules[shapeName][shapeType]) {\r\n      makeCorrectShape(shape, shapeName, shapeRules[shapeName][shapeType], node.id);\r\n    }\r\n  });\r\n\r\n  return dataViewModel.getData.getPointsMap.map((node) => ({\r\n    id: node.id,\r\n    coordinate: node.coordinate\r\n  }));\r\n}\r\n\r\nfunction executeRelations(node: NodeType) {\r\n  const executingNodeRelations = _makeUniqueNodeRelation(node.dependentNodes);\r\n\r\n  executingNodeRelations.forEach((relation) => {\r\n    let relationEquation;\r\n    if (relation.outputType === 'shape') {\r\n      shapeName = Object.keys(relation).filter((key) => key !== 'type')[0];\r\n      shapeType = mappingShapeType[relation.type] || 'normal';\r\n      shape = relation[shapeName];\r\n      if (circleType.includes(shapeType)) {\r\n        let data = null;\r\n        switch (shapeType) {\r\n          case 'nội tiếp':\r\n            data = calculateInCircleEquation(\r\n              dataViewModel.getNodeInPointsMapById(shape[0]).coordinate,\r\n              dataViewModel.getNodeInPointsMapById(shape[1]).coordinate,\r\n              dataViewModel.getNodeInPointsMapById(shape[2]).coordinate\r\n            );\r\n            break;\r\n          case 'ngoại tiếp':\r\n            data = calculateCircumCircleEquation(\r\n              dataViewModel.getNodeInPointsMapById(shape[0]).coordinate,\r\n              dataViewModel.getNodeInPointsMapById(shape[1]).coordinate,\r\n              dataViewModel.getNodeInPointsMapById(shape[2]).coordinate\r\n            );\r\n            break;\r\n          default:\r\n            break;\r\n        }\r\n        if (data) {\r\n          dataViewModel.circlesData[relation.point[0]] = data;\r\n          dataViewModel.updateCoordinate(relation.point[0], data.center);\r\n        } else {\r\n          ErrorService.ErrorMessage('400');\r\n        }\r\n        return;\r\n      } else if (!dataViewModel.isExecutedRelation(relation)) {\r\n        generateGeometry(relation[shapeName], shapeName, relation.type);\r\n        setPointsDirection(relation[shapeName]);\r\n      }\r\n      if (shapeRules[shapeName] && shapeRules[shapeName][shapeType]) {\r\n        makeCorrectShape(shape, shapeName, shapeRules[shapeName][shapeType], node.id);\r\n      }\r\n    }\r\n    relationEquation = readRelation(relation, node.id);\r\n    if (relationEquation) {\r\n      if (Array.isArray(relationEquation)) {\r\n        relationEquation = relationEquation[getRandomValue(0, relationEquation.length)];\r\n      }\r\n      dataViewModel.executePointDetails(node.id, relationEquation);\r\n    }\r\n\r\n    if (!dataViewModel.isExecutedRelation(relation)) {\r\n      dataViewModel.getData.getExecutedRelations.push(relation);\r\n    }\r\n  });\r\n}\r\n\r\nfunction setPointsDirection(shape: string) {\r\n  shape.split('').forEach((point, index) => {\r\n    if (index > 0) {\r\n      const pointCoordinate = dataViewModel.getNodeInPointsMapById(point).coordinate;\r\n      const rootCoordinate = dataViewModel.getNodeInPointsMapById(shape[index - 1]).coordinate;\r\n\r\n      dataViewModel.getData.getPointDirectionMap[point] = {\r\n        root: shape[index - 1],\r\n        isRight: pointCoordinate.x > rootCoordinate.x,\r\n        isUp: pointCoordinate.y < rootCoordinate.y\r\n      };\r\n    }\r\n  });\r\n}\r\n\r\nexport function _makeUniqueNodeRelation(dependentNodes: Array<NodeRelationType>): Array<any> {\r\n  let result: Array<NodeRelationType> = [];\r\n\r\n  for (let index = 0; index < dependentNodes.length; index++) {\r\n    let temp = true;\r\n\r\n    for (let i = 0; i < result.length; i++) {\r\n      if (dependentNodes[index].relation === result[i]) {\r\n        temp = false;\r\n        break;\r\n      }\r\n    }\r\n\r\n    if (temp) result.push(dependentNodes[index].relation);\r\n  }\r\n  return result;\r\n}\r\n\r\nfunction makeCorrectShape(shape: string, shapeName: string, rules: string, executePoint: string) {\r\n  const staticPointCountRequire = TwoStaticPointRequireShape.includes(shapeName) ? 2 : 1;\r\n  let staticPoints = shape.replace(executePoint, '').split('');\r\n  // check other points are static\r\n  let count = 0;\r\n  for (let i = 0; i < staticPoints.length; i++) {\r\n    if (dataViewModel.isStaticNodeById(staticPoints[i])) {\r\n      count++;\r\n    }\r\n  }\r\n\r\n  if (count < staticPointCountRequire) {\r\n    return;\r\n  }\r\n\r\n  // get node information\r\n  let arrayRules = rules.split(new RegExp('&', 'g'));\r\n\r\n  const executePointIndex = shape.indexOf(executePoint);\r\n  let nodeSetEquations = [];\r\n  if (arrayRules.length > 0) {\r\n    arrayRules.forEach((rule) => {\r\n      const relationType = rule[2];\r\n      if (rule.includes(executePointIndex)) {\r\n        let equation;\r\n        // eslint-disable-next-line default-case\r\n        switch (relationType) {\r\n          case '|':\r\n            equation = getLinearEquationByParallelRule(rule, shape, executePointIndex);\r\n            break;\r\n          case '^':\r\n            const count = rule.split('^').filter((line: string): boolean => line.includes(executePointIndex)).length;\r\n            if (count === 2) {\r\n              equation = getLinearEquationByPerpendicularRule(rule, shape, executePointIndex);\r\n            } else {\r\n              updateCoordinateBySpecialPerpendicularRule(rule, shape, executePointIndex);\r\n            }\r\n            break;\r\n          case '=':\r\n            equation = getLinearEquationsByEqualRule(rule, shape, executePointIndex);\r\n            break;\r\n        }\r\n        if (equation) {\r\n          nodeSetEquations = nodeSetEquations.concat(equation);\r\n        }\r\n      }\r\n    });\r\n\r\n    if (nodeSetEquations.length > 1) {\r\n      const coordinate = calculateIntersectionByLineAndLine(nodeSetEquations[0], nodeSetEquations[1]);\r\n      dataViewModel.updateCoordinate(executePoint, coordinate);\r\n    }\r\n    nodeSetEquations.forEach((equation) => {\r\n      dataViewModel.executePointDetails(executePoint, equation);\r\n    });\r\n  }\r\n}\r\n\r\nfunction updateCoordinateBySpecialPerpendicularRule(rule: string, shape: string, executePointIndex: number) {\r\n  let includeLine, nonIncludeLine;\r\n  const staticLines = rule\r\n    .split('^')\r\n    .filter(\r\n      (line: string): boolean =>\r\n        dataViewModel.isStaticNodeById(shape[line[0]]) && dataViewModel.isStaticNodeById(shape[line[1]])\r\n    );\r\n\r\n  rule.split('^').forEach((line: string) => {\r\n    if (line.includes(executePointIndex)) {\r\n      includeLine = line;\r\n    } else {\r\n      nonIncludeLine = line;\r\n    }\r\n  });\r\n\r\n  const shapePoints = shape\r\n    .split('')\r\n    .map((point: string): CoordinateType => dataViewModel.getNodeInPointsMapById(point).coordinate);\r\n\r\n  if (staticLines.length === 1) {\r\n    const intersectPoint = calculateMiddlePoint(shapePoints[staticLines[0][0]], shapePoints[staticLines[0][1]]);\r\n    const nonStaticLine = staticLines[0] === nonIncludeLine ? includeLine : nonIncludeLine;\r\n\r\n    const staticPointIndex = nonStaticLine.split('').filter((pointIndex: string): boolean => {\r\n      return dataViewModel.isStaticNodeById(shape[pointIndex]);\r\n    })[0];\r\n\r\n    const calculatedCoordinate = calculateSymmetricalPoint(shapePoints[staticPointIndex], intersectPoint);\r\n\r\n    dataViewModel.updateCoordinate(shapePoints[nonIncludeLine.replace(staticPointIndex, '')], calculatedCoordinate);\r\n  } else if (staticLines.length === 0) {\r\n    //line perpendicular with line include 1 static point\r\n    const intersectPoint = calculateIntersectionByLineAndLine(\r\n      calculatePerpendicularLineByPointAndLine(\r\n        shapePoints[executePointIndex],\r\n        getLineFromTwoPoints(shapePoints[nonIncludeLine[0]], shapePoints[nonIncludeLine[1]])\r\n      ),\r\n      getLineFromTwoPoints(shapePoints[nonIncludeLine[0]], shapePoints[nonIncludeLine[1]])\r\n    );\r\n    let calculatedCoordinate;\r\n    //update coordinate\r\n    const otherPointInIncludeLine = includeLine.replace(executePointIndex, '');\r\n    if (!dataViewModel.isStaticNodeById(shape[otherPointInIncludeLine])) {\r\n      calculatedCoordinate = calculateSymmetricalPoint(shapePoints[executePointIndex], intersectPoint);\r\n      dataViewModel.updateCoordinate(shape[otherPointInIncludeLine], calculatedCoordinate);\r\n    } else {\r\n      calculatedCoordinate = calculateSymmetricalPoint(shapePoints[otherPointInIncludeLine], intersectPoint);\r\n      dataViewModel.updateCoordinate(shape[executePointIndex], calculatedCoordinate);\r\n    }\r\n\r\n    const nonStaticPointIndex = nonIncludeLine.split('').filter((pointIndex: string): boolean => {\r\n      return !dataViewModel.isStaticNodeById(shape[pointIndex]);\r\n    })[0];\r\n    calculatedCoordinate = calculateSymmetricalPoint(\r\n      shapePoints[nonIncludeLine.replace(nonStaticPointIndex, '')],\r\n      intersectPoint\r\n    );\r\n\r\n    dataViewModel.updateCoordinate(shape[nonStaticPointIndex], calculatedCoordinate);\r\n  }\r\n}\r\n\r\nfunction getLinearEquationsByEqualRule(rule: string, shape: string, executePointIndex: number): Array<EquationType> {\r\n  const lines = rule.split('=');\r\n  let staticLine;\r\n  let nonStaticLines = [];\r\n  // points with non-static point;\r\n  let staticPoints = [];\r\n  lines.forEach((line) => {\r\n    if (line.includes(executePointIndex)) {\r\n      nonStaticLines.push(line);\r\n      staticPoints.push(line.replace(executePointIndex, ''));\r\n    } else {\r\n      staticLine = line;\r\n    }\r\n  });\r\n\r\n  if (staticLine) {\r\n    //1 circle equation\r\n    if (staticLine.includes(nonStaticLines[0].replace(executePointIndex, ''))) {\r\n      const radius = calculateDistanceTwoPoints(\r\n        dataViewModel.getNodeInPointsMapById(shape[staticLine[0]]).coordinate,\r\n        dataViewModel.getNodeInPointsMapById(shape[staticLine[1]]).coordinate\r\n      );\r\n\r\n      return [\r\n        calculateCircleEquationByCenterPoint(\r\n          dataViewModel.getNodeInPointsMapById(shape[nonStaticLines[0].replace(executePointIndex, '')]).coordinate,\r\n          radius\r\n        )\r\n      ];\r\n    }\r\n\r\n    // tam giác đều\r\n    const radius = calculateDistanceTwoPoints(\r\n      dataViewModel.getNodeInPointsMapById(shape[staticLine[0]]).coordinate,\r\n      dataViewModel.getNodeInPointsMapById(shape[staticLine[1]]).coordinate\r\n    );\r\n\r\n    const circleOne = calculateCircleEquationByCenterPoint(\r\n      dataViewModel.getNodeInPointsMapById(shape[staticLine[0]]).coordinate,\r\n      radius\r\n    );\r\n\r\n    const circleTwo = calculateCircleEquationByCenterPoint(\r\n      dataViewModel.getNodeInPointsMapById(shape[staticLine[0]]).coordinate,\r\n      radius\r\n    );\r\n\r\n    const nonStaticNodeId = shape[executePointIndex].id;\r\n\r\n    dataViewModel.updateCoordinate(nonStaticNodeId, calculateIntersectionTwoCircleEquations(circleOne, circleTwo));\r\n    return [circleOne, circleTwo];\r\n  }\r\n}\r\n\r\nfunction getLinearEquationByParallelRule(rule: string, shape: string, executePointIndex: number): EquationType {\r\n  const lines = rule.split('|');\r\n  let staticLine, nonStaticLine;\r\n  lines.forEach((line) => {\r\n    if (line.includes(executePointIndex)) {\r\n      nonStaticLine = line;\r\n    } else {\r\n      staticLine = line;\r\n    }\r\n  });\r\n\r\n  return [\r\n    calculateParallelLineByPointAndLine(\r\n      //point\r\n      dataViewModel.getNodeInPointsMapById(shape[nonStaticLine.replace(executePointIndex, '')]).coordinate,\r\n      //line\r\n      getLineFromTwoPoints(\r\n        dataViewModel.getNodeInPointsMapById(shape[staticLine[0]]).coordinate,\r\n        dataViewModel.getNodeInPointsMapById(shape[staticLine[1]]).coordinate\r\n      )\r\n    )\r\n  ];\r\n}\r\n\r\nfunction getLinearEquationByPerpendicularRule(rule: string, shape: string, executePointIndex: number) {\r\n  const lines = rule.split('^');\r\n  let staticLine;\r\n  let nonStaticLines = [];\r\n  // points with non-static point;\r\n  let staticPoints = [];\r\n  lines.forEach((line) => {\r\n    if (line.includes(executePointIndex)) {\r\n      nonStaticLines.push(line);\r\n      staticPoints.push(line.replace(executePointIndex, ''));\r\n    } else {\r\n      staticLine = line;\r\n    }\r\n  });\r\n\r\n  if (staticLine) {\r\n    return [\r\n      calculatePerpendicularLineByPointAndLine(\r\n        //point\r\n        dataViewModel.getNodeInPointsMapById(shape[nonStaticLines[0].replace(executePointIndex, '')]).coordinate,\r\n        //line\r\n        getLineFromTwoPoints(\r\n          dataViewModel.getNodeInPointsMapById(shape[staticLine[0]]).coordinate,\r\n          dataViewModel.getNodeInPointsMapById(shape[staticLine[1]]).coordinate\r\n        )\r\n      )\r\n    ];\r\n  }\r\n}\r\n","import type { CoordinateType } from '../../utils/types';\r\nimport dataViewModel from '../../ViewModel/DataViewModel.js';\r\nimport {\r\n  calculateCircleEquationByCenterPoint,\r\n  calculateDistanceTwoPoints,\r\n  calculateInternalBisectLineEquation,\r\n  calculateIntersectionByLineAndLine,\r\n  calculateIntersectionEquationTypeWithCircleEquation,\r\n  calculateLinesByAnotherLineAndAngle,\r\n  calculateMiddlePoint,\r\n  calculateParallelLineByPointAndLine,\r\n  calculatePerpendicularLineByPointAndLine,\r\n  calculateSymmetricalPoint,\r\n  getAngleFromTwoLines,\r\n  getLineFromTwoPoints,\r\n  getMiddlePointFromThreePointsInALine,\r\n  isIn,\r\n  calculateIntersectionTwoCircleEquations,\r\n  isVectorInSameLine,\r\n  calculateVector,\r\n  calculateTangentEquation,\r\n  calculateTangentIntersectPointsByPointOutsideCircle\r\n} from '../math/Math2D';\r\nimport {\r\n  generatePointAlignmentInside,\r\n  generatePointAlignmentOutside,\r\n  generatePointMiddleTwoPoints,\r\n  getRandomPointInEquation,\r\n  getRandomValue\r\n} from '../math/Generation.js';\r\nimport ErrorService from '../../utils/ErrorHandleService';\r\nimport { ShapeAffectBySegmentChange } from '../definition/define';\r\n\r\nexport function readRelation(relation: mixed, point: string) {\r\n  let equationResults;\r\n\r\n  dataViewModel.executingRelation = relation;\r\n  if (relation.operation) {\r\n    equationResults = analyzeOperationType(relation, point);\r\n  } else if (relation.relation) {\r\n    const relationType = relation.relation;\r\n\r\n    switch (relationType) {\r\n      case 'trung điểm':\r\n      case 'thuộc':\r\n      case 'không thuộc':\r\n      case 'song song':\r\n      case 'vuông góc':\r\n      case 'phân giác':\r\n      case 'thẳng hàng':\r\n        equationResults = analyzeRelationType(relation, point);\r\n        break;\r\n      case 'cắt':\r\n        equationResults = analyzeIntersectRelation(relation, point);\r\n        break;\r\n      case 'tiếp tuyến':\r\n        equationResults = analyzeTangentRelation(relation, point);\r\n        break;\r\n      default:\r\n        equationResults = null;\r\n    }\r\n  } else if (relation.outputType === 'shape') {\r\n    const shapeType = Object.keys(relation).filter((key) => key !== 'type')[0];\r\n    switch (shapeType) {\r\n      case 'triangle':\r\n        equationResults = getLineFromTwoPoints(\r\n          dataViewModel.getNodeInPointsMapById(relation[shapeType][0]).coordinate,\r\n          dataViewModel.getNodeInPointsMapById(point).coordinate\r\n        );\r\n        break;\r\n      case 'quadrilateral':\r\n      case 'rectangle':\r\n      case 'square':\r\n      case 'rhombus':\r\n      case 'trapezoid':\r\n      case 'parallelogram':\r\n        if (shapeType !== 'quadrilateral') {\r\n          let count = 0;\r\n          relation[shapeType].split('').forEach((point) => {\r\n            if (dataViewModel.isStaticNodeById(point)) {\r\n              count++;\r\n            }\r\n          });\r\n          const limit = 2;\r\n          if (count > limit) {\r\n            return;\r\n          }\r\n        }\r\n        let index = relation[shapeType].indexOf(point);\r\n        if (index === relation[shapeType].length - 1) {\r\n          equationResults = getLineFromTwoPoints(\r\n            dataViewModel.getNodeInPointsMapById(relation[shapeType][index]).coordinate,\r\n            dataViewModel.getNodeInPointsMapById(relation[shapeType][0]).coordinate\r\n          );\r\n        } else {\r\n          index = index === 0 ? relation[shapeType].length - 1 : index - 1;\r\n          equationResults = getLineFromTwoPoints(\r\n            dataViewModel.getNodeInPointsMapById(relation[shapeType][index]).coordinate,\r\n            dataViewModel.getNodeInPointsMapById(point).coordinate\r\n          );\r\n        }\r\n        break;\r\n      default:\r\n        break;\r\n    }\r\n  }\r\n\r\n  //TODO\r\n  if (equationResults) {\r\n    if (equationResults.coefficientX !== undefined) {\r\n      // equationResults is linear\r\n      return {\r\n        a: 0,\r\n        b: 0,\r\n        c: equationResults.coefficientX,\r\n        d: equationResults.coefficientY,\r\n        e: equationResults.constantTerm\r\n      };\r\n    } else {\r\n      // equationResults is circle\r\n      return equationResults;\r\n    }\r\n  }\r\n  return null;\r\n}\r\n\r\nfunction analyzeRelationType(relation: mixed, point: string): LinearEquation {\r\n  let segmentIncludePoint, segmentNotIncludePoint;\r\n  if (relation.segment) {\r\n    relation.segment.forEach((segment: string) => {\r\n      if (segment.includes(point)) {\r\n        segmentIncludePoint = segment;\r\n      } else {\r\n        segmentNotIncludePoint = segment;\r\n      }\r\n    });\r\n  }\r\n\r\n  //points = [...new Set(points)].filter((point: string): boolean => !nonStaticPoints.includes(point));\r\n  const relationType = relation.relation;\r\n\r\n  if (\r\n    relationType === 'trung điểm' ||\r\n    relationType === 'thuộc' ||\r\n    relationType === 'không thuộc' ||\r\n    relationType === 'thẳng hàng'\r\n  ) {\r\n    let calculatedPoint;\r\n    if (relation.circle) {\r\n      calculatedPoint = getRandomPointInEquation(dataViewModel.getCircleEquation(relation.circle[0]));\r\n      dataViewModel.updateCoordinate(relation.point[0], calculatedPoint);\r\n      return dataViewModel.getCircleEquation(relation.circle[0]);\r\n    }\r\n    if (segmentIncludePoint) {\r\n      const otherStaticPoint = relation.point[0];\r\n      const otherStaticNodeInSegment = dataViewModel.getNodeInPointsMapById(segmentIncludePoint.replace(point, ''));\r\n\r\n      if (!otherStaticNodeInSegment.coordinate.x && !otherStaticNodeInSegment.coordinate.y) {\r\n        return null;\r\n      }\r\n\r\n      if (relationType === 'trung điểm') {\r\n        calculatedPoint = calculateSymmetricalPoint(\r\n          otherStaticNodeInSegment.coordinate,\r\n          dataViewModel.getNodeInPointsMapById(otherStaticPoint).coordinate,\r\n          segmentIncludePoint.indexOf(point) === 1\r\n        );\r\n\r\n        dataViewModel.updateCoordinate(point, calculatedPoint);\r\n      }\r\n    } else if (segmentNotIncludePoint) {\r\n      switch (relationType) {\r\n        case 'trung điểm':\r\n          calculatedPoint = calculateMiddlePoint(\r\n            dataViewModel.getNodeInPointsMapById(segmentNotIncludePoint[0]).coordinate,\r\n            dataViewModel.getNodeInPointsMapById(segmentNotIncludePoint[1]).coordinate\r\n          );\r\n          dataViewModel.updateCoordinate(point, calculatedPoint);\r\n          break;\r\n        case 'thuộc':\r\n          calculatedPoint = generatePointAlignmentInside(\r\n            dataViewModel.getNodeInPointsMapById(segmentNotIncludePoint[0]).coordinate,\r\n            dataViewModel.getNodeInPointsMapById(segmentNotIncludePoint[1]).coordinate\r\n          );\r\n          dataViewModel.updateCoordinate(point, calculatedPoint);\r\n          break;\r\n        case 'không thuộc':\r\n          calculatedPoint = generatePointAlignmentOutside(\r\n            dataViewModel.getNodeInPointsMapById(segmentNotIncludePoint[0]).coordinate,\r\n            dataViewModel.getNodeInPointsMapById(segmentNotIncludePoint[1]).coordinate,\r\n            getRandomValue(0, 2) === 1\r\n          );\r\n\r\n          dataViewModel.getData.getAdditionSegment.push(`${point}${segmentNotIncludePoint[0]}`);\r\n          dataViewModel.updateCoordinate(point, calculatedPoint);\r\n          break;\r\n        default:\r\n          break;\r\n      }\r\n    } else {\r\n      const points = relation.point;\r\n      const index = points.indexOf(point);\r\n      if (index === 1) {\r\n        calculatedPoint = generatePointAlignmentInside(\r\n          dataViewModel.getNodeInPointsMapById(points[0]).coordinate,\r\n          dataViewModel.getNodeInPointsMapById(points[2]).coordinate\r\n        );\r\n        dataViewModel.updateCoordinate(point, calculatedPoint);\r\n      } else {\r\n        calculatedPoint = generatePointAlignmentOutside(\r\n          dataViewModel.getNodeInPointsMapById(points[index === 2 ? 0 : 1]).coordinate,\r\n          dataViewModel.getNodeInPointsMapById(points[index === 2 ? 1 : 2]).coordinate,\r\n          index === 2\r\n        );\r\n        dataViewModel.updateCoordinate(point, calculatedPoint);\r\n      }\r\n\r\n      return getLineFromTwoPoints(\r\n        dataViewModel.getNodeInPointsMapById(points[0]).coordinate,\r\n        dataViewModel.getNodeInPointsMapById(points[1]).coordinate\r\n      );\r\n    }\r\n\r\n    return getLineFromTwoPoints(\r\n      dataViewModel.getNodeInPointsMapById(relation.segment[0][0]).coordinate,\r\n      dataViewModel.getNodeInPointsMapById(relation.segment[0][1]).coordinate\r\n    );\r\n  } else if (relationType === 'song song' || relationType === 'vuông góc') {\r\n    const otherStaticPoint = segmentIncludePoint.replace(point, '');\r\n    if (!dataViewModel.isValidCoordinate(otherStaticPoint) && !dataViewModel.isValidCoordinate(point)) {\r\n      const point = generatePointMiddleTwoPoints(\r\n        dataViewModel.getNodeInPointsMapById(segmentNotIncludePoint[0]).coordinate,\r\n        dataViewModel.getNodeInPointsMapById(segmentNotIncludePoint[1]).coordinate\r\n      );\r\n      if (point) {\r\n        dataViewModel.updateCoordinate(otherStaticPoint, point);\r\n      }\r\n    }\r\n    //undefined point\r\n    for (let i = 0; i < 2; i++) {\r\n      if (!dataViewModel.isValidCoordinate(segmentNotIncludePoint[i])) {\r\n        return;\r\n      }\r\n    }\r\n\r\n    const staticLineEquation = getLineFromTwoPoints(\r\n      dataViewModel.getNodeInPointsMapById(segmentNotIncludePoint[0]).coordinate,\r\n      dataViewModel.getNodeInPointsMapById(segmentNotIncludePoint[1]).coordinate\r\n    );\r\n\r\n    if (!dataViewModel.isValidCoordinate(otherStaticPoint)) {\r\n      return;\r\n    }\r\n\r\n    let calculatedLineEquation;\r\n    if (relationType === 'vuông góc') {\r\n      calculatedLineEquation = calculatePerpendicularLineByPointAndLine(\r\n        dataViewModel.getNodeInPointsMapById(otherStaticPoint).coordinate,\r\n        staticLineEquation\r\n      );\r\n\r\n      const isInStaticLine = isIn(\r\n        dataViewModel.getNodeInPointsMapById(otherStaticPoint).coordinate,\r\n        staticLineEquation\r\n      );\r\n      const calculatedPoint = isInStaticLine\r\n        ? getRandomPointInEquation(calculatedLineEquation)\r\n        : calculateIntersectionByLineAndLine(calculatedLineEquation, staticLineEquation);\r\n\r\n      if (!isInStaticLine) {\r\n        dataViewModel.getData.pushAdditionSegment(`${point}${segmentNotIncludePoint[1]}`);\r\n        dataViewModel.getData.pushAdditionSegment(`${point}${segmentNotIncludePoint[0]}`);\r\n      }\r\n\r\n      dataViewModel.updateCoordinate(point, calculatedPoint);\r\n    }\r\n    if (relationType === 'song song') {\r\n      calculatedLineEquation = calculateParallelLineByPointAndLine(\r\n        dataViewModel.getNodeInPointsMapById(otherStaticPoint).coordinate,\r\n        staticLineEquation\r\n      );\r\n\r\n      const calculatedPoint = getRandomPointInEquation(calculatedLineEquation);\r\n\r\n      dataViewModel.updateCoordinate(point, calculatedPoint);\r\n    }\r\n    return calculatedLineEquation;\r\n  } else if (relationType === 'phân giác') {\r\n    if (relation.angle) {\r\n      const angle = relation.angle[0];\r\n      if (angle.includes(point)) {\r\n        return;\r\n      }\r\n\r\n      const staticLineEquation = getLineFromTwoPoints(\r\n        dataViewModel.getNodeInPointsMapById(angle[0]).coordinate,\r\n        dataViewModel.getNodeInPointsMapById(angle[2]).coordinate\r\n      );\r\n\r\n      const calculatedLineEquation = calculateInternalBisectLineEquation(\r\n        getLineFromTwoPoints(\r\n          dataViewModel.getNodeInPointsMapById(angle[0]).coordinate,\r\n          dataViewModel.getNodeInPointsMapById(angle[1]).coordinate\r\n        ),\r\n        getLineFromTwoPoints(\r\n          dataViewModel.getNodeInPointsMapById(angle[1]).coordinate,\r\n          dataViewModel.getNodeInPointsMapById(angle[2]).coordinate\r\n        ),\r\n        dataViewModel.getNodeInPointsMapById(angle[0]).coordinate,\r\n        dataViewModel.getNodeInPointsMapById(angle[2]).coordinate\r\n      );\r\n\r\n      const calculatedPoint = calculateIntersectionByLineAndLine(calculatedLineEquation, staticLineEquation);\r\n      dataViewModel.updateCoordinate(point, calculatedPoint);\r\n\r\n      return calculatedLineEquation;\r\n    }\r\n  }\r\n}\r\n\r\nfunction analyzeIntersectRelation(relation: mixed, point: string): CoordinateType {\r\n  for (let index in relation.segment) {\r\n    for (let i = 0; i < 2; i++) {\r\n      if (!dataViewModel.isValidCoordinate(relation.segment[index][i])) {\r\n        return;\r\n      }\r\n    }\r\n  }\r\n\r\n  if (relation.segment.length === 2) {\r\n    const calculatedLineEquationOne = getLineFromTwoPoints(\r\n      dataViewModel.getNodeInPointsMapById(relation.segment[0][0]).coordinate,\r\n      dataViewModel.getNodeInPointsMapById(relation.segment[0][1]).coordinate\r\n    );\r\n    const calculatedLineEquationTwo = getLineFromTwoPoints(\r\n      dataViewModel.getNodeInPointsMapById(relation.segment[1][0]).coordinate,\r\n      dataViewModel.getNodeInPointsMapById(relation.segment[1][1]).coordinate\r\n    );\r\n\r\n    relation.segment.forEach((segment: string) => {\r\n      dataViewModel.getData.pushAdditionSegment(`${relation.point[0]}${segment[0]}`);\r\n      dataViewModel.getData.pushAdditionSegment(`${relation.point[0]}${segment[1]}`);\r\n    });\r\n\r\n    const calculatedPoint = calculateIntersectionByLineAndLine(calculatedLineEquationOne, calculatedLineEquationTwo);\r\n    dataViewModel.updateCoordinate(relation.point[0], calculatedPoint);\r\n  } else if (relation.circle.length === 2) {\r\n    const roots = calculateIntersectionTwoCircleEquations(\r\n      dataViewModel.getCircleEquation(relation.circle[0]),\r\n      dataViewModel.getCircleEquation(relation.circle[1])\r\n    );\r\n\r\n    roots.forEach((root: CoordinateType, index: number) => {\r\n      if (!relation.point[index]) {\r\n        ErrorService.showError('500');\r\n      } else {\r\n        dataViewModel.updateCoordinate(relation.point[index], root);\r\n      }\r\n    });\r\n  } else {\r\n    const pointOne = dataViewModel.getNodeInPointsMapById(relation.segment[0][0]).coordinate;\r\n    const pointTwo = dataViewModel.getNodeInPointsMapById(relation.segment[0][1]).coordinate;\r\n    let roots = calculateIntersectionTwoCircleEquations(\r\n      getLineFromTwoPoints(pointOne, pointTwo),\r\n      dataViewModel.getCircleEquation(relation.circle[0])\r\n    );\r\n\r\n    roots = roots.filter(\r\n      (root: CoordinateType): boolean =>\r\n        JSON.stringify(root) !== JSON.stringify(pointOne) && JSON.stringify(root) !== JSON.stringify(pointTwo)\r\n    );\r\n\r\n    roots.forEach((root: CoordinateType, index: number) => {\r\n      if (!relation.point[index]) {\r\n        ErrorService.showError('500');\r\n      } else {\r\n        dataViewModel.updateCoordinate(relation.point[index], root);\r\n      }\r\n    });\r\n  }\r\n}\r\n\r\n//chỉ xử lý : = , *\r\nfunction analyzeOperationType(relation: mixed, point: string): any {\r\n  const objectType = relation.segment ? 'segment' : 'angle';\r\n  const valueData = {};\r\n\r\n  const objectsIncludePoint = [];\r\n\r\n  for (let index in relation[objectType]) {\r\n    const object = relation[objectType][index];\r\n    if (object.includes(point)) {\r\n      objectsIncludePoint.push(object);\r\n    }\r\n    let isStatic = true;\r\n    object.split('').forEach((objPoint) => {\r\n      if (objPoint !== point && !dataViewModel.isStaticNodeById(objPoint)) {\r\n        isStatic = false;\r\n      }\r\n    });\r\n\r\n    if (!isStatic) {\r\n      return;\r\n    }\r\n\r\n    valueData[object] =\r\n      objectType === 'segment'\r\n        ? calculateDistanceTwoPoints(\r\n            dataViewModel.getNodeInPointsMapById(object[0]).coordinate,\r\n            dataViewModel.getNodeInPointsMapById(object[1]).coordinate\r\n          )\r\n        : getAngleFromTwoLines(\r\n            getLineFromTwoPoints(\r\n              dataViewModel.getNodeInPointsMapById(object[0]).coordinate,\r\n              dataViewModel.getNodeInPointsMapById(object[1]).coordinate\r\n            ),\r\n            getLineFromTwoPoints(\r\n              dataViewModel.getNodeInPointsMapById(object[1]).coordinate,\r\n              dataViewModel.getNodeInPointsMapById(object[2]).coordinate\r\n            )\r\n          );\r\n  }\r\n\r\n  //điểm cần tính phụ thuộc 1 điểm duy nhất\r\n  if (objectsIncludePoint.length === 1) {\r\n    const index = relation[objectType].indexOf(objectsIncludePoint[0]);\r\n    const staticObject = relation[objectType][index === 0 ? 1 : 0];\r\n    let staticValue;\r\n    if (relation[objectType].length > 1) {\r\n      staticValue = index === 0 ? relation.value * valueData[staticObject] : valueData[staticObject] / relation.value;\r\n    } else {\r\n      staticValue = relation.value[0];\r\n    }\r\n\r\n    if (objectType === 'segment') {\r\n      return calculateCircleEquationByCenterPoint(\r\n        dataViewModel.getNodeInPointsMapById(objectsIncludePoint[0].replace(point, '')).coordinate,\r\n        staticValue\r\n      );\r\n    }\r\n\r\n    return calculateLineEquationByAngleRelation(objectsIncludePoint[0], staticValue);\r\n  }\r\n  if (objectsIncludePoint.length === 2) {\r\n    if (objectType === 'segment') {\r\n      const staticPointOne = objectsIncludePoint[0].replace(point, '');\r\n      const staticPointTwo = objectsIncludePoint[1].replace(point, '');\r\n      //cần check thêm loại shape\r\n      if (!dataViewModel.isStaticNodeById(staticPointOne) || !dataViewModel.isStaticNodeById(staticPointTwo)) {\r\n        return;\r\n      }\r\n\r\n      const staticLineEquation = getLineFromTwoPoints(\r\n        dataViewModel.getNodeInPointsMapById(staticPointOne).coordinate,\r\n        dataViewModel.getNodeInPointsMapById(staticPointTwo).coordinate\r\n      );\r\n\r\n      const staticDistance = calculateDistanceTwoPoints(\r\n        dataViewModel.getNodeInPointsMapById(staticPointOne).coordinate,\r\n        dataViewModel.getNodeInPointsMapById(staticPointTwo).coordinate\r\n      );\r\n\r\n      const isAlign = isIn(dataViewModel.getNodeInPointsMapById(point).coordinate, {\r\n        a: 0,\r\n        b: 0,\r\n        c: staticLineEquation.coefficientX,\r\n        d: staticLineEquation.coefficientY,\r\n        e: staticLineEquation.constantTerm\r\n      });\r\n\r\n      const ratio = +relation.value[0];\r\n      if (isAlign) {\r\n        let calculatedPoint;\r\n        const betweenPoint = getMiddlePointFromThreePointsInALine(\r\n          dataViewModel.getNodeInPointsMapById(point).coordinate,\r\n          dataViewModel.getNodeInPointsMapById(staticPointOne).coordinate,\r\n          dataViewModel.getNodeInPointsMapById(staticPointTwo).coordinate\r\n        );\r\n\r\n        if (betweenPoint === dataViewModel.getNodeInPointsMapById(point).coordinate) {\r\n          calculatedPoint = calculateIntersectionEquationTypeWithCircleEquation(\r\n            staticLineEquation,\r\n            calculateCircleEquationByCenterPoint(\r\n              dataViewModel.getNodeInPointsMapById(staticPointOne).coordinate,\r\n              (ratio * staticDistance) / (ratio + 1)\r\n            )\r\n          );\r\n\r\n          [...calculatedPoint].forEach((p) => {\r\n            const result = getMiddlePointFromThreePointsInALine(\r\n              p,\r\n              dataViewModel.getNodeInPointsMapById(staticPointOne).coordinate,\r\n              dataViewModel.getNodeInPointsMapById(staticPointTwo).coordinate\r\n            );\r\n            if (result === p) {\r\n              calculatedPoint = p;\r\n            }\r\n          });\r\n        }\r\n        if (betweenPoint === dataViewModel.getNodeInPointsMapById(staticPointOne).coordinate && ratio < 1) {\r\n          calculatedPoint = calculateIntersectionEquationTypeWithCircleEquation(\r\n            staticLineEquation,\r\n            calculateCircleEquationByCenterPoint(\r\n              dataViewModel.getNodeInPointsMapById(staticPointOne).coordinate,\r\n              (ratio * staticDistance) / (1 - ratio)\r\n            )\r\n          );\r\n\r\n          [...calculatedPoint].forEach((p) => {\r\n            const result = getMiddlePointFromThreePointsInALine(\r\n              p,\r\n              dataViewModel.getNodeInPointsMapById(staticPointOne).coordinate,\r\n              dataViewModel.getNodeInPointsMapById(staticPointTwo).coordinate\r\n            );\r\n            if (result === dataViewModel.getNodeInPointsMapById(staticPointOne).coordinate) {\r\n              calculatedPoint = p;\r\n            }\r\n          });\r\n        }\r\n        if (betweenPoint === dataViewModel.getNodeInPointsMapById(staticPointTwo).coordinate && ratio > 1) {\r\n          calculatedPoint = calculateIntersectionEquationTypeWithCircleEquation(\r\n            staticLineEquation,\r\n            calculateCircleEquationByCenterPoint(\r\n              dataViewModel.getNodeInPointsMapById(staticPointOne).coordinate,\r\n              (ratio * staticDistance) / (ratio - 1)\r\n            )\r\n          );\r\n\r\n          [...calculatedPoint].forEach((p) => {\r\n            const result = getMiddlePointFromThreePointsInALine(\r\n              p,\r\n              dataViewModel.getNodeInPointsMapById(staticPointOne).coordinate,\r\n              dataViewModel.getNodeInPointsMapById(staticPointTwo).coordinate\r\n            );\r\n            if (result === dataViewModel.getNodeInPointsMapById(staticPointTwo).coordinate) {\r\n              calculatedPoint = p;\r\n            }\r\n          });\r\n        }\r\n\r\n        dataViewModel.updateCoordinate(point, calculatedPoint);\r\n\r\n        return staticLineEquation;\r\n      } else {\r\n      }\r\n      return null;\r\n    }\r\n  }\r\n}\r\n\r\nfunction calculateLineEquationByAngleRelation(angleName: string, angleValue: number): EquationType {\r\n  const modifiedAngleName = renameAngle(angleName);\r\n  const staticPoint = dataViewModel.getNodeInPointsMapById(modifiedAngleName[0]).coordinate;\r\n  const rootPoint = dataViewModel.getNodeInPointsMapById(modifiedAngleName[1]).coordinate;\r\n  const changedPoint = dataViewModel.getNodeInPointsMapById(modifiedAngleName[2]).coordinate;\r\n  const calculatedEquation = calculateLinesByAnotherLineAndAngle(rootPoint, staticPoint, changedPoint, angleValue);\r\n  if (modifiedAngleName === angleName) {\r\n    return calculatedEquation;\r\n  }\r\n  const transitionVector = calculateVector(\r\n    rootPoint,\r\n    calculateIntersectionByLineAndLine(getLineFromTwoPoints(rootPoint, staticPoint), calculatedEquation),\r\n    false\r\n  );\r\n\r\n  dataViewModel.updateCoordinate(modifiedAngleName[0], {\r\n    x: staticPoint.x + transitionVector.x,\r\n    y: staticPoint.y + transitionVector.y\r\n  });\r\n\r\n  dataViewModel.replaceSetOfEquation(\r\n    modifiedAngleName[1],\r\n    getLineFromTwoPoints(rootPoint, changedPoint),\r\n    calculatedEquation\r\n  );\r\n\r\n  return null;\r\n}\r\n\r\nfunction getShapeAffectList(): Array<string> {\r\n  const shapeList = [];\r\n\r\n  //get list of shape name\r\n  dataViewModel.getData.relationsResult.shapes.forEach((shapeData: Object): boolean => {\r\n    const shapeType = Object.keys(shapeData).filter((key: string): boolean => key !== 'outputType')[0];\r\n    if (ShapeAffectBySegmentChange.includes(shapeType)) {\r\n      shapeList.push(shapeData[shapeType]);\r\n    }\r\n  });\r\n\r\n  return shapeList;\r\n}\r\n\r\nfunction renameAngle(angle: string): string {\r\n  const shapeList = getShapeAffectList();\r\n\r\n  const secondLine = `${angle[1]}${angle[2]}`;\r\n\r\n  for (let i = 0; i < shapeList.length; i++) {\r\n    const shape = shapeList[i];\r\n    const secondLineVector = calculateVector(\r\n      dataViewModel.getNodeInPointsMapById(secondLine[0]).coordinate,\r\n      dataViewModel.getNodeInPointsMapById(secondLine[1]).coordinate\r\n    );\r\n    if (\r\n      isVectorInSameLine(\r\n        calculateVector(\r\n          dataViewModel.getNodeInPointsMapById(shape[0]).coordinate,\r\n          dataViewModel.getNodeInPointsMapById(shape[1]).coordinate\r\n        ),\r\n        secondLineVector\r\n      ) ||\r\n      isVectorInSameLine(\r\n        calculateVector(\r\n          dataViewModel.getNodeInPointsMapById(shape[2]).coordinate,\r\n          dataViewModel.getNodeInPointsMapById(shape[3]).coordinate\r\n        ),\r\n        secondLineVector\r\n      )\r\n    ) {\r\n      const index = shape.indexOf(angle[1]);\r\n      const changeIndex = 0;\r\n\r\n      return angle\r\n        .split('')\r\n        .reverse()\r\n        .join('');\r\n    }\r\n  }\r\n  return angle;\r\n}\r\n\r\nfunction analyzeTangentRelation(relation: mixed, point: string): any {\r\n  const otherPointInSegment = relation.segment[0].replace(point, '');\r\n  if (!dataViewModel.isStaticNodeById(otherPointInSegment)) {\r\n    return;\r\n  }\r\n\r\n  const tangentPointCoordinate = dataViewModel.getNodeInPointsMapById(otherPointInSegment).coordinate;\r\n  const circleEquation = dataViewModel.getCircleEquation(relation.circle[0]);\r\n  let tangentEquation;\r\n  if (isIn(tangentPointCoordinate, circleEquation)) {\r\n    tangentEquation = calculateTangentEquation(circleEquation, tangentPointCoordinate);\r\n    dataViewModel.updateCoordinate(point, getRandomPointInEquation(tangentEquation));\r\n  } else {\r\n    const roots = calculateTangentIntersectPointsByPointOutsideCircle(circleEquation, tangentPointCoordinate);\r\n    const result = filterTangentPoint(roots, circleEquation);\r\n    tangentEquation = result.tangentEquation;\r\n    dataViewModel.updateCoordinate(point, result.point);\r\n  }\r\n\r\n  return tangentEquation;\r\n}\r\n\r\nfunction filterTangentPoint(\r\n  roots: Array<CoordinateType>,\r\n  circleEquation: EquationType\r\n): { equation: EquationType, point: CoordinateType } {\r\n  const filterRoots = roots.filter((root: CoordinateType): boolean => !dataViewModel.isCoordinateDuplicated(root));\r\n\r\n  return filterRoots.map((root: CoordinateType): { equation: EquationType, point: CoordinateType } => {\r\n    return {\r\n      equation: calculateTangentEquation(circleEquation, root),\r\n      point: root\r\n    };\r\n  })[getRandomValue(0, filterRoots.length - 1)];\r\n}\r\n","// @flow\r\n\r\nimport { objectWithPoint } from '../definition/define.js';\r\nimport type { DrawingDataType, NodeRelationType, NodeType } from '../../utils/types.js';\r\nimport dataViewModel from '../../ViewModel/DataViewModel';\r\nimport { readPointsMap } from './ReadPointsMap';\r\nimport { makeRoundCoordinate } from '../math/Math2D.js';\r\n\r\nlet RelationPointsMap: Array<NodeType> = [];\r\n\r\nexport function analyzeResult(validatedResult): DrawingDataType {\r\n  const shapes = validatedResult.shapes;\r\n\r\n  shapes.forEach((shape) => {\r\n    createPointsMapByShape(shape);\r\n  });\r\n\r\n  const relations = validatedResult.relations;\r\n  relations.forEach((relation) => {\r\n    createPointsMapByRelation(relation).forEach((node) => {\r\n      updateMap(node, dataViewModel.getData.getPointsMap);\r\n    });\r\n  });\r\n\r\n  trimPointsMap();\r\n\r\n  let result = {};\r\n\r\n  readPointsMap();\r\n  result.points = dataViewModel.getData.getPointsMap.map((node: NodeType) => ({\r\n    id: node.id,\r\n    coordinate: makeRoundCoordinate(node.coordinate, 3)\r\n  }));\r\n\r\n  result.segments = [...getArraySegments(validatedResult), ...dataViewModel.getData.getAdditionSegment];\r\n  return result;\r\n}\r\n\r\nfunction getArraySegments(validatedResult): Array<string> {\r\n  let result: Array<string> = [];\r\n\r\n  const shapes = validatedResult.shapes;\r\n\r\n  shapes.forEach((shape) => {\r\n    result = result.concat(getShapeSegments(shape));\r\n  });\r\n\r\n  const relations = validatedResult.relations;\r\n\r\n  relations.forEach((relation) => {\r\n    if (relation.segment) {\r\n      result = result.concat(relation.segment);\r\n    }\r\n  });\r\n\r\n  return result.filter((item, index, array) => array.indexOf(item) === index);\r\n}\r\n\r\nfunction getShapeSegments(shape: any): Array<string> {\r\n  const shapeName = Object.keys(shape).filter((key) => key !== 'type')[0];\r\n  let points = shape[shapeName].split('').filter((point) => point === point.toUpperCase());\r\n\r\n  const result = [];\r\n\r\n  for (let i = 0; i < points.length; i++) {\r\n    if (i === points.length - 1) {\r\n      result.push(points[0] + points[i]);\r\n    } else {\r\n      result.push(points[i] + points[i + 1]);\r\n    }\r\n  }\r\n\r\n  return result;\r\n}\r\n\r\nfunction trimPointsMap() {\r\n  dataViewModel.getData.setPointsMap = dataViewModel.getData.getPointsMap.map((node: NodeType): NodeType => ({\r\n    ...node,\r\n    dependentNodes: unique(node.dependentNodes)\r\n  }));\r\n}\r\n\r\nfunction unique(dependentNodes: Array<NodeRelationType>): Array<NodeRelationType> {\r\n  let result = [];\r\n\r\n  dependentNodes.forEach((node) => {\r\n    for (let i = 0; i < result.length; i++) {\r\n      if (JSON.stringify(node) === JSON.stringify(result[i])) return;\r\n    }\r\n    result.push(node);\r\n  });\r\n\r\n  return result;\r\n}\r\n\r\nfunction sortPriority(points) {\r\n  return points.sort((el1: string, el2: string): number => {\r\n    const index1 = findIndexByNodeId(el1, dataViewModel.getData.getPointsMap);\r\n    const index2 = findIndexByNodeId(el2, dataViewModel.getData.getPointsMap);\r\n\r\n    if (index1 === -1 && index2 === -1) {\r\n      return 1;\r\n    }\r\n    if (index1 >= 0 && index2 >= 0) return 1;\r\n    return index2 - index1;\r\n  });\r\n}\r\n\r\nfunction createPointsMapByShape(shape: any) {\r\n  const shapeName = Object.keys(shape).filter((key) => key !== 'type')[0];\r\n  let points = shape[shapeName].split('').filter((point) => point === point.toUpperCase());\r\n\r\n  points = sortPriority([...points]);\r\n\r\n  if (dataViewModel.getData.getPointsMap.length === 0) {\r\n    const shouldStaticPoint = getFirstStaticPointInShape(shape[shapeName]);\r\n    points = [shouldStaticPoint].concat(points.filter((point) => point !== shouldStaticPoint));\r\n  }\r\n\r\n  let objectPointsMap;\r\n  // đường tròn ngoại tiếp, nội tiếp\r\n  if (shape.point) {\r\n    objectPointsMap = points.map((point: string) => {\r\n      return createNode(shape.point[0], [{ id: point, relation: shape }]);\r\n    });\r\n  } else {\r\n    objectPointsMap = points.map((point: string, index: number) => {\r\n      return index !== 0 ? createNode(point, [{ id: points[0], relation: shape }]) : createNode(point);\r\n    });\r\n  }\r\n  objectPointsMap.forEach((node: NodeType) => {\r\n    updateMap(node, dataViewModel.getData.getPointsMap);\r\n  });\r\n}\r\n\r\nfunction getFirstStaticPointInShape(shape: string): string {\r\n  const angles = [];\r\n  if (dataViewModel.getData.getRelationsResult.relations) {\r\n    dataViewModel.getData.getRelationsResult.relations.forEach((relation) => {\r\n      if (!relation.angle) {\r\n        return;\r\n      }\r\n      angles.push(relation.angle[0]);\r\n    });\r\n\r\n    const shapePointCount = {};\r\n\r\n    angles.forEach((angle: string): void => {\r\n      angle.split('').forEach((point, index) => {\r\n        //don't check middle point\r\n        if (index !== 1) {\r\n          if (shapePointCount[point]) {\r\n            shapePointCount[point] += 1;\r\n          } else {\r\n            shapePointCount[point] = 1;\r\n          }\r\n        }\r\n      });\r\n    });\r\n\r\n    let minCountPoint = shape[0];\r\n    Object.keys(shapePointCount).forEach((point) => {\r\n      if (shapePointCount[point] < shapePointCount[minCountPoint]) {\r\n        minCountPoint = point;\r\n      }\r\n    });\r\n\r\n    return minCountPoint;\r\n  }\r\n  return shape[0];\r\n}\r\n\r\nfunction createPointsMapByRelation(relation: any) {\r\n  RelationPointsMap = [];\r\n  objectWithPoint.forEach((objectType: string) => {\r\n    if (relation[objectType]) {\r\n      relation[objectType].forEach((object) => {\r\n        let points = object.split('').filter((point) => point === point.toUpperCase());\r\n\r\n        points = sortPriority([...points]);\r\n\r\n        const objectPointsMap = points.map((point: string, index: number) => {\r\n          return index === points.length - 1\r\n            ? createNode(point, createDependentNodeOfObject(objectType, object, points))\r\n            : createNode(point);\r\n        });\r\n\r\n        objectPointsMap.forEach((node: NodeType) => {\r\n          updateMap(node, RelationPointsMap);\r\n        });\r\n      });\r\n    }\r\n  });\r\n\r\n  RelationPointsMap = [...RelationPointsMap].sort((nodeOne: NodeType, nodeTwo: NodeType): number => {\r\n    const index1 = findIndexByNodeId(nodeOne.id, dataViewModel.getData.getPointsMap);\r\n    const index2 = findIndexByNodeId(nodeTwo.id, dataViewModel.getData.getPointsMap);\r\n    if (index1 === -1 && index2 === -1) return 1;\r\n    if (index1 >= 0 && index2 >= 0) return index1 - index2;\r\n    return index2 - index1;\r\n  });\r\n\r\n  let lastObjectPoints;\r\n\r\n  if (relation.angle && relation.outputType === 'define' && !!relation.value) {\r\n    const index1 = findIndexByNodeId(relation.angle[0][0], dataViewModel.getData.getPointsMap);\r\n    const index2 = findIndexByNodeId(relation.angle[0][2], dataViewModel.getData.getPointsMap);\r\n    lastObjectPoints = [index1 > index2 ? relation.angle[0][0] : relation.angle[0][2]];\r\n  } else {\r\n    lastObjectPoints = getDependentObject();\r\n  }\r\n  if (lastObjectPoints.length === RelationPointsMap.length) {\r\n    lastObjectPoints = [lastObjectPoints[0]];\r\n  }\r\n\r\n  lastObjectPoints.forEach((point) => {\r\n    const index = findIndexByNodeId(point, RelationPointsMap);\r\n    const currentNode = RelationPointsMap[index];\r\n    RelationPointsMap.forEach((node) => {\r\n      if (node.id !== point) {\r\n        RelationPointsMap[index] = {\r\n          ...currentNode,\r\n          dependentNodes: [\r\n            ...currentNode.dependentNodes,\r\n            ...createDependentNodeOfRelation(node.id, relation, lastObjectPoints)\r\n          ]\r\n        };\r\n      }\r\n    });\r\n  });\r\n\r\n  return RelationPointsMap;\r\n}\r\n\r\nfunction getDependentObject(): Array<string> {\r\n  let result: Array = [];\r\n  const lastNode = RelationPointsMap[RelationPointsMap.length - 1];\r\n  if (lastNode) {\r\n    result.push(lastNode.id);\r\n\r\n    lastNode.dependentNodes.forEach((node) => {\r\n      const nodeIndex = findIndexByNodeId(node.id, dataViewModel.getData.getPointsMap);\r\n      if (!result.includes(node.id) && nodeIndex !== -1 && !dataViewModel.getData.getPointsMap[nodeIndex].isStatic)\r\n        result.push(node.id);\r\n    });\r\n  }\r\n  return result;\r\n}\r\n\r\nfunction findIndexByNodeId(id: string, map: Array<NodeType | NodeRelationType>): number {\r\n  for (let i = 0; i < map.length; i++) {\r\n    if (map[i].id === id) return i;\r\n  }\r\n  return -1;\r\n}\r\n\r\nfunction createDependentNodeOfRelation(\r\n  point: string,\r\n  relation: any,\r\n  exception: Array<string>\r\n): Array<NodeRelationType> {\r\n  const result: Array<NodeRelationType> = [];\r\n  RelationPointsMap.forEach((node: NodeType) => {\r\n    if (exception.includes(node.id)) return;\r\n    result.push({ id: node.id, relation });\r\n  });\r\n\r\n  return result;\r\n}\r\n\r\nfunction createDependentNodeOfObject(\r\n  objectType: string,\r\n  objectName: string,\r\n  points: Array<string>\r\n): Array<NodeRelationType> {\r\n  const result: Array<NodeRelationType> = [];\r\n  let relation = {};\r\n  relation[objectType] = objectName;\r\n\r\n  points.forEach((point: string, index: number) => {\r\n    if (index === points.length - 1) return;\r\n    result.push({ id: point, relation });\r\n  });\r\n\r\n  return result;\r\n}\r\n\r\nfunction createNode(id: string, dependentNodes?: Array<NodeRelationType>): any {\r\n  const node = { id, coordinate: { x: undefined, y: undefined, z: 0 }, isStatic: false };\r\n  const _dependentNodes = dependentNodes ? { dependentNodes } : { dependentNodes: [] };\r\n\r\n  return { ...node, ..._dependentNodes };\r\n}\r\n\r\nfunction updateMap(node: NodeType, map: Array<NodeType>) {\r\n  const index = findIndexByNodeId(node.id, map);\r\n  if (index !== -1) {\r\n    //merge dependentNodes\r\n    const oldNode = map[index];\r\n    map[index] = {\r\n      ...oldNode,\r\n      dependentNodes: [...oldNode.dependentNodes, ...node.dependentNodes]\r\n    };\r\n  } else {\r\n    map.push(node);\r\n    if (dataViewModel.getData.getPointsMap.length === 1) map[0].isStatic = true;\r\n  }\r\n}\r\n","// @flow\r\nimport { observable } from 'mobx';\r\nimport GConst from '../utils/values';\r\n\r\nexport default class RelationInputModel {\r\n  @observable\r\n  value: string = '';\r\n\r\n  @observable\r\n  status: string = GConst.InputStatus.NORMAL;\r\n\r\n  constructor(value: string) {\r\n    this.value = value;\r\n  }\r\n}\r\n","// @flow\r\n\r\nimport appData from '../Model/AppData';\r\nimport type { EquationType, PointDetailsType } from '../utils/types';\r\nimport { NodeType } from '../utils/types';\r\nimport GConst from '../utils/values.js';\r\nimport { calculateIntersectionTwoCircleEquations, isIn, makeRoundCoordinate } from '../core/math/Math2D.js';\r\nimport { isQuadraticEquation } from '../utils/checker.js';\r\nimport { defineSentences } from '../core/definition/define';\r\nimport { defineInformation } from '../core/definition';\r\nimport { analyzeResult } from '../core/analysis/Analysis';\r\nimport RelationInputModel from '../Model/RelationInputModel';\r\nimport { observable, action, computed } from 'mobx';\r\nimport ErrorService from '../utils/ErrorHandleService';\r\nimport { observer } from 'mobx-react';\r\nimport autobind from 'autobind-decorator';\r\nimport { isTwoEquationEqual } from '../core/math/Math2D';\r\nimport { getRandomValue } from '../core/math/Generation';\r\n\r\nconst NOT_FOUND = GConst.Number.NOT_FOUND;\r\nconst NOT_ENOUGH_SET = GConst.String.NOT_ENOUGH_SET;\r\n\r\nclass DataViewModel {\r\n  @observable\r\n  circlesData = {};\r\n\r\n  @observable\r\n  relationsInput: Array<RelationInputModel>;\r\n\r\n  inputData: Array<mixed> = [];\r\n\r\n  executedInputIndex: number;\r\n\r\n  @observable\r\n  executingRelation: mixed;\r\n\r\n  constructor(appData) {\r\n    this.data = appData;\r\n    this.relationsInput = [\r\n      new RelationInputModel('')\r\n    ];\r\n  }\r\n\r\n  @computed\r\n  get RelationsInput() {\r\n    return this.relationsInput;\r\n  }\r\n\r\n  @computed\r\n  get isInputEmpty(): boolean {\r\n    if (this.relationsInput.length === 1 && !this.relationsInput[0].value) {\r\n      return true;\r\n    }\r\n    return false;\r\n  }\r\n\r\n  @action\r\n  resetInputsStatus() {\r\n    this.relationsInput.forEach((input: RelationInputModel) => {\r\n      input.status = GConst.InputStatus.NORMAL;\r\n    });\r\n  }\r\n\r\n  @action\r\n  onInputChange(value: string, index: number) {\r\n    const newRelationInput = { ...this.relationsInput[index] };\r\n    newRelationInput.value = value;\r\n    this.relationsInput[index] = newRelationInput;\r\n    this.resetInputsStatus();\r\n  }\r\n\r\n  @action\r\n  addNewInput() {\r\n    this.relationsInput.push(new RelationInputModel(''));\r\n  }\r\n\r\n  @action\r\n  removeInput(index: number) {\r\n    this.relationsInput.splice(index, 1);\r\n  }\r\n\r\n  clear() {\r\n    this.data.clear();\r\n  }\r\n\r\n  get getData() {\r\n    return this.data;\r\n  }\r\n\r\n  createPointDetails() {\r\n    this.data.getPointsMap.forEach((node) => {\r\n      const roots = this.isValidCoordinate(node.coordinate) ? [node.coordinate] : [];\r\n      this._updatePointDetails(node.id, {\r\n        setOfEquation: [],\r\n        roots: roots,\r\n        exceptedCoordinates: []\r\n      });\r\n    });\r\n  }\r\n\r\n  isNeedRandomCoordinate = (pointId: string): boolean => {\r\n    const roots = this.data.getPointDetails.get(pointId).roots;\r\n    if (roots) {\r\n      for (let i = 0; i < roots.length; i++) {\r\n        if (\r\n          this.data.getPointDirectionMap[pointId] ||\r\n          JSON.stringify(makeRoundCoordinate(roots[i])) ===\r\n            JSON.stringify(makeRoundCoordinate(this.getNodeInPointsMapById(pointId).coordinate))\r\n        ) {\r\n          return false;\r\n        }\r\n      }\r\n      return true;\r\n    }\r\n    return false;\r\n  };\r\n\r\n  updateCoordinate = (nodeId: string, coordinate: CoordinateType, f: number = 3): void => {\r\n    const index = this.getIndexOfNodeInPointsMapById(nodeId);\r\n    const _coordinate = {};\r\n    Object.keys(coordinate)\r\n      .sort()\r\n      .forEach((key: string) => {\r\n        _coordinate[key] = coordinate[key];\r\n      });\r\n    if (index !== NOT_FOUND) {\r\n      this.data.getPointsMap[index].coordinate = makeRoundCoordinate(_coordinate, f);\r\n    }\r\n  };\r\n\r\n  isStaticNode = (node: NodeType): boolean => {\r\n    if (node.isStatic) return true;\r\n    for (let i = 0; i < node.dependentNodes.length; i++) {\r\n      if (!this.isExecutedRelation(node.dependentNodes[i].relation)) return false;\r\n    }\r\n\r\n    return this.data.getExecutedNode.includes(node.id);\r\n  };\r\n\r\n  isExecutedRelation = (relation: any): boolean => {\r\n    for (let i = 0; i < this.data.getExecutedRelations.length; i++) {\r\n      if (relation === this.data.getExecutedRelations[i]) return true;\r\n    }\r\n    return false;\r\n  };\r\n\r\n  updateStaticNode = () => {\r\n    const pointsMap = this.data.getPointsMap.map((node: NodeType): NodeType => {\r\n      node.isStatic = this.isStaticNode(node);\r\n      return node;\r\n    });\r\n    this.data.setPointsMap = pointsMap;\r\n  };\r\n\r\n  updatePointsMap = (node: NodeType) => {\r\n    let index = this.getIndexOfNodeInPointsMapById(node.id);\r\n    this.data.getPointsMap[index] = node;\r\n  };\r\n\r\n  isPointsMapStatic = (): boolean => {\r\n    for (let i = 0; i < this.data.getPointsMap.length; i++) {\r\n      if (!this.data.getPointsMap[i].isStatic) return false;\r\n    }\r\n    return true;\r\n  };\r\n\r\n  isValidCoordinate = (nodeId: string) => {\r\n    if (nodeId) {\r\n      const node = this.getNodeInPointsMapById(nodeId);\r\n      if (node) {\r\n        return node.coordinate.x !== undefined && node.coordinate.y !== undefined;\r\n      }\r\n    }\r\n    return false;\r\n  };\r\n\r\n  getNextExecuteNode = (): NodeType => {\r\n    const clonePointsMap = [...this.data.pointsMap]\r\n      .filter((node) => !this.data.executedNode.includes(node.id))\r\n      .sort(this.sortNodeByPriority);\r\n\r\n    if (clonePointsMap.length > 0) return clonePointsMap[0];\r\n    return null;\r\n  };\r\n\r\n  sortNodeByPriority = (nodeOne: NodeType, nodeTwo: NodeType): number => {\r\n    const staticNodeOneCount = this.getDependentStaticNodeCount(nodeOne);\r\n    const nodeOneData = {\r\n      static: staticNodeOneCount,\r\n      nonStatic: nodeOne.dependentNodes.length - staticNodeOneCount,\r\n      dependence: nodeOne.dependentNodes.length,\r\n      minRelationIndex: this.getMinIndexOfDependentNodeInRelationsList(nodeOne),\r\n      index: this.getIndexOfNodeInPointsMap(nodeOne)\r\n    };\r\n\r\n    const staticNodeTwoCount = this.getDependentStaticNodeCount(nodeTwo);\r\n    const nodeTwoData = {\r\n      static: staticNodeTwoCount,\r\n      nonStatic: nodeTwo.dependentNodes.length - staticNodeTwoCount,\r\n      dependence: nodeTwo.dependentNodes.length,\r\n      minRelationIndex: this.getMinIndexOfDependentNodeInRelationsList(nodeTwo),\r\n      index: this.getIndexOfNodeInPointsMap(nodeTwo)\r\n    };\r\n\r\n    //get Max\r\n    const rankingOrderDesc = ['static', 'dependence'];\r\n\r\n    //get Min\r\n    const rankingOrderAsc = ['nonStatic', 'minRelationIndex', 'index'];\r\n\r\n    let rankOne = nodeOneData.static === nodeOneData.dependence ? '1' : '0';\r\n    let rankTwo = nodeTwoData.static === nodeTwoData.dependence ? '1' : '0';\r\n\r\n    rankingOrderDesc.forEach((key) => {\r\n      if (nodeOneData[key] > nodeTwoData[key]) {\r\n        rankOne += '1';\r\n        rankTwo += '0';\r\n      } else if (nodeOneData[key] === nodeTwoData[key]) {\r\n        rankOne += '1';\r\n        rankTwo += '1';\r\n      } else {\r\n        rankOne += '0';\r\n        rankTwo += '1';\r\n      }\r\n    });\r\n\r\n    rankingOrderAsc.forEach((key) => {\r\n      if (nodeOneData[key] < nodeTwoData[key]) {\r\n        rankOne += '1';\r\n        rankTwo += '0';\r\n      } else if (nodeOneData[key] === nodeTwoData[key]) {\r\n        rankOne += '1';\r\n        rankTwo += '1';\r\n      } else {\r\n        rankOne += '0';\r\n        rankTwo += '1';\r\n      }\r\n    });\r\n\r\n    return parseInt(rankTwo) - parseInt(rankOne);\r\n  };\r\n\r\n  getMinIndexOfDependentNodeInRelationsList = (node: NodeType) => {\r\n    const indexArray = [];\r\n    for (let i = 0; i < node.dependentNodes.length; i++) {\r\n      indexArray.push(this.getIndexOfRelationInRelationsList(node.dependentNodes[i]));\r\n    }\r\n\r\n    return Math.min(...indexArray);\r\n  };\r\n\r\n  getIndexOfRelationInRelationsList = (relation: any): number => {\r\n    const list = this.data.getRelationsResult.shapes.concat(this.data.getRelationsResult.relations);\r\n    for (let i = 0; i < list.length; i++) {\r\n      if (relation === list[i]) return i;\r\n    }\r\n    return NOT_FOUND;\r\n  };\r\n\r\n  getDependentStaticNodeCount = (node: NodeType): number => {\r\n    let count = 0;\r\n    for (let i = 0; i < node.dependentNodes.length; i++) {\r\n      if (this.isStaticNodeById(node.dependentNodes[i].id)) count++;\r\n    }\r\n\r\n    return count;\r\n  };\r\n\r\n  getIndexOfNodeInPointsMap = (node): number => {\r\n    for (let i = 0; i < this.data.getPointsMap.length; i++) {\r\n      if (node === this.data.getPointsMap[i]) return i;\r\n    }\r\n    return NOT_FOUND;\r\n  };\r\n\r\n  getIndexOfNodeInPointsMapById = (id: string): number => {\r\n    for (let i = 0; i < this.data.getPointsMap.length; i++) {\r\n      if (id === this.data.getPointsMap[i].id) return i;\r\n    }\r\n    return NOT_FOUND;\r\n  };\r\n\r\n  getNodeInPointsMapById = (id: string): NodeType | null => {\r\n    for (let i = 0; i < this.data.getPointsMap.length; i++) {\r\n      if (id === this.data.getPointsMap[i].id) return this.data.getPointsMap[i];\r\n    }\r\n    return null;\r\n  };\r\n\r\n  isStaticNodeById = (id: string): boolean => {\r\n    for (let i = 0; i < this.data.getPointsMap.length; i++) {\r\n      if (id === this.data.getPointsMap[i].id) {\r\n        return this.isStaticNode(this.data.getPointsMap[i]);\r\n      }\r\n    }\r\n    return false;\r\n  };\r\n\r\n  _calculateSet = (equations: Array<EquationType>) => {\r\n    if (equations.length === 2) {\r\n      return calculateIntersectionTwoCircleEquations(equations[0], equations[1]);\r\n    } else return NOT_ENOUGH_SET;\r\n  };\r\n\r\n  replaceSetOfEquation(pointId: string, searchEquation: EquationType, replaceEquation: EquationType) {\r\n    const pointDetail = this.data.getPointDetails.get(pointId);\r\n    const setOfEquation = pointDetail.setOfEquation;\r\n    let isReplaceComplete = false;\r\n    setOfEquation.forEach((equation: EquationType, index: numer) => {\r\n      if (isTwoEquationEqual(equation, searchEquation)) {\r\n        setOfEquation[index] = replaceEquation;\r\n        isReplaceComplete = true;\r\n      }\r\n    });\r\n    if (!isReplaceComplete) {\r\n      setOfEquation.push(replaceEquation);\r\n    }\r\n\r\n    const roots = this._calculateSet(setOfEquation);\r\n    this.data.getPointDetails.set(pointId, {\r\n      ...pointDetail,\r\n      setOfEquation,\r\n      roots\r\n    });\r\n\r\n    if (roots.length > 0) {\r\n      let coordinate;\r\n      if (dataViewModel.isNeedRandomCoordinate(pointId)) {\r\n        coordinate = roots[getRandomValue(0, roots.length)];\r\n      } else {\r\n        const nodeDirectionInfo = dataViewModel.getData.getPointDirectionMap[pointId];\r\n        const staticPointCoordinate = dataViewModel.getNodeInPointsMapById(nodeDirectionInfo.root).coordinate;\r\n        if (roots.length > 1 && typeof roots !== 'string') {\r\n          const rootsDirection = roots.map((root) => ({\r\n            coordinate: root,\r\n            isRight: root.x > staticPointCoordinate.x,\r\n            isUp: root.y < staticPointCoordinate.y\r\n          }));\r\n\r\n          const coordinateMatch = rootsDirection\r\n            .map((directionInfo) => {\r\n              let matchCount = 0;\r\n              if (directionInfo.isRight === nodeDirectionInfo.isRight) {\r\n                matchCount++;\r\n              }\r\n              if (directionInfo.isUp === nodeDirectionInfo.isUp) {\r\n                matchCount++;\r\n              }\r\n              return {\r\n                coordinate: directionInfo.coordinate,\r\n                matchCount\r\n              };\r\n            })\r\n            .sort((a, b) => b.matchCount - a.matchCount)[0];\r\n\r\n          coordinate = coordinateMatch.coordinate;\r\n        } else {\r\n          if (typeof roots === 'string') {\r\n            return;\r\n          }\r\n          coordinate = roots[0];\r\n        }\r\n      }\r\n      dataViewModel.updateCoordinate(pointId, coordinate);\r\n    }\r\n  }\r\n\r\n  _updatePointDetails(pointId: string, pointDetails: PointDetailsType) {\r\n    this.data.getPointDetails.set(pointId, {\r\n      setOfEquation: pointDetails.setOfEquation,\r\n      roots: pointDetails.roots,\r\n      exceptedCoordinates: pointDetails.exceptedCoordinates\r\n    });\r\n  }\r\n\r\n  uniqueSetOfEquation(equations: any[]): any[] {\r\n    let result = [];\r\n\r\n    equations.forEach((equation) => {\r\n      for (let i = 0; i < result.length; i++) {\r\n        if (JSON.stringify(equation) === JSON.stringify(result[i])) return;\r\n      }\r\n      result.push(equation);\r\n    });\r\n\r\n    return result;\r\n  }\r\n\r\n  executePointDetails(pointId: string, equation: EquationType) {\r\n    let isFirst = false;\r\n    if (!this.data.getPointDetails.has(pointId)) {\r\n      this._updatePointDetails(pointId, {\r\n        setOfEquation: [],\r\n        roots: [],\r\n        exceptedCoordinates: []\r\n      });\r\n    }\r\n\r\n    if (this.data.getPointDetails.get(pointId).setOfEquation.length <= 1) {\r\n      this._updatePointDetails(pointId, {\r\n        setOfEquation: [...this.data.getPointDetails.get(pointId).setOfEquation, equation],\r\n        roots: this.data.getPointDetails.get(pointId).roots,\r\n        exceptedCoordinates: this.data.getPointDetails.get(pointId).exceptedCoordinates\r\n      });\r\n      isFirst = true;\r\n    }\r\n\r\n    if (this.data.getPointDetails.get(pointId).setOfEquation.length === 2) {\r\n      if (isQuadraticEquation(equation) && !isFirst) {\r\n        for (let i = 0; i < 2; i++) {\r\n          if (!isQuadraticEquation(this.data.getPointDetails.get(pointId).setOfEquation[i])) {\r\n            this.data.getPointDetails.get(pointId).setOfEquation[i] = equation;\r\n            break;\r\n          }\r\n        }\r\n      }\r\n\r\n      const roots = this._calculateSet(this.data.getPointDetails.get(pointId).setOfEquation);\r\n      const currentRoots = this.data.getPointDetails.get(pointId).roots;\r\n\r\n      const finalRoots = typeof roots === 'string' ? currentRoots : currentRoots.concat(roots);\r\n      this._updatePointDetails(pointId, {\r\n        setOfEquation: this.data.getPointDetails.get(pointId).setOfEquation,\r\n        roots: finalRoots,\r\n        exceptedCoordinates: this.data.getPointDetails.get(pointId).exceptedCoordinates\r\n      });\r\n    }\r\n\r\n    let temp = this.data.getPointDetails.get(pointId).roots;\r\n    const tempLength = temp.length;\r\n\r\n    if (typeof temp === 'string') {\r\n      ErrorService.showError('500');\r\n      return;\r\n    }\r\n    temp = temp.filter((root) => {\r\n      return isIn(root, equation);\r\n    });\r\n\r\n    if (temp.length < tempLength) {\r\n      // TODO: Add exception\r\n      this._updatePointDetails(pointId, {\r\n        setOfEquation: this.data.getPointDetails.get(pointId).setOfEquation,\r\n        roots: temp,\r\n        exceptedCoordinates: this.data.getPointDetails.get(pointId).exceptedCoordinates\r\n      });\r\n    }\r\n  }\r\n\r\n  getInformation(string: string): mixed {\r\n    const _string = '_ '.concat(string.concat(' _'));\r\n    let isMatching = false;\r\n    let preProgress = [];\r\n    Object.keys(defineSentences).forEach((key) => {\r\n      defineSentences[key].forEach((sentence) => {\r\n        sentence = '_ '.concat(sentence.concat(' _'));\r\n\r\n        if (isMatching) return;\r\n        const value = this.getBasicInformation(_string, sentence, key);\r\n        if (Object.keys(value).length > 0) {\r\n          isMatching = true;\r\n          preProgress = value;\r\n          preProgress['outputType'] = key;\r\n        }\r\n      });\r\n    });\r\n    const type = preProgress.outputType;\r\n\r\n    const result = defineInformation(preProgress);\r\n    if (result.Error || !result.outputType) {\r\n      ErrorService.showError('300');\r\n      return;\r\n    }\r\n    if (result.point && result.point.length > 3) {\r\n      ErrorService.showError('301');\r\n      return;\r\n    }\r\n\r\n    // add operation for define type\r\n    if (type === 'define') {\r\n      GConst.Others.OPERATIONS.forEach((operation) => {\r\n        if (result.operation) return;\r\n        if (string.includes(operation)) {\r\n          result.operation = operation;\r\n          if (operation === '=' && !result.value) {\r\n            result.value = '1';\r\n            result.operation = '*';\r\n          }\r\n        }\r\n      });\r\n    }\r\n    return result;\r\n  }\r\n\r\n  getBasicInformation(string, _defineSentence, type) {\r\n    let others = _defineSentence.match(new RegExp(GConst.Regex.OTHER, 'g'));\r\n    let params = _defineSentence.match(new RegExp(GConst.Regex.KEY, 'g'));\r\n\r\n    let result = {};\r\n\r\n    params.forEach((key) => {\r\n      result[key] = [];\r\n    });\r\n\r\n    for (let i = 0; i < params.length; i++) {\r\n      let start =\r\n        others[i]\r\n          .replace('+', '\\\\+')\r\n          .replace('-', '\\\\-')\r\n          .replace('*', '\\\\*') || '';\r\n      let end =\r\n        others[i + 1]\r\n          .replace('+', '\\\\+')\r\n          .replace('-', '\\\\-')\r\n          .replace('*', '\\\\*') || '';\r\n\r\n      let param = string.match(new RegExp(start + '(.*)' + end));\r\n\r\n      if (param) result[params[i]].push(param[1]);\r\n\r\n      if (i === others.length - 1) {\r\n        let lastParam = string.match(new RegExp(end + '(.*)'));\r\n        if (lastParam) result[params[i + 1]].push(lastParam[1]);\r\n      }\r\n    }\r\n\r\n    if (this.getLength(result) === params.length) {\r\n      if (type === 'relation') result[type] = others[1].replace('_', '').trim();\r\n      return result;\r\n    }\r\n\r\n    return [];\r\n  }\r\n\r\n  getLength(dictionary) {\r\n    let count = 0;\r\n    Object.keys(dictionary).forEach((key) => {\r\n      count += dictionary[key].length;\r\n    });\r\n    return count;\r\n  }\r\n\r\n  getCircleEquation(centerId: string): EquationType {\r\n    return this.circlesData[centerId].equation;\r\n  }\r\n\r\n  getCircleCenterCoordinate(centerId: string): CoordinateType {\r\n    return this.circlesData[centerId].coordinate;\r\n  }\r\n\r\n  isCoordinateDuplicated(coordinate: CoordinateType): boolean {\r\n    const stringifyCoordinate = JSON.stringify(coordinate);\r\n    let result = false;\r\n    this.getData.pointsMap.forEach((node: NodeType) => {\r\n      const key = node.id;\r\n      if (result) {\r\n        return;\r\n      }\r\n      if (JSON.stringify(stringifyCoordinate) === JSON.stringify(this.getNodeInPointsMapById(key).coordinate)) {\r\n        result = true;\r\n      }\r\n    });\r\n\r\n    return result;\r\n  }\r\n\r\n  analyzeInput() {\r\n    this.circlesData = {};\r\n    const data = this.RelationsInput.map((relationsInput: RelationInputModel): string => relationsInput.value)\r\n      // eslint-disable-next-line no-control-getBasicInformation\r\n      .filter((sentence) => !!sentence)\r\n      .map((sentence: string, index: number) => {\r\n        this.executedInputIndex = index;\r\n        const result = this.getInformation(sentence);\r\n        this.relationsInput[index].status = GConst.InputStatus.SUCCESS;\r\n        this.inputData.push(result);\r\n        return result;\r\n      });\r\n\r\n    let result = {\r\n      shapes: [],\r\n      relations: []\r\n    };\r\n    for (let i = 0; i < data.length; i++) {\r\n      let item = data[i];\r\n\r\n      if (item.outputType === 'shape') {\r\n        result.shapes.push(item);\r\n      } else {\r\n        result.relations.push(item);\r\n      }\r\n    }\r\n\r\n    this.data.setRelationsResult = result;\r\n\r\n    this.RelationsInput.forEach((input: RelationInputModel) => {\r\n      input.status = GConst.InputStatus.SUCCESS;\r\n    });\r\n    return analyzeResult(result);\r\n  }\r\n}\r\n\r\nconst dataViewModel = new DataViewModel(appData);\r\n\r\nexport default dataViewModel;\r\n","// @flow\r\n\r\nimport * as React from 'react';\r\nimport './InputItem.scss';\r\nimport { Icon } from '../index';\r\nimport color from '../../../utils/color.scss';\r\nimport autobind from 'autobind-decorator';\r\ntype PropsType = {\r\n  value: string,\r\n  status: string,\r\n  onValueChange: void,\r\n  onSubmit: void,\r\n  onBackspace: void\r\n};\r\n\r\ntype StateType = {\r\n  shouldRemove: boolean\r\n};\r\n\r\nconst KEYCODE = Object.freeze({\r\n  BACKSPACE: 8,\r\n  ENTER: 13\r\n});\r\n\r\nclass InputItem extends React.Component<PropsType> {\r\n  constructor(props: PropsType) {\r\n    super(props);\r\n    this.state = {\r\n      shouldRemove: true,\r\n      isEmpty: true\r\n    };\r\n  }\r\n  inputRef: ReactRefs = React.createRef();\r\n\r\n  focus() {\r\n    if (this.inputRef.current) {\r\n      this.inputRef.current.focus();\r\n    }\r\n  }\r\n\r\n  @autobind\r\n  onChange(e: React.FormEvent<HTMLInputElement>) {\r\n    const value = e.currentTarget.value;\r\n    const { onValueChange } = this.props;\r\n\r\n    if (value.length === 0) {\r\n      if (!this.state.isEmpty) {\r\n        this.setState({ isEmpty: true });\r\n      }\r\n    } else {\r\n      this.setState({\r\n        isEmpty: false,\r\n        shouldRemove: false\r\n      });\r\n    }\r\n    if (onValueChange) {\r\n      onValueChange(value);\r\n    }\r\n  }\r\n\r\n  @autobind\r\n  onKeyUp(e: React.KeyboardEvent<FormControl>) {\r\n    const { onBackspace, onSubmit, value } = this.props;\r\n\r\n    if (e.keyCode === KEYCODE.ENTER) {\r\n      if (onSubmit) {\r\n        onSubmit();\r\n      }\r\n    } else if (e.keyCode === KEYCODE.BACKSPACE) {\r\n      if (this.state.isEmpty && !this.state.shouldRemove) {\r\n        this.setState({\r\n          shouldRemove: true\r\n        });\r\n        return;\r\n      }\r\n      if (onBackspace) {\r\n        onBackspace();\r\n      }\r\n    }\r\n  }\r\n\r\n  render(): React.Node {\r\n    const { status, value } = this.props;\r\n    return (\r\n      <div className=\"input-item\">\r\n        <div className=\"input-group input-container\">\r\n          <div className=\"input-group-prepend input-status\">\r\n            <span className={`input-group-text ${status.toLowerCase()}`} id=\"basic-addon1\">\r\n              <Icon width={15} height={15} name={`input${status}`} color={color[`input${status}`]} />\r\n            </span>\r\n          </div>\r\n          <input\r\n            type=\"text\"\r\n            ref={this.inputRef}\r\n            onChange={this.onChange}\r\n            onKeyUp={this.onKeyUp}\r\n            value={value}\r\n            className={`form-control ${status.toLowerCase()}`}\r\n            aria-describedby=\"basic-addon1\"\r\n          />\r\n        </div>\r\n      </div>\r\n    );\r\n  }\r\n}\r\n\r\nexport default InputItem;\r\n","// @flow\r\n\r\nimport * as React from 'react';\r\nimport { inputSuccess, inputError, inputNormal, icInformation, icRemove, icEdit, icAdd } from './Svg';\r\n\r\ntype PropsType = {\r\n  name: string,\r\n  color: string,\r\n  width: number,\r\n  height: number\r\n};\r\n\r\nconst iconList = {\r\n  inputSuccess,\r\n  inputError,\r\n  inputNormal,\r\n  icInformation,\r\n  icRemove,\r\n  icEdit,\r\n  icAdd\r\n};\r\n\r\nexport default class Icon extends React.Component<PropsType> {\r\n  render(): React.Node {\r\n    const { name, width, height, color } = this.props;\r\n    const icon = iconList[name];\r\n    return (\r\n      <svg width={width} height={height} viewBox={icon.viewBox}>\r\n        {icon.svg({ color })}\r\n      </svg>\r\n    );\r\n  }\r\n}\r\n","import React from 'react';\r\n\r\nexport const inputSuccess = {\r\n  svg: (props): React.Node => (\r\n    <path\r\n      fill={props.color}\r\n      d=\"M337.222 22.952c-15.912-8.568-33.66 7.956-44.064 17.748-23.867 23.256-44.063 50.184-66.708 74.664-25.092 26.928-48.348 53.856-74.052 80.173-14.688 14.688-30.6 30.6-40.392 48.96-22.032-21.421-41.004-44.677-65.484-63.648C28.774 167.385-.602 157.593.01 190.029c1.224 42.229 38.556 87.517 66.096 116.28 11.628 12.24 26.928 25.092 44.676 25.704 21.42 1.224 43.452-24.48 56.304-38.556 22.645-24.48 41.005-52.021 61.812-77.112 26.928-33.048 54.468-65.485 80.784-99.145 16.524-20.808 68.544-72.217 27.54-94.248zM26.937 187.581c-.612 0-1.224 0-2.448.611-2.448-.611-4.284-1.224-6.732-2.448 1.836-1.224 4.896-.612 9.18 1.837z\"\r\n    />\r\n  ),\r\n  viewBox: '0 0 352.62 352.62'\r\n};\r\n\r\nexport const inputError = {\r\n  svg: (props): React.Node => (\r\n    <path\r\n      fill={props.color}\r\n      d=\"M285.368 234.691L459.36 60.697c13.895-13.88 13.895-36.395 0-50.275-13.881-13.895-36.38-13.895-50.275 0L235.091 184.416 61.082 10.421c-13.866-13.895-36.395-13.895-50.275 0-13.88 13.881-13.88 36.395 0 50.275l174.01 173.995L10.421 409.085c-13.895 13.895-13.895 36.395 0 50.275 6.94 6.955 16.043 10.425 25.145 10.425 9.088 0 18.19-3.47 25.132-10.425L235.09 284.967l173.995 173.995c6.955 6.94 16.043 10.425 25.145 10.425 9.088 0 18.19-3.485 25.131-10.425 13.895-13.88 13.895-36.38 0-50.275L285.367 234.691z\"\r\n    />\r\n  ),\r\n  viewBox: '0 0 469.785 469.785'\r\n};\r\n\r\nexport const inputNormal = {\r\n  svg: (props): React.Node => (\r\n    <g>\r\n      <path\r\n        fill={props.color}\r\n        d=\"M370.59 250.973c-5.524 0-10 4.476-10 10v88.789c-.02 16.562-13.438 29.984-30 30H50c-16.563-.016-29.98-13.438-30-30V89.172c.02-16.559 13.438-29.98 30-30h88.79c5.523 0 10-4.477 10-10 0-5.52-4.477-10-10-10H50c-27.602.031-49.969 22.398-50 50v260.594c.031 27.601 22.398 49.968 50 50h280.59c27.601-.032 49.969-22.399 50-50v-88.793c0-5.524-4.477-10-10-10zm0 0\"\r\n      />\r\n      <path\r\n        fill={props.color}\r\n        d=\"M376.629 13.441c-17.574-17.574-46.067-17.574-63.64 0L134.581 191.848a9.997 9.997 0 0 0-2.566 4.402l-23.461 84.7a9.997 9.997 0 0 0 12.304 12.308l84.7-23.465a9.997 9.997 0 0 0 4.402-2.566l178.402-178.41c17.547-17.587 17.547-46.055 0-63.641zM156.37 198.348L302.383 52.332l47.09 47.09-146.016 146.016zm-9.406 18.875l37.62 37.625-52.038 14.418zM374.223 74.676L363.617 85.28l-47.094-47.094 10.61-10.605c9.762-9.762 25.59-9.762 35.351 0l11.739 11.734c9.746 9.774 9.746 25.59 0 35.36zm0 0\"\r\n      />\r\n    </g>\r\n  ),\r\n  viewBox: '0 0 352.62 352.62'\r\n};\r\n\r\nexport const icInformation = {\r\n  svg: (props): React.Node => (\r\n    <g>\r\n      <path\r\n        fill={props.color}\r\n        d=\"M194 142.8c.8 1.6 1.6 3.2 2.4 4.4.8 1.2 2 2.4 2.8 3.6 1.2 1.2 2.4 2.4 4 3.6 1.2.8 2.8 2 4.8 2.4 1.6.8 3.2 1.2 5.2 1.6 2 .4 3.6.4 5.2.4s3.6 0 5.2-.4 3.2-.8 4.4-1.6h.4c1.6-.8 3.2-1.6 4.8-2.8 1.2-.8 2.4-2 3.6-3.2l.4-.4c1.2-1.2 2-2.4 2.8-3.6s1.6-2.4 2-4c0-.4 0-.4.4-.8.8-1.6 1.2-3.6 1.6-5.2.4-1.6.4-3.6.4-5.2s0-3.6-.4-5.2-.8-3.2-1.6-5.2c-1.2-2.8-2.8-5.2-4.8-7.2l-.8-.8c-1.2-1.2-2.4-2-4-3.2-1.6-.8-2.8-1.6-4.4-2.4-1.6-.8-3.2-1.2-4.8-1.6-2-.4-3.6-.4-5.2-.4s-3.6 0-5.2.4-3.2.8-4.8 1.6h-.4c-1.6.8-3.2 1.6-4.4 2.4-1.6 1.2-2.8 2-4 3.2-1.2 1.2-2.4 2.4-3.2 3.6-.8 1.2-1.6 2.8-2.4 4.4-.8 1.6-1.2 3.2-1.6 4.8-.4 2-.4 3.6-.4 5.2s0 3.6.4 5.2c.4 3.2 1.2 4.8 1.6 6.4zM249.6 289.2h-9.2v-98c0-5.6-4.4-10.4-10.4-10.4h-42c-5.6 0-10.4 4.4-10.4 10.4v21.6c0 5.6 4.4 10.4 10.4 10.4h8.4v66.4H188c-5.6 0-10.4 4.4-10.4 10.4v21.6c0 5.6 4.4 10.4 10.4 10.4h61.6c5.6 0 10.4-4.4 10.4-10.4V300c0-6-4.8-10.8-10.4-10.8z\"\r\n      />\r\n      <path\r\n        fill={props.color}\r\n        d=\"M218.8 0C98 0 0 98 0 218.8s98 218.8 218.8 218.8 218.8-98 218.8-218.8S339.6 0 218.8 0zm0 408.8c-104.8 0-190-85.2-190-190s85.2-190 190-190 190 85.2 190 190-85.2 190-190 190z\"\r\n      />\r\n    </g>\r\n  ),\r\n  viewBox: '0 0 437.6 427.6'\r\n};\r\n\r\nexport const icEdit = {\r\n  svg: (props): React.Node => (\r\n    <g>\r\n      <path\r\n        fill={props.color || '#dcdcdc'}\r\n        d=\"M328.883 89.125l107.59 107.589-272.34 272.34L56.604 361.465l272.279-272.34zm189.23-25.948l-47.981-47.981c-18.543-18.543-48.653-18.543-67.259 0l-45.961 45.961 107.59 107.59 53.611-53.611c14.382-14.383 14.382-37.577 0-51.959zM.3 512.69c-1.958 8.812 5.998 16.708 14.811 14.565l119.891-29.069L27.473 390.597.3 512.69z\"\r\n      />\r\n    </g>\r\n  ),\r\n  viewBox: '0 0 528.899 528.899'\r\n};\r\n\r\nexport const icRemove = {\r\n  svg: (props): React.Node => (\r\n    <g>\r\n      <path\r\n        fill={props.color || '#dcdcdc'}\r\n        d=\"M465.167 211.613H26.69c-8.424 0-26.69 11.439-26.69 34.316s18.267 34.316 26.69 34.316H465.169c8.421 0 26.689-11.439 26.689-34.316s-18.268-34.316-26.691-34.316z\"\r\n      />\r\n    </g>\r\n  ),\r\n  viewBox: '0 0 491.858 491.858'\r\n};\r\n\r\nexport const icAdd = {\r\n  svg: (props): React.Node => (\r\n    <g>\r\n      <path\r\n        fillRule=\"evenodd\"\r\n        clipRule=\"evenodd\"\r\n        d=\"M34.525 19.11l.398.038a17.705 17.705 0 000-3.296l-.398.037-.398.038a16.903 16.903 0 010 3.146l.398.038zm-.333-5.342l.39-.087a17.364 17.364 0 00-1.017-3.133l-.367.16-.367.158c.413.954.74 1.953.97 2.989l.39-.087zm-1.97-4.974l.343-.203a17.556 17.556 0 00-1.938-2.664l-.3.265-.3.264a16.76 16.76 0 011.85 2.542l.344-.204zm-3.414-4.121l.265-.3a17.551 17.551 0 00-2.663-1.938l-.204.344-.204.344a16.755 16.755 0 012.542 1.85l.264-.3zm-4.515-2.87l.159-.368c-1-.433-2.047-.775-3.133-1.017l-.087.39-.087.39c1.036.231 2.035.558 2.989.971l.159-.367zM19.11.474l.037-.398a17.718 17.718 0 00-3.296 0l.037.398.038.398a16.919 16.919 0 013.146 0l.038-.398zm-5.343.333l-.087-.39a17.365 17.365 0 00-3.133 1.017l.16.367.158.367c.954-.413 1.953-.74 2.989-.97l-.087-.39zm-4.974 1.97l-.203-.343c-.95.562-1.841 1.212-2.664 1.938l.265.3.264.3a16.756 16.756 0 012.542-1.85l-.204-.344zM4.673 6.193l-.3-.265a17.556 17.556 0 00-1.938 2.664l.344.203.344.204a16.756 16.756 0 011.85-2.542l-.3-.264zm-2.87 4.515l-.368-.159c-.433 1-.775 2.047-1.017 3.133l.39.087.39.087c.231-1.036.558-2.036.971-2.989l-.367-.159zM0 17.5c0-.556.026-1.105.077-1.648l.398.037.398.038a16.919 16.919 0 000 3.146l-.398.038-.398.037A17.718 17.718 0 010 17.5zm.808 3.732l-.39.087a17.365 17.365 0 001.017 3.133l.367-.16.367-.158a16.565 16.565 0 01-.97-2.989l-.39.087zm1.97 4.974l-.343.204a17.55 17.55 0 001.938 2.663l.3-.265.3-.264a16.755 16.755 0 01-1.85-2.542l-.344.204zm3.414 4.121l-.265.3a17.556 17.556 0 002.664 1.938l.203-.344.204-.344a16.76 16.76 0 01-2.542-1.85l-.264.3zm4.515 2.87l-.159.368c1 .433 2.047.775 3.133 1.017l.087-.39.087-.39a16.563 16.563 0 01-2.989-.971l-.159.367zm5.182 1.328l-.037.398a17.705 17.705 0 003.296 0l-.037-.398-.038-.398a16.903 16.903 0 01-3.146 0l-.038.398zm5.343-.333l.087.39a17.364 17.364 0 003.133-1.017l-.16-.367-.158-.367c-.954.413-1.953.74-2.989.97l.087.39zm4.974-1.97l.204.343c.949-.562 1.84-1.212 2.663-1.938l-.265-.3-.264-.3a16.76 16.76 0 01-2.542 1.85l.204.344zm4.121-3.414l.3.265a17.552 17.552 0 001.938-2.663l-.344-.204-.344-.204a16.76 16.76 0 01-1.85 2.542l.3.264zm2.87-4.515l.368.159c.433-1 .775-2.047 1.017-3.133l-.39-.087-.39-.087a16.563 16.563 0 01-.971 2.989l.367.159zM17.7 9.723a.5.5 0 01.5.5V17h7a.5.5 0 010 1h-7v6.778a.5.5 0 01-1 0V18h-7a.5.5 0 010-1h7v-6.778a.5.5 0 01.5-.5z\"\r\n        fill={props.color || '#dcdcdc'}\r\n      />\r\n    </g>\r\n  ),\r\n  viewBox: '0 0 35 35'\r\n};\r\n","// @flow\r\n\r\nimport * as React from 'react';\r\nimport Toggle from 'react-bootstrap-toggle';\r\nimport { Button, Dropdown, DropdownButton } from 'react-bootstrap';\r\nimport autobind from 'autobind-decorator';\r\nimport { Icon } from '../index';\r\nimport type { DrawingSegmentType } from '../../../utils/types';\r\nimport './SegmentSetting.scss';\r\n\r\ntype PropsType = {\r\n  value?: DrawingSegmentType,\r\n  data: Array<string>,\r\n  onDone: void,\r\n  onDelete: void,\r\n  onVisibleChange: void\r\n};\r\n\r\ntype StateType = {\r\n  start: string,\r\n  end: string,\r\n  visible: boolean,\r\n  isEditMode: boolean,\r\n  isCreateMode: boolean,\r\n  isMouseHoverEdition: boolean,\r\n  isMouseHoverDeletion: boolean,\r\n};\r\n\r\nclass SegmentSetting extends React.Component<PropsType, StateType> {\r\n  constructor(props: PropsType) {\r\n    super(props);\r\n    const start = props.value ? props.value.name[0] : '';\r\n    const end = props.value ? props.value.name[1] : '';\r\n    this.state = {\r\n      start,\r\n      end,\r\n      visible: true,\r\n      isEditMode: !props.value,\r\n      isCreateMode: !props.value,\r\n      isMouseHoverEdition: false,\r\n      isMouseHoverDeletion: false,\r\n    };\r\n  }\r\n\r\n  @autobind\r\n  onDone() {\r\n    const {start, end} = this.state;\r\n    const {onDone} = this.props;\r\n\r\n    if (onDone) {\r\n      onDone({name: [start, end].sort().join(''), visible: true});\r\n    }\r\n    this.setState({isEditMode: false});\r\n  }\r\n\r\n  @autobind\r\n  onDelete() {\r\n    const {onDelete} = this.props;\r\n    if (onDelete) {\r\n      onDelete();\r\n    }\r\n  }\r\n\r\n  @autobind\r\n  onVisibleChange(visible: boolean) {\r\n    const {onVisibleChange, value} = this.props;\r\n    if (onVisibleChange) {\r\n      onVisibleChange({name: value.name, visible: !value.visible});\r\n    }\r\n  }\r\n\r\n  @autobind\r\n  getIndexInData(dropdownIndex: string, filterValue: string): number {\r\n    const {data} = this.props;\r\n    const filterValueIndex = data.indexOf(filterValue);\r\n    if (filterValueIndex < 0) {\r\n      return dropdownIndex;\r\n    }\r\n    return filterValueIndex > dropdownIndex ? dropdownIndex : parseInt(dropdownIndex) + 1;\r\n  }\r\n\r\n  @autobind\r\n  onStartPointSelect(index: string) {\r\n    const {data} = this.props;\r\n    const {start, end} = this.state;\r\n    const newStartValue = data[index];\r\n    if (newStartValue === end) {\r\n      this.setState({start: newStartValue, end: start});\r\n    } else {\r\n      this.setState({start: newStartValue});\r\n    }\r\n  }\r\n\r\n  @autobind\r\n  onEndPointSelect(index: string) {\r\n    const {data} = this.props;\r\n    this.setState({end: data[this.getIndexInData(index, this.state.start)]});\r\n  }\r\n\r\n  @autobind\r\n  mouseHoverEdition() {\r\n    this.setState({isMouseHoverEdition: true})\r\n  }\r\n\r\n  @autobind\r\n  mouseLeaveEdition() {\r\n    this.setState({isMouseHoverEdition: false})\r\n  }\r\n\r\n  @autobind\r\n  mouseHoverDeletion() {\r\n    this.setState({isMouseHoverDeletion: true})\r\n  }\r\n\r\n  @autobind\r\n  mouseLeaveDeletion() {\r\n    this.setState({isMouseHoverDeletion: false})\r\n  }\r\n\r\n  @autobind\r\n  onChangeContentState() {\r\n    const {isEditMode, start, end} = this.state;\r\n    if (!start || !end) {\r\n      return;\r\n    }\r\n    this.setState({isEditMode: !isEditMode});\r\n  }\r\n\r\n  @autobind\r\n  renderDropdown(value: string, data: Array<string>, onSelect: void): React.Node {\r\n    return (\r\n      <DropdownButton title={value || 'Chọn điểm'} id={`segment-dropdown`} onSelect={onSelect}>\r\n        {data.map((item: string, index: number): React.Node => (\r\n          <Dropdown.Item key={`Drop-item-${index}`} eventKey={`${index}`}>\r\n            {item}\r\n          </Dropdown.Item>\r\n        ))}\r\n      </DropdownButton>\r\n    );\r\n  }\r\n\r\n  @autobind\r\n  renderEditContent(): React.Node {\r\n    const {data} = this.props;\r\n    const {start, end, isCreateMode} = this.state;\r\n    return (\r\n      <div className=\"content-edit\">\r\n        <div className=\"drop-down-container\">\r\n          <div className={\"col-6 p-0\"}>\r\n            {this.renderDropdown(start, data, this.onStartPointSelect)}\r\n          </div>\r\n          <div className=\"col-6 p-0 right-drop-down\">\r\n            {this.renderDropdown(end, data.filter((item) => item !== this.state.start), this.onEndPointSelect)}\r\n          </div>\r\n        </div>\r\n\r\n        <div className=\"button-container mt-1\">\r\n          <div className={\"col-6 p-0 d-flex justify-content-between\"}>\r\n            <Button className={\"btn-cancel\"} onClick={isCreateMode ? this.onDelete : this.onChangeContentState}>\r\n              HỦY\r\n            </Button>\r\n            <Button className={\"btn-update\"} variant={`${isCreateMode ? 'link' : 'success'}`} disabled={!(start && end)}\r\n                    onClick={this.onDone}>\r\n              {isCreateMode ? 'THÊM' : 'CẬP NHẬT'}\r\n            </Button>\r\n          </div>\r\n        </div>\r\n      </div>\r\n    );\r\n  }\r\n\r\n  @autobind\r\n  renderShowContent(): React.Node {\r\n    const {\r\n      value: {name, visible}\r\n    } = this.props;\r\n    return (\r\n      <div className=\"content-show\">\r\n        <div className=\"content\">\r\n          <div className={\"segment-edit-name col-8\"}>\r\n            <p>{name}</p>\r\n          </div>\r\n\r\n          <div className={\"segment-edit-controller col-4\"}>\r\n            <Toggle\r\n              onstyle=\"success\"\r\n              offstyle=\"danger\"\r\n              handleClassName=\"toggle-handler\"\r\n              onClick={this.onVisibleChange}\r\n              off=\"HIỆN\"\r\n              on=\"ẨN\"\r\n              active={visible}\r\n            />\r\n\r\n            <div onClick={this.onChangeContentState}\r\n                 onMouseLeave={this.mouseLeaveEdition}\r\n                 onMouseOver={this.mouseHoverEdition}\r\n                 onMouseDown={this.mouseLeaveEdition}>\r\n              {\r\n                this.state.isMouseHoverEdition ?\r\n                  <Icon name={'icEdit'} color={'#218838'} width={16} height={16}/>\r\n                  :\r\n                  <Icon name={'icEdit'} color={'#757575'} width={16} height={16}/>\r\n              }\r\n            </div>\r\n\r\n            <div onClick={this.onDelete}\r\n                 onMouseOver={this.mouseHoverDeletion}\r\n                 onMouseLeave={this.mouseLeaveDeletion}\r\n                 onMouseDown={this.mouseLeaveDeletion}>\r\n              {\r\n                this.state.isMouseHoverDeletion ?\r\n                  <Icon name={'icRemove'} color={'#dc3545'} width={16} height={16}/>\r\n                  :\r\n                  <Icon name={'icRemove'} color={'#757575'} width={16} height={16}/>\r\n              }\r\n            </div>\r\n          </div>\r\n        </div>\r\n      </div>\r\n    );\r\n  }\r\n\r\n  @autobind\r\n  renderContent(): React.Node {\r\n    const {isEditMode} = this.state;\r\n    if (isEditMode) {\r\n      return this.renderEditContent();\r\n    }\r\n\r\n    return this.renderShowContent();\r\n  }\r\n\r\n  render(): React.Node {\r\n    const {style} = this.props;\r\n    const {isEditMode, isCreateMode} = this.state;\r\n\r\n    return (\r\n      <div className=\"segment-setting\" style={{...style}}>\r\n        <div className=\"container\">\r\n          {isEditMode && (\r\n            <div className=\"title\">\r\n              <p>{`${isCreateMode ? 'Thêm' : 'Cập nhật'} đoạn thẳng :`}</p>\r\n            </div>\r\n          )}\r\n          {this.renderContent()}\r\n        </div>\r\n      </div>\r\n    );\r\n  }\r\n}\r\n\r\nexport default SegmentSetting;\r\n","class Geom {\r\n  constructor(name) {\r\n    this.name = name;\r\n  }\r\n\r\n  toString() {\r\n    return this.name;\r\n  }\r\n}\r\n\r\nexport { Geom };\r\n","import { Geom } from './geom';\r\n\r\nclass Point extends Geom {\r\n  constructor(name, x, y) {\r\n    if (typeof y === 'undefined') {\r\n      y = x;\r\n      x = name;\r\n      name = null;\r\n    }\r\n    super(name);\r\n    this.x = x;\r\n    this.y = y;\r\n    this.free = true;\r\n  }\r\n\r\n  toString() {\r\n    return super.toString() + '(' + this.x + ',' + this.y + ')';\r\n  }\r\n\r\n  /* shorthand function for constructing a point from coodinates */\r\n  static P(name, x, y) {\r\n    return new Point(name, x, y);\r\n  }\r\n}\r\n\r\nexport { Point };\r\n","export { distance, distanceSquared };\r\n\r\n/* returns the Euclidean distance between (p1.x, p1.y) and (p2.x, p2.y) */\r\nfunction distance(p1, p2) {\r\n  return Math.sqrt(distanceSquared(p1, p2));\r\n}\r\n\r\n/* returns the squared Euclidean distance between (p1.x, p1.y) and (p2.x, p2.y) */\r\nfunction distanceSquared(p1, p2) {\r\n  let dx = p1.x - p2.x,\r\n    dy = p1.y - p2.y;\r\n  return dx * dx + dy * dy;\r\n}\r\n","import { Geom } from './geom';\r\nimport { Point } from './point';\r\nimport { distance, distanceSquared } from '../calc';\r\n\r\nclass Circle extends Geom {\r\n  constructor(name, center, a) {\r\n    if (typeof a === 'undefined') {\r\n      a = center;\r\n      center = name;\r\n      name = null;\r\n    }\r\n\r\n    super(name);\r\n    this.center = center;\r\n    if (a instanceof Point) {\r\n      this._fromCenterAndBoundaryPoint(center, a);\r\n    } else if (typeof a === 'number') {\r\n      this._fromCenterAndRadius(center, a);\r\n    }\r\n  }\r\n\r\n  _fromCenterAndRadius(center, radius) {\r\n    this.radius = radius;\r\n    Object.defineProperties(this, {\r\n      radiussq: {\r\n        get() {\r\n          return this.radius * this.radius;\r\n        }\r\n      }\r\n    });\r\n  }\r\n\r\n  _fromCenterAndBoundaryPoint(center, boundaryPoint) {\r\n    this.boundaryPoint = boundaryPoint;\r\n    Object.defineProperties(this, {\r\n      radius: {\r\n        get() {\r\n          return distance(this.boundaryPoint, this.center);\r\n        }\r\n      },\r\n      radiussq: {\r\n        get() {\r\n          return distanceSquared(this.boundaryPoint, this.center);\r\n        }\r\n      }\r\n    });\r\n  }\r\n\r\n  y(x) {\r\n    var w = Math.abs(x - this.center.x);\r\n    if (w > this.radius) return null;\r\n    if (w === this.radius) return new Point(x, this.center.y);\r\n\r\n    var h = Math.sqrt(this.radius * this.radius - w * w);\r\n    return [this.center.y + h, this.center.y - h];\r\n  }\r\n\r\n  contains(p) {\r\n    return distanceSquared(p, this.center) === this.radiussq;\r\n  }\r\n\r\n  toString() {\r\n    return 'Circle' + super.toString() + '[' + this.center.toString() + ';' + this.radius + ']';\r\n  }\r\n}\r\n\r\nexport { Circle };\r\n","import { Geom } from './geom';\r\n\r\nclass Line extends Geom {\r\n  constructor(name, p1, p2) {\r\n    if (typeof p2 === 'undefined') {\r\n      p2 = p1;\r\n      p1 = name;\r\n      name = null;\r\n    }\r\n\r\n    super(name);\r\n    if (!p2) {\r\n      this._p = p1.slice(0);\r\n    } else {\r\n      this._p = [p1, p2];\r\n    }\r\n\r\n    this._clip = false;\r\n\r\n    Object.defineProperties(this, {\r\n      // TODO: I don't like dx and dy on the line class...\r\n      dx: {\r\n        get() {\r\n          return this._p[1].x - this._p[0].x;\r\n        }\r\n      },\r\n      dy: {\r\n        get() {\r\n          return this._p[1].y - this._p[0].y;\r\n        }\r\n      },\r\n      theta: {\r\n        get() {\r\n          return Math.atan2(this.dy, this.dx);\r\n        }\r\n      },\r\n      m: {\r\n        get() {\r\n          if (this.dx === 0) return null;\r\n          else return this.dy / this.dx;\r\n        }\r\n      },\r\n\r\n      left: {\r\n        get() {\r\n          return this._clip ? Math.min(this._p[0].x, this._p[1].x) : null;\r\n        }\r\n      },\r\n      right: {\r\n        get() {\r\n          return this._clip ? Math.max(this._p[0].x, this._p[1].x) : null;\r\n        }\r\n      },\r\n      top: {\r\n        get() {\r\n          return this._clip ? Math.min(this._p[0].y, this._p[1].y) : null;\r\n        }\r\n      },\r\n      bottom: {\r\n        get() {\r\n          return this._clip ? Math.max(this._p[0].y, this._p[1].y) : null;\r\n        }\r\n      }\r\n    });\r\n  }\r\n\r\n  y(x) {\r\n    if (this.dx === 0 || (this._clip && (this.left > x || this.right < x))) return null;\r\n    else return this._p[0].y + ((x - this._p[0].x) * this.dy) / this.dx;\r\n  }\r\n\r\n  x(y) {\r\n    if (this.dy === 0 || (this._clip && (this.top > y || this.bottom < y))) return null;\r\n    else return this._p[0].x + ((y - this._p[0].y) * this.dx) / this.dy;\r\n  }\r\n\r\n  contains(p) {\r\n    let onLine = this.dx !== 0 ? this.y(p.x) === p.y : this.x(p.y) === p.x;\r\n    return (\r\n      onLine && (!this._clip || (this.left <= p.x && p.x <= this.right && (this.top <= p.y && p.y <= this.bottom)))\r\n    );\r\n  }\r\n\r\n  toString() {\r\n    return 'Line' + super.toString() + '[' + this._p[0].toString() + ';' + this._p[1].toString() + ']';\r\n  }\r\n}\r\n\r\nexport { Line };\r\n","import { Line } from './line';\r\nimport { Point } from './point';\r\nimport { distance, distanceSquared } from '../calc';\r\n\r\nconst P = Point.P;\r\n\r\nclass Segment extends Line {\r\n  constructor(name, p1, p2) {\r\n    super(name, p1, p2);\r\n    this._clip = true;\r\n\r\n    Object.defineProperties(this, {\r\n      p: {\r\n        // TODO: clone point themselves?\r\n        get() {\r\n          return [].concat(this._p);\r\n        }\r\n      },\r\n\r\n      lengthsq: {\r\n        get() {\r\n          return distanceSquared(this._p[0], this._p[1]);\r\n        }\r\n      },\r\n\r\n      length: {\r\n        get() {\r\n          return distance(this._p[0], this._p[1]);\r\n        }\r\n      }\r\n    });\r\n  }\r\n\r\n  toString() {\r\n    return 'Segment' + super.toString();\r\n  }\r\n\r\n  /*\r\n  clip the given line (or line segment) to the given bounding box, where `bounds`\r\n  must have `left`, `right`, `top`, and `bottom` properties.\r\n  */\r\n  static clip(bounds, line) {\r\n    var [p1, p2] = line._p;\r\n\r\n    var left = line.y(bounds.left),\r\n      right = line.y(bounds.right),\r\n      top = line.x(bounds.top),\r\n      bottom = line.x(bounds.bottom);\r\n\r\n    if (p1.x > p2.x) {\r\n      let t = p1;\r\n      p1 = p2;\r\n      p2 = t;\r\n    }\r\n    if (left && left >= bounds.top && left <= bounds.bottom) {\r\n      // intersects left wall\r\n      p1 = P(bounds.left, left);\r\n    }\r\n    if (right && right >= bounds.top && right <= bounds.bottom) {\r\n      // intersects right wall\r\n      p2 = P(bounds.right, right);\r\n    }\r\n\r\n    if (p1.y > p2.y) {\r\n      let t = p1;\r\n      p1 = p2;\r\n      p2 = t;\r\n    }\r\n    if (top && top >= bounds.left && top <= bounds.right) {\r\n      // intersects top wall\r\n      p1 = P(top, bounds.top);\r\n    }\r\n    if (bottom && bottom >= bounds.left && bottom <= bounds.right) {\r\n      // intersects bottom wall\r\n      p2 = P(bottom, bounds.bottom);\r\n    }\r\n\r\n    let clipped = new Segment(null, p1, p2);\r\n    clipped.parent = line;\r\n    return clipped;\r\n  }\r\n}\r\n\r\nexport { Segment };\r\n","import { Point } from './model/point';\r\nimport { Line } from './model/line';\r\nimport { Segment } from './model/segment';\r\nimport { Circle } from './model/circle';\r\nimport { distanceSquared as dd } from './calc';\r\n\r\nimport uniq from 'uniq';\r\n\r\nlet P = Point.P;\r\n\r\n/* helpers */\r\nfunction comparePoints(p, q) {\r\n  return p.x === q.x && p.y === q.y ? 0 : 1;\r\n}\r\n\r\nfunction sq(a) {\r\n  return a * a;\r\n}\r\n\r\nfunction between(x, a, b) {\r\n  let left = Math.min(a, b),\r\n    right = Math.max(a, b);\r\n  return left <= x && x <= right;\r\n}\r\n\r\n/*\r\n  Intersection of two objects; returns an array, possibly empty, of \r\n  intersection points.\r\n*/\r\n\r\n/**\r\n * intersect - Find the intersection(s) of the given two objects.\r\n *\r\n * @param  {Geom} o1 first object\r\n * @param  {Geom} o2 second object\r\n * @return {Array.<Point>}    Points of intersection between the two objects.\r\n */\r\nfunction intersect(o1, o2) {\r\n  if (o1 instanceof Circle && o2 instanceof Circle)\r\n    // circle-circle\r\n    return intersectCircleCircle(o1, o2);\r\n  // if only one is a circle, it should be first.\r\n  else if (o2 instanceof Circle) return intersect(o2, o1);\r\n  else if (o1 instanceof Circle && o2 instanceof Segment)\r\n    // circle-segment\r\n    return intersectCircleLine(o1, o2, true);\r\n  else if (o1 instanceof Circle && o2 instanceof Line)\r\n    // circle-line\r\n    return intersectCircleLine(o1, o2, false);\r\n  else if (o1 instanceof Segment && o2 instanceof Segment)\r\n    // segment-segment\r\n    return intersectLineLine(o1, o2, true);\r\n  // if only one is a segment, it should be first.\r\n  else if (o2 instanceof Segment) return intersect(o2, o1);\r\n  else if (o1 instanceof Line && o2 instanceof Line)\r\n    // line-line\r\n    return intersectLineLine(o1, o2, false);\r\n  // TODO: circle-point, segment-point, point-point\r\n  else if (o2 instanceof Point || o1 instanceof Point) return [];\r\n  else throw new Error('Cannot intersect ' + o1.constructor.name + ' and ' + o2.constructor.name);\r\n}\r\n\r\nfunction intersectCircleCircle(c1, c2) {\r\n  let dsq = dd(c1.center, c2.center);\r\n  let d = Math.sqrt(dsq);\r\n\r\n  if (d > c1.radius + c2.radius) {\r\n    return [];\r\n  } else if (d < c1.radius - c2.radius) {\r\n    return [];\r\n  } else if (dsq === 0) {\r\n    return [];\r\n  }\r\n\r\n  let a = (c1.radiussq - c2.radiussq + dsq) / (2 * d);\r\n  let h = Math.sqrt(Math.max(c1.radiussq - sq(a), 0));\r\n  let cx = c1.center.x + (a * (c2.center.x - c1.center.x)) / d;\r\n  let cy = c1.center.y + (a * (c2.center.y - c1.center.y)) / d;\r\n\r\n  let nx = (h * (c1.center.y - c2.center.y)) / d;\r\n  let ny = (h * (c1.center.x - c2.center.x)) / d;\r\n\r\n  return uniq([P(0, cx + nx, cy - ny), P(1, cx - nx, cy + ny)], comparePoints);\r\n}\r\n\r\nfunction intersectLineLine(s1, s2, clip) {\r\n  let [{ x: x1, y: y1 }, { x: x2, y: y2 }] = s1._p;\r\n  let [{ x: x3, y: y3 }, { x: x4, y: y4 }] = s2._p;\r\n  let s = (-s1.dy * (x1 - x3) + s1.dx * (y1 - y3)) / (-s2.dx * s1.dy + s1.dx * s2.dy);\r\n  let t = (s2.dx * (y1 - y3) - s2.dy * (x1 - x3)) / (-s2.dx * s1.dy + s1.dx * s2.dy);\r\n\r\n  if (!clip || (between(s, 0, 1) && between(t, 0, 1))) return [P(0, x1 + t * s1.dx, y1 + t * s1.dy)];\r\n  else return []; // no collision\r\n}\r\n\r\n/* http://mathworld.wolfram.com/Circle-LineIntersection.html */\r\nfunction intersectCircleLine(c, s, clip) {\r\n  let [{ x: x1, y: y1 }, { x: x2, y: y2 }] = s._p;\r\n  let { x: x0, y: y0 } = c.center;\r\n\r\n  // note the translation (x0, y0)->(0,0).\r\n  let D = (x1 - x0) * (y2 - y0) - (x2 - x0) * (y1 - y0);\r\n  let Dsq = sq(D);\r\n\r\n  let lensq = sq(s.dx) + sq(s.dy);\r\n  let disc = Math.sqrt(sq(c.radius) * lensq - Dsq);\r\n  if (disc < 0) {\r\n    return [];\r\n  }\r\n\r\n  let cx = (D * s.dy) / lensq,\r\n    cy = (-D * s.dx) / lensq;\r\n  let nx = ((s.dy < 0 ? -1 * s.dx : s.dx) * disc) / lensq,\r\n    ny = (Math.abs(s.dy) * disc) / lensq;\r\n\r\n  // translate (0,0)->(x0, y0).\r\n  return uniq([P(0, cx + nx + x0, cy + ny + y0), P(1, cx - nx + x0, cy - ny + y0)], comparePoints).filter((p) =>\r\n    clip ? between(p.x, x1, x2) && between(p.y, y1, y2) : true\r\n  );\r\n}\r\n\r\nexport { intersect, intersectCircleCircle, intersectCircleLine, intersectLineLine };\r\n","import { Point } from './point';\r\nimport { Geom } from './geom';\r\n\r\nimport { intersect } from '../intersection';\r\n\r\nclass Intersection extends Point {\r\n  /**\r\n   * @param {string} name\r\n   * @param {...Geom} objects to be intersected\r\n   * @param {number|Geom~boolean} [which] optional array index or filter callback in case there are multiple intersections.\r\n   */\r\n  constructor(name, ...objects) {\r\n    if (name instanceof Geom) {\r\n      objects.shift(name);\r\n      name = null;\r\n    }\r\n    super(name, null, null);\r\n\r\n    this.which = /function|number/.test(typeof objects[objects.length - 1]) ? objects.pop() : 0;\r\n    this.objects = objects;\r\n    this.free = false;\r\n  }\r\n\r\n  update() {\r\n    let result = intersect.apply(null, this.objects);\r\n    if (typeof this.which === 'function') result = result.filter(this.which)[0];\r\n    else result = result[this.which];\r\n\r\n    if (result) {\r\n      ({ x: this.x, y: this.y } = result);\r\n    } else {\r\n      this.x = this.y = null;\r\n    }\r\n  }\r\n\r\n  toString(verbose) {\r\n    let pstr = super.toString();\r\n    return !verbose ? pstr : pstr + '; intersection of: ' + this.objects.map((o) => o.toString()).join(',');\r\n  }\r\n}\r\n\r\nexport { Intersection };\r\n","import { Point } from './point';\r\nimport { Circle } from './circle';\r\nimport { Line } from './line';\r\nimport { Segment } from './segment';\r\nimport { Intersection } from './intersection';\r\n\r\nconst P = Point.P;\r\nexport { P, Point, Circle, Segment, Line, Intersection };\r\n\r\n/* return a deep-equality test function that checks for geometric object\r\n   equality using the given distance threshold for point equality; i.e., if \r\n   two points are closer than `threshold`, consider them equal. */\r\nexport function equalWithin(threshold) {\r\n  threshold = threshold || 0;\r\n  return function equal(o1, o2) {\r\n    if (Array.isArray(o1) && Array.isArray(o2)) {\r\n      return o1.every((obj, index) => equal(obj, o2[index]));\r\n    }\r\n    if (typeof o1 === 'number' && typeof o2 === 'number') {\r\n      return Math.abs(o1 - o2) < threshold;\r\n    }\r\n    if (o1 instanceof Point && o2 instanceof Point) {\r\n      if (o1.x === null || o2.x === null || o1.y === null || o2.y === null) return false;\r\n      else return equal(Math.abs(o1.x - o2.x) + Math.abs(o1.y - o2.y), 0);\r\n    }\r\n    if (o1 instanceof Circle && o2 instanceof Circle) {\r\n      return equal(o1.radius, o2.radius) && equal(o1.center, o2.center);\r\n    }\r\n    if (o1 instanceof Segment && o2 instanceof Segment) {\r\n      var p1 = [].concat(o1.p),\r\n        p2 = [].concat(o2.p);\r\n      // ensure points from both segments are in the same order\r\n      // (left to right or right to left).\r\n      if (p1[0].x > p1[1].x && p2[0].x < p2[0].x) p1.reverse();\r\n      // then delegate to point equality\r\n      return equal(p1, p2);\r\n    }\r\n    if (o1 instanceof Line && o2 instanceof Line) {\r\n      return equal(o1.m, o2.m) && equal(o1.y(0), o2.y(0)) && equal(o1.x(0), o2.x(0));\r\n    }\r\n\r\n    // fallback to object equality\r\n    return o1 === o2;\r\n  };\r\n}\r\n","import * as d3 from 'd3';\r\nimport { Circle, equalWithin, Intersection, Line, Point, Segment } from './model';\r\n\r\nfunction addClass(obj, klass) {\r\n  obj.classes = obj.classes || d3.set();\r\n  obj.classes.add(klass);\r\n}\r\n\r\nclass Scene {\r\n  constructor(bounds) {\r\n    this.bounds = bounds;\r\n    this.bounds.width = this.bounds.right - this.bounds.left;\r\n    this.bounds.height = this.bounds.bottom - this.bounds.top;\r\n\r\n    this._last = null; // hack -- should be keeping objects in ordered structure anyway.\r\n    this._objects = d3.map();\r\n    this.equal = equalWithin(Math.sqrt(2));\r\n    this.log = [];\r\n  }\r\n\r\n  /* return an array of all Points in the scene */\r\n  points() {\r\n    return this._objects.values().filter((o) => o instanceof Point);\r\n  }\r\n\r\n  /* return an array of all objects in the scene */\r\n  objects() {\r\n    return this._objects.values();\r\n  }\r\n\r\n  /* find the given object is in the scene using geometric\r\n  (i.e. deep) equality rather than reference ===. */\r\n  find(obj) {\r\n    let objects = this._objects.values();\r\n    for (let i = 0; i < objects.length; i++) {\r\n      if (this.equal(objects[i], obj)) return objects[i];\r\n    }\r\n    return null;\r\n  }\r\n\r\n  /**\r\n   * is - Get an equality-testing callback for the given object.\r\n   *\r\n   * @param  {Geom|string} obj Either the name of the object to test or the object itself.\r\n   * @return {Geom~boolean} a function that tests whether its argument is geometrically equal to obj.\r\n   */\r\n  is(obj) {\r\n    if (typeof obj === 'string') {\r\n      obj = this.get(obj);\r\n    }\r\n    return (secondObj) => obj && this.equal(obj, secondObj);\r\n  }\r\n\r\n  /**\r\n   * is - Get an NON-equality-testing callback for the given object.\r\n   *\r\n   * @param  {Geom|string} obj Either the name of the object to test or the object itself.\r\n   * @return {Geom~boolean} a function that tests whether its argument is NOT geometrically equal to obj.\r\n   */\r\n  isnt(obj) {\r\n    if (typeof obj === 'string') {\r\n      obj = this.get(obj);\r\n    }\r\n    return (secondObj) => obj && !this.equal(obj, secondObj);\r\n  }\r\n\r\n  last() {\r\n    return this._last;\r\n  }\r\n\r\n  get(name) {\r\n    return this._objects.get(name);\r\n  }\r\n\r\n  point(name, x, y) {\r\n    return this.add(new Point(name, x, y));\r\n  }\r\n\r\n  circle(name, centerId, radius) {\r\n    return this.add(new Circle(name, this.get(centerId), radius));\r\n  }\r\n\r\n  segment(name, id1, id2) {\r\n    return this.add(new Segment(name, this.get(id1), this.get(id2)));\r\n  }\r\n\r\n  line(name, id1, id2) {\r\n    return this.add(new Line(name, this.get(id1), this.get(id2)));\r\n  }\r\n\r\n  intersection(name, id1, id2, which) {\r\n    if (typeof id2 === 'undefined') {\r\n      id2 = id1;\r\n      id1 = name;\r\n      name = null;\r\n    }\r\n\r\n    let o1 = this.get(id1),\r\n      o2 = this.get(id2);\r\n    if (!o1) throw new Error(\"Can't find object \" + id1);\r\n    if (!o2) throw new Error(\"Can't find object \" + id2);\r\n\r\n    return this.add(new Intersection(name, o1, o2, which));\r\n  }\r\n\r\n  group(tag) {\r\n    this._currentTag = tag;\r\n    return this;\r\n  }\r\n\r\n  add(object) {\r\n    // if we already have this object, and it's the same type, then update the\r\n    // existing one in place.\r\n    let existing = this._objects.get(object.name);\r\n    if (existing && existing.constructor.name === object.constructor.name) {\r\n      for (let prop in object) existing[prop] = object[prop];\r\n      object = existing;\r\n    }\r\n    // if an object of the same name but different type or an object that is\r\n    // geometrically equivalent already exists in the scene, do nothing.\r\n    else if (existing || (existing = this.find(object))) {\r\n      return this;\r\n    }\r\n    // add a new object to the scene.\r\n    else {\r\n      object.name = object.name || this.freeName();\r\n      this._objects.set(object.name, object);\r\n    }\r\n\r\n    if (this._currentTag) addClass(object, this._currentTag);\r\n    if (object.free) addClass(object, 'free-point');\r\n\r\n    this.update(object);\r\n\r\n    this._last = object;\r\n    return this;\r\n  }\r\n\r\n  freeName() {\r\n    let keys = this._objects.keys(),\r\n      id = 0;\r\n    for (; keys.indexOf('object' + id) >= 0; id++);\r\n    return 'object' + id;\r\n  }\r\n\r\n  /**\r\n   * update - Update objects to reflect changes in dependent objects. (E.g.,\r\n   * update Intersection coordinates when the intersected objects have changed.)\r\n   *\r\n   * @param {Geom} root The object from which to start walking the dependency graph.\r\n   */\r\n  // TODO: respect `root` parameter, and do an actual DAG walk.\r\n  update(root) {\r\n    this._objects\r\n      .values()\r\n      .filter((obj) => obj instanceof Intersection)\r\n      .forEach((obj) => obj.update());\r\n  }\r\n\r\n  logState(label) {\r\n    let self = this;\r\n    let objects = this._objects.values();\r\n    let points = this.points();\r\n\r\n    let state = {\r\n      label,\r\n      time: new Date().toString(),\r\n      objects: objects.map((o) => o.toString())\r\n    };\r\n    this.log.push(state);\r\n  }\r\n}\r\n\r\nexport { Scene };\r\n","import * as d3 from 'd3';\r\nimport { Circle, Line, Point, Segment } from './model';\r\n\r\nfunction klasses() {\r\n  let init = Array.prototype.slice.call(arguments, 0);\r\n  return (d) => init.concat(d.classes ? d.classes.values() : []).join(' ');\r\n}\r\n\r\nfunction renderGeometry(scene, svgElement) {\r\n  let svg = d3.select(svgElement);\r\n\r\n  /* circles */\r\n  let circles = svg.selectAll('g.circle').data(scene.objects().filter((d) => d instanceof Circle));\r\n\r\n  let circleGroup = circles\r\n    .enter()\r\n    .append('g')\r\n    .attr('class', klasses('circle'));\r\n  circleGroup.append('circle').attr('class', 'handle');\r\n  circleGroup.append('circle').attr('class', 'visible');\r\n\r\n  circles\r\n    .attr('class', klasses('circle'))\r\n    .selectAll('circle')\r\n    .attr('cx', (d) => d.center.x)\r\n    .attr('cy', (d) => d.center.y)\r\n    .attr('r', (d) => d.radius);\r\n\r\n  circles.exit().remove();\r\n\r\n  /* lines */\r\n  let lines = svg.selectAll('g.line').data(scene.objects().filter((d) => d instanceof Line));\r\n\r\n  let lineGroup = lines\r\n    .enter()\r\n    .append('g')\r\n    .attr('class', klasses('line'));\r\n  lineGroup.filter((d) => d instanceof Segment).attr('class', klasses('line', 'segment'));\r\n  lineGroup.append('line').attr('class', 'handle');\r\n  lineGroup.append('line').attr('class', 'visible');\r\n\r\n  // TODO: this is grossly inefficient\r\n  function endpoint(index, coord) {\r\n    return (d) => {\r\n      let s = d instanceof Segment ? d : Segment.clip(scene.bounds, d);\r\n      return s.p[index][coord];\r\n    };\r\n  }\r\n\r\n  lines\r\n    .attr('class', klasses('line'))\r\n    .selectAll('line')\r\n    .attr('x1', endpoint(0, 'x'))\r\n    .attr('y1', endpoint(0, 'y'))\r\n    .attr('x2', endpoint(1, 'x'))\r\n    .attr('y2', endpoint(1, 'y'));\r\n\r\n  lines.exit().remove();\r\n}\r\n\r\nfunction renderPoints(scene, svgElement) {\r\n  let svg = d3.select(svgElement);\r\n\r\n  /* points */\r\n  let points = svg.selectAll('circle.point').data(scene.objects().filter((d) => d instanceof Point));\r\n\r\n  points\r\n    .enter()\r\n    .append('circle')\r\n    .attr('class', klasses('point'))\r\n    .attr('cx', (d) => d.x)\r\n    .attr('cy', (d) => d.y)\r\n    .attr('r', (d) => 5);\r\n\r\n  points\r\n    .enter()\r\n    .append('text')\r\n    .attr('class', klasses('point-name'))\r\n    .attr('x', (d) => d.x + 10)\r\n    .attr('y', (d) => d.y - 15)\r\n    .attr('id', (d) => `point-${d.name}`);\r\n\r\n  points.enter()._groups[0].forEach((node) => {\r\n    const name = node.__data__.name;\r\n    document.getElementById(`point-${name}`).appendChild(document.createTextNode(name));\r\n  });\r\n\r\n  points.exit().remove();\r\n}\r\n\r\nexport { renderGeometry, renderPoints };\r\n","import * as React from 'react';\r\nimport { Scene } from '../../../vendor/euclid';\r\nimport { renderGeometry, renderPoints } from '../../../vendor/euclid/render';\r\nimport type { DrawingDataType } from '../../../utils/types';\r\nimport './DrawingPanel.scss';\r\ntype PropsType = {\r\n  drawingData: DrawingDataType\r\n};\r\n\r\nclass DrawingPanel extends React.Component<PropsType> {\r\n  componentDidMount() {\r\n    this.renderGeometry(this.props.drawingData);\r\n  }\r\n\r\n  componentDidUpdate() {\r\n    this.renderGeometry(this.props.drawingData);\r\n  }\r\n\r\n  renderGeometry(drawingData: DrawingDataType) {\r\n    const svg = document.getElementById('geometry');\r\n\r\n    while (svg.firstChild) {\r\n      svg.firstChild.remove();\r\n    }\r\n    const pointElements = document.getElementById('points');\r\n    while (pointElements.firstChild) {\r\n      pointElements.firstChild.remove();\r\n    }\r\n\r\n    const { points, segments, circles } = drawingData;\r\n    const viewBox = svg.viewBox.baseVal;\r\n    const width = viewBox.width;\r\n    const height = viewBox.height;\r\n\r\n    const scene = new Scene({\r\n      left: viewBox.x,\r\n      top: viewBox.y,\r\n      right: viewBox.x + width,\r\n      bottom: viewBox.y + height\r\n    });\r\n\r\n    const arrX = [];\r\n    const arrY = [];\r\n    points.forEach((point) => {\r\n      arrX.push(point.coordinate.x);\r\n      arrY.push(point.coordinate.y);\r\n    });\r\n\r\n    const disparityX = Math.max(...arrX) - Math.min(...arrX);\r\n    const disparityY = Math.max(...arrY) - Math.min(...arrY);\r\n    let ratio = 0;\r\n    const ODD = 15;\r\n    if (disparityX / disparityY >= 1) {\r\n      // scale theo width\r\n      // giá trị ước lượng (ODD): nhằm tránh điểm render ngay cạnh của viewBox sẽ làm mất tên điểm\r\n      ratio = Math.floor(width / disparityX) - ODD;\r\n    } else {\r\n      ratio = Math.floor(height / disparityY) - ODD;\r\n    }\r\n\r\n    const anchorX = Math.min(...arrX) + disparityX / 2;\r\n    const anchorY = Math.min(...arrY) + disparityY / 2;\r\n    points.forEach((point) => {\r\n      scene.point(\r\n        point.id,\r\n        point.coordinate.x * ratio + width / 2 - ratio * anchorX,\r\n        point.coordinate.y * ratio + height / 2 - ratio * anchorY\r\n      );\r\n    });\r\n\r\n    segments.forEach((segment) => {\r\n      if (segment && segment.visible) {\r\n        scene.segment(segment.name, segment.name[0], segment.name[1]);\r\n      }\r\n    });\r\n\r\n    if (circles) {\r\n      Object.keys(circles).forEach((point) => {\r\n        scene.point(\r\n          point,\r\n          circles[point].center.x * ratio + width / 2 - ratio * anchorX,\r\n          circles[point].center.y * ratio + height / 2 - ratio * anchorY\r\n        );\r\n        scene.circle(`circle-${point}`, point, circles[point].radius * ratio);\r\n      });\r\n    }\r\n\r\n    scene.update();\r\n    renderGeometry(scene, svg);\r\n    renderGeometry(scene, svg);\r\n    renderPoints(scene, pointElements);\r\n  }\r\n\r\n  render(): React.Node {\r\n    return (\r\n      <div className=\"geometry-container\">\r\n        <svg id=\"geometry\" className=\"geometry-scene\" viewBox=\"0 0 800 800\" />\r\n        <svg id=\"points\" className=\"geometry-scene\" viewBox=\"0 0 800 800\" />\r\n      </div>\r\n    );\r\n  }\r\n}\r\n\r\nexport default DrawingPanel;\r\n","import React from 'react';\r\nimport './css/MainView.scss';\r\nimport { observer } from 'mobx-react';\r\nimport autobind from 'autobind-decorator';\r\nimport { Button, OverlayTrigger, Tooltip } from 'react-bootstrap';\r\n\r\nimport DataViewModel from '../ViewModel/DataViewModel';\r\n\r\nimport { Icon, InputItem, SegmentSetting } from './components';\r\nimport { DrawingPanel } from './components/DrawingPanel';\r\nimport { calculateDistanceTwoPoints, calculateVector, isVectorSameDirection } from '../core/math/Math2D';\r\nimport type { DrawingSegmentType, SegmentDataType } from '../utils/types';\r\nimport appData from '../Model/AppData';\r\n@observer\r\nclass MainView extends React.Component {\r\n  constructor(props) {\r\n    super(props);\r\n    this.inputRefs = [];\r\n    this.state = {\r\n      focusIndex: 0,\r\n      points: [\r\n        { id: 'A', coordinate: { x: 0, y: 0, z: 0 } },\r\n        { id: 'B', coordinate: { y: 5, x: -7 } },\r\n        { id: 'C', coordinate: { x: -9, y: 4.0901353661613005 } },\r\n        { id: 'H', coordinate: { x: -3.0849364905389067, y: 6.781088913245535 } },\r\n        { id: 'D', coordinate: { x: -5.250000000000003, y: 3.7500000000000018 } },\r\n        { id: 'E', coordinate: { x: -8, y: 9.794855240493977 } }\r\n      ],\r\n      segments: [\r\n        'AB',\r\n        'BC',\r\n        'AC',\r\n        'AH',\r\n        'DH',\r\n        'DE',\r\n        'HB',\r\n        'HA',\r\n        'HA',\r\n        'HD',\r\n        'DA',\r\n        'DD',\r\n        'DD',\r\n        'DA',\r\n        'ED',\r\n        'EA',\r\n        'HB',\r\n        'HA',\r\n        'HA',\r\n        'HD',\r\n        'DA',\r\n        'DD',\r\n        'DD',\r\n        'DA',\r\n        'ED',\r\n        'EA',\r\n        'HB',\r\n        'HA',\r\n        'HA',\r\n        'HD',\r\n        'DA',\r\n        'DD',\r\n        'DD',\r\n        'DA',\r\n        'ED',\r\n        'EA'\r\n      ],\r\n      drawingSegments: []\r\n    };\r\n    this.scrollView = React.createRef();\r\n  }\r\n\r\n  componentWillMount() {\r\n    const { points, segments } = this.state;\r\n    this.setState({\r\n      drawingSegments: this.trimDrawingData({ points, segments }).map((segment: string): DrawingSegmentType => ({\r\n        name: segment,\r\n        visible: true\r\n      }))\r\n    });\r\n  }\r\n\r\n  @autobind\r\n  scrollToBottom() {\r\n    if (this.scrollView.current) {\r\n      setTimeout(() => {\r\n        this.scrollView.current.firstChild.scrollIntoView(false);\r\n      }, 250);\r\n    }\r\n  }\r\n\r\n  @autobind\r\n  trimDrawingData(data) {\r\n    const { points, segments } = data;\r\n\r\n    //change to DataViewModel.getNodeInPointsMapById.coordinate when refactor done\r\n    const pointData = {};\r\n    points.forEach((point) => {\r\n      pointData[point.id] = point.coordinate;\r\n    });\r\n\r\n    const segmentsData = {};\r\n    let result = [];\r\n    points.forEach((point) => {\r\n      segmentsData[point.id] = segments\r\n        .map((segment: string): string =>\r\n          segment\r\n            .split('')\r\n            .sort()\r\n            .join('')\r\n        )\r\n        .filter((segment: string): boolean => segment.includes(point.id))\r\n        .map((segment: string): SegmentDataType => {\r\n          const firstPoint = pointData[segment[0]];\r\n          const secondPoint = pointData[segment[1]];\r\n          return {\r\n            name: segment,\r\n            vector: calculateVector(firstPoint, secondPoint),\r\n            length: calculateDistanceTwoPoints(firstPoint, secondPoint)\r\n          };\r\n        });\r\n    });\r\n\r\n    const removeSegments = [];\r\n\r\n    Object.keys(segmentsData).forEach((point) => {\r\n      if (segmentsData[point].length > 0) {\r\n        const segments = this.uniqueSegmentData(segmentsData[point], removeSegments);\r\n        result = result.concat(segments);\r\n      }\r\n    });\r\n\r\n    result = [...new Set(result)].filter((segment: string): boolean => segment[0] !== segment[1]);\r\n\r\n    return result;\r\n  }\r\n\r\n  uniqueSegmentData(data: Array<SegmentDataType>, removeSegments: Array<string>): Array<string> {\r\n    let result = [data[0]];\r\n    for (let i = 1; i < data.length; i++) {\r\n      const segmentData = data[i];\r\n\r\n      const length = result.length;\r\n      let replaceIndex = -1;\r\n      for (let j = 0; j < length; j++) {\r\n        if (isVectorSameDirection(segmentData.vector, result[j].vector)) {\r\n          if (segmentData.length >= result[j].length) {\r\n            replaceIndex = j;\r\n          } else {\r\n            removeSegments.push(segmentData.name);\r\n          }\r\n        }\r\n      }\r\n      if (replaceIndex >= 0) {\r\n        result[replaceIndex] = segmentData;\r\n      } else {\r\n        if (!removeSegments.includes(segmentData.name)) {\r\n          result.push(segmentData);\r\n        }\r\n      }\r\n    }\r\n\r\n    return result.map((segmentData: SegmentDataType): string => segmentData.name);\r\n  }\r\n\r\n  @autobind\r\n  onValueChange(value: string, index: number) {\r\n    DataViewModel.RelationsInput[index].value = value;\r\n    this.setState({ focusIndex: index });\r\n  }\r\n\r\n  @autobind\r\n  onSubmit(index: number) {\r\n    if (index === DataViewModel.RelationsInput.length - 1 && DataViewModel.RelationsInput[index].value.length > 2) {\r\n      DataViewModel.addNewInput();\r\n    }\r\n\r\n    this.setState({ focusIndex: index + 1 });\r\n  }\r\n\r\n  @autobind\r\n  onBackspace(index: number) {\r\n    const value = DataViewModel.RelationsInput[index].value;\r\n    if (value.length === 0 && DataViewModel.RelationsInput.length > 1) {\r\n      DataViewModel.removeInput(index);\r\n      this.inputRefs.splice(index, 1);\r\n      this.setState({ focusIndex: index - 1 });\r\n    }\r\n  }\r\n\r\n  @autobind\r\n  onClickDrawing() {\r\n    const data = DataViewModel.analyzeInput();\r\n    if (data.points.length === 0 && data.segments.length === 0) {\r\n      DataViewModel.resetInputsStatus();\r\n      return;\r\n    }\r\n\r\n    this.setState({\r\n      points: data.points,\r\n      segments: data.segments,\r\n      drawingSegments: this.trimDrawingData(data).map((segment: string): DrawingSegmentType => ({\r\n        name: segment,\r\n        visible: true\r\n      }))\r\n    });\r\n\r\n    DataViewModel.getData.clear();\r\n  }\r\n\r\n  componentDidUpdate() {\r\n    const { focusIndex } = this.state;\r\n    if (this.inputRefs[focusIndex]) {\r\n      this.inputRefs[focusIndex].focus();\r\n    }\r\n  }\r\n\r\n  @autobind\r\n  renderRelationInput(): React.Node {\r\n    return DataViewModel.RelationsInput.map((model, index) => {\r\n      return (\r\n        <InputItem\r\n          key={`input-${index}`}\r\n          ref={(ref) => {\r\n            this.inputRefs[index] = ref;\r\n          }}\r\n          onValueChange={(value: string) => {\r\n            this.onValueChange(value, index);\r\n          }}\r\n          onSubmit={() => {\r\n            this.onSubmit(index);\r\n          }}\r\n          onBackspace={() => {\r\n            this.onBackspace(index);\r\n          }}\r\n          value={model.value}\r\n          status={model.status}\r\n        />\r\n      );\r\n    });\r\n  }\r\n\r\n  @autobind\r\n  onDoneSegmentSetting(data: DrawingSegmentType, index: number) {\r\n    const { drawingSegments } = this.state;\r\n    if (JSON.stringify(data) === JSON.stringify(drawingSegments[index])) {\r\n      return;\r\n    }\r\n\r\n    const isAddSegment = !!drawingSegments[index];\r\n    drawingSegments[index] = data;\r\n\r\n    this.setState({ drawingSegments }, () => {\r\n      if (isAddSegment) {\r\n        if (drawingSegments.map((segment: SegmentDataType): string => segment.name).includes(data.name)) {\r\n          this.onDeleteSegmentSetting(index);\r\n        }\r\n      }\r\n    });\r\n  }\r\n\r\n  @autobind\r\n  onChangeSegmentSetting(data: DrawingSegmentType, index: number) {\r\n    const { drawingSegments } = this.state;\r\n\r\n    drawingSegments[index] = data;\r\n\r\n    this.setState({ drawingSegments });\r\n  }\r\n\r\n  @autobind\r\n  onDeleteSegmentSetting(index: number) {\r\n    const { drawingSegments } = this.state;\r\n\r\n    drawingSegments.splice(index, 1);\r\n    this.setState({ drawingSegments });\r\n  }\r\n\r\n  @autobind\r\n  addNewSegmentSetting() {\r\n    if (this.state.drawingSegments.includes(undefined)) {\r\n      return;\r\n    }\r\n    this.scrollToBottom();\r\n    this.setState((prevState) => ({\r\n      drawingSegments: prevState.drawingSegments.concat([undefined])\r\n    }));\r\n  }\r\n\r\n  @autobind\r\n  renderSegmentSettings(): React.Node {\r\n    const { drawingSegments } = this.state;\r\n    const points = this.state.points.map((point: NodeType): number => point.id);\r\n\r\n    return drawingSegments.map((segment: DrawingSegmentType, index: number): React.Node => {\r\n      return (\r\n        <SegmentSetting\r\n          key={`segment-setting-${index}`}\r\n          data={points}\r\n          value={segment}\r\n          onDone={(value) => {\r\n            this.onDoneSegmentSetting(value, index);\r\n          }}\r\n          onVisibleChange={(value) => {\r\n            this.onChangeSegmentSetting(value, index);\r\n          }}\r\n          onDelete={() => {\r\n            this.onDeleteSegmentSetting(index);\r\n          }}\r\n          style={index === 0 ? { marginTop: '1rem' } : {}}\r\n        />\r\n      );\r\n    });\r\n  }\r\n\r\n  render() {\r\n    const { points, drawingSegments, segments } = this.state;\r\n    return (\r\n      <div className={'container-fluid'}>\r\n        <div className={'app-header'}>\r\n          <div className={'app-name'}>\r\n            <p>Gemath</p>\r\n          </div>\r\n\r\n          <div className={'app-description'}>\r\n            <p>app description</p>\r\n          </div>\r\n        </div>\r\n\r\n        <div className=\"app-body\">\r\n          <div className=\"app-controller\">\r\n            <div className=\"accordion\" id=\"accordionExample\">\r\n              <div className=\"card\">\r\n                <div\r\n                  className=\"card-header left-panel-tab\"\r\n                  id=\"headingOne\"\r\n                  data-toggle=\"collapse\"\r\n                  data-target=\"#viewOne\"\r\n                  aria-expanded=\"true\"\r\n                  aria-controls=\"collapseOne\">\r\n                  <p>1. Nhập đề</p>\r\n                  <OverlayTrigger\r\n                    key=\"right\"\r\n                    container={this}\r\n                    placement=\"right\"\r\n                    overlay={\r\n                      <Tooltip id={`tooltip-right`} className=\"help-tooltip\">\r\n                        <span>\r\n                          Anim pariatur cliche reprehenderit, enim eiusmod high life accusamus terry richardson ad\r\n                          squid. 3 wolf moon officia aute, non cupidatat skateboard dolor brunch. Food truck quinoa\r\n                          nesciunt laborum eiusmod. Brunch 3 wolf moon tempor, sunt aliqua put a bird on it squid\r\n                        </span>\r\n                      </Tooltip>\r\n                    }>\r\n                    <div className=\"bg-transparent icon-container\">\r\n                      <Icon name=\"icInformation\" width={22} height={22} />\r\n                    </div>\r\n                  </OverlayTrigger>\r\n                </div>\r\n                <div\r\n                  id=\"viewOne\"\r\n                  className=\"collapse show\"\r\n                  aria-labelledby=\"headingOne\"\r\n                  data-parent=\"#accordionExample\">\r\n                  <div className=\"card-body\">\r\n                    <div>\r\n                      {this.renderRelationInput()}\r\n                      <Button\r\n                        type=\"button\"\r\n                        className=\"btn btn-success w-100\"\r\n                        onClick={this.onClickDrawing}\r\n                        disabled={DataViewModel.isInputEmpty}>\r\n                        Vẽ hình\r\n                      </Button>\r\n                    </div>\r\n                  </div>\r\n                </div>\r\n              </div>\r\n\r\n              <div className=\"card\">\r\n                <div\r\n                  className=\"card-header left-panel-tab\"\r\n                  id=\"headingTwp\"\r\n                  data-toggle=\"collapse\"\r\n                  data-target=\"#viewTwo\"\r\n                  aria-expanded=\"true\"\r\n                  aria-controls=\"collapseTwp\">\r\n                  <p>2. Chỉnh sửa hình</p>\r\n                  <OverlayTrigger\r\n                    key=\"right\"\r\n                    container={this}\r\n                    placement=\"right\"\r\n                    overlay={\r\n                      <Tooltip id={`tooltip-right`} className=\"help-tooltip\">\r\n                        <span>\r\n                          Anim pariatur cliche reprehenderit, enim eiusmod high life accusamus terry richardson ad\r\n                          squid. 3 wolf moon officia aute, non cupidatat skateboard dolor brunch. Food truck quinoa\r\n                          nesciunt laborum eiusmod. Brunch 3 wolf moon tempor, sunt aliqua put a bird on it squid\r\n                          single-origin coffee nulla assumenda shoreditch et. Nihil anim keffiyeh helvetica, craft beer\r\n                          labore wes anderson cred nesciunt sapiente ea proident. Ad vegan excepteur butcher vice lomo.\r\n                          Leggings occaecat craft beer farm-to-table, raw denim aesthetic synth nesciunt you probably\r\n                          haven't heard of them accusamus labore sustainable VHS.\r\n                        </span>\r\n                      </Tooltip>\r\n                    }>\r\n                    <div className=\"bg-transparent icon-container\">\r\n                      <Icon name=\"icInformation\" width={22} height={22} />\r\n                    </div>\r\n                  </OverlayTrigger>\r\n                </div>\r\n                <div id=\"viewTwo\" className=\"collapse \" aria-labelledby=\"headingOne\" data-parent=\"#accordionExample\">\r\n                  <div className=\"card-body\" ref={this.scrollView}>\r\n                    <div>\r\n                      {this.renderSegmentSettings()}\r\n                      <div className={'add-row-container'} onClick={this.addNewSegmentSetting}>\r\n                        <Icon name={'icAdd'} width={35} height={35} color={'#757575'} />\r\n                        <p>Thêm đoạn thẳng</p>\r\n                      </div>\r\n                    </div>\r\n                  </div>\r\n                </div>\r\n              </div>\r\n            </div>\r\n          </div>\r\n\r\n          <div className={'app-drawing-panel'}>\r\n            <DrawingPanel drawingData={{ points, segments: drawingSegments, circles: DataViewModel.circlesData }} />\r\n          </div>\r\n        </div>\r\n\r\n        <div className={'app-footer'}>\r\n          <p>abc</p>\r\n        </div>\r\n      </div>\r\n    );\r\n  }\r\n}\r\n\r\nexport default MainView;\r\n","import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport './index.css';\r\nimport * as serviceWorker from './serviceWorker';\r\nimport MainView from './View/MainView';\r\n\r\nReactDOM.render(<MainView />, document.getElementById('root'));\r\n\r\n// If you want your app to work offline and load faster, you can change\r\n// unregister() to register() below. Note this comes with some pitfalls.\r\n// Learn more about service workers: https://bit.ly/CRA-PWA\r\nserviceWorker.unregister();\r\n","// extracted by mini-css-extract-plugin\nmodule.exports = {\"inputSuccess\":\"#28a745\",\"inputError\":\"#dc3545\",\"inputNormal\":\"#6c757d\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"inputSuccess\":\"#28a745\",\"inputError\":\"#dc3545\",\"inputNormal\":\"#6c757d\"};"],"sourceRoot":""}